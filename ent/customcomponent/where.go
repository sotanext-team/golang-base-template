// Code generated by entc, DO NOT EDIT.

package customcomponent

import (
	"app-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ShopID applies equality check predicate on the "shop_id" field. It's identical to ShopIDEQ.
func ShopID(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopID), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Handle applies equality check predicate on the "handle" field. It's identical to HandleEQ.
func Handle(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandle), v))
	})
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// DistURL applies equality check predicate on the "dist_url" field. It's identical to DistURLEQ.
func DistURL(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistURL), v))
	})
}

// IsDraft applies equality check predicate on the "is_draft" field. It's identical to IsDraftEQ.
func IsDraft(v bool) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDraft), v))
	})
}

// EntryFileName applies equality check predicate on the "entry_file_name" field. It's identical to EntryFileNameEQ.
func EntryFileName(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntryFileName), v))
	})
}

// SessionID applies equality check predicate on the "session_id" field. It's identical to SessionIDEQ.
func SessionID(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSessionID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// ShopIDEQ applies the EQ predicate on the "shop_id" field.
func ShopIDEQ(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopID), v))
	})
}

// ShopIDNEQ applies the NEQ predicate on the "shop_id" field.
func ShopIDNEQ(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShopID), v))
	})
}

// ShopIDIn applies the In predicate on the "shop_id" field.
func ShopIDIn(vs ...uint64) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShopID), v...))
	})
}

// ShopIDNotIn applies the NotIn predicate on the "shop_id" field.
func ShopIDNotIn(vs ...uint64) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShopID), v...))
	})
}

// ShopIDGT applies the GT predicate on the "shop_id" field.
func ShopIDGT(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShopID), v))
	})
}

// ShopIDGTE applies the GTE predicate on the "shop_id" field.
func ShopIDGTE(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShopID), v))
	})
}

// ShopIDLT applies the LT predicate on the "shop_id" field.
func ShopIDLT(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShopID), v))
	})
}

// ShopIDLTE applies the LTE predicate on the "shop_id" field.
func ShopIDLTE(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShopID), v))
	})
}

// ShopIDIsNil applies the IsNil predicate on the "shop_id" field.
func ShopIDIsNil() predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShopID)))
	})
}

// ShopIDNotNil applies the NotNil predicate on the "shop_id" field.
func ShopIDNotNil() predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShopID)))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uint64) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uint64) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// HandleEQ applies the EQ predicate on the "handle" field.
func HandleEQ(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandle), v))
	})
}

// HandleNEQ applies the NEQ predicate on the "handle" field.
func HandleNEQ(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHandle), v))
	})
}

// HandleIn applies the In predicate on the "handle" field.
func HandleIn(vs ...string) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHandle), v...))
	})
}

// HandleNotIn applies the NotIn predicate on the "handle" field.
func HandleNotIn(vs ...string) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHandle), v...))
	})
}

// HandleGT applies the GT predicate on the "handle" field.
func HandleGT(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHandle), v))
	})
}

// HandleGTE applies the GTE predicate on the "handle" field.
func HandleGTE(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHandle), v))
	})
}

// HandleLT applies the LT predicate on the "handle" field.
func HandleLT(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHandle), v))
	})
}

// HandleLTE applies the LTE predicate on the "handle" field.
func HandleLTE(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHandle), v))
	})
}

// HandleContains applies the Contains predicate on the "handle" field.
func HandleContains(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHandle), v))
	})
}

// HandleHasPrefix applies the HasPrefix predicate on the "handle" field.
func HandleHasPrefix(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHandle), v))
	})
}

// HandleHasSuffix applies the HasSuffix predicate on the "handle" field.
func HandleHasSuffix(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHandle), v))
	})
}

// HandleEqualFold applies the EqualFold predicate on the "handle" field.
func HandleEqualFold(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHandle), v))
	})
}

// HandleContainsFold applies the ContainsFold predicate on the "handle" field.
func HandleContainsFold(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHandle), v))
	})
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContent), v))
	})
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContent), v...))
	})
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContent), v...))
	})
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContent), v))
	})
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContent), v))
	})
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContent), v))
	})
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContent), v))
	})
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContent), v))
	})
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContent), v))
	})
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContent), v))
	})
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldContent)))
	})
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldContent)))
	})
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContent), v))
	})
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContent), v))
	})
}

// DistURLEQ applies the EQ predicate on the "dist_url" field.
func DistURLEQ(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistURL), v))
	})
}

// DistURLNEQ applies the NEQ predicate on the "dist_url" field.
func DistURLNEQ(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDistURL), v))
	})
}

// DistURLIn applies the In predicate on the "dist_url" field.
func DistURLIn(vs ...string) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDistURL), v...))
	})
}

// DistURLNotIn applies the NotIn predicate on the "dist_url" field.
func DistURLNotIn(vs ...string) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDistURL), v...))
	})
}

// DistURLGT applies the GT predicate on the "dist_url" field.
func DistURLGT(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDistURL), v))
	})
}

// DistURLGTE applies the GTE predicate on the "dist_url" field.
func DistURLGTE(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDistURL), v))
	})
}

// DistURLLT applies the LT predicate on the "dist_url" field.
func DistURLLT(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDistURL), v))
	})
}

// DistURLLTE applies the LTE predicate on the "dist_url" field.
func DistURLLTE(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDistURL), v))
	})
}

// DistURLContains applies the Contains predicate on the "dist_url" field.
func DistURLContains(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDistURL), v))
	})
}

// DistURLHasPrefix applies the HasPrefix predicate on the "dist_url" field.
func DistURLHasPrefix(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDistURL), v))
	})
}

// DistURLHasSuffix applies the HasSuffix predicate on the "dist_url" field.
func DistURLHasSuffix(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDistURL), v))
	})
}

// DistURLIsNil applies the IsNil predicate on the "dist_url" field.
func DistURLIsNil() predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDistURL)))
	})
}

// DistURLNotNil applies the NotNil predicate on the "dist_url" field.
func DistURLNotNil() predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDistURL)))
	})
}

// DistURLEqualFold applies the EqualFold predicate on the "dist_url" field.
func DistURLEqualFold(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDistURL), v))
	})
}

// DistURLContainsFold applies the ContainsFold predicate on the "dist_url" field.
func DistURLContainsFold(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDistURL), v))
	})
}

// IsDraftEQ applies the EQ predicate on the "is_draft" field.
func IsDraftEQ(v bool) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDraft), v))
	})
}

// IsDraftNEQ applies the NEQ predicate on the "is_draft" field.
func IsDraftNEQ(v bool) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDraft), v))
	})
}

// IsDraftIsNil applies the IsNil predicate on the "is_draft" field.
func IsDraftIsNil() predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsDraft)))
	})
}

// IsDraftNotNil applies the NotNil predicate on the "is_draft" field.
func IsDraftNotNil() predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsDraft)))
	})
}

// EntryFileNameEQ applies the EQ predicate on the "entry_file_name" field.
func EntryFileNameEQ(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntryFileName), v))
	})
}

// EntryFileNameNEQ applies the NEQ predicate on the "entry_file_name" field.
func EntryFileNameNEQ(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntryFileName), v))
	})
}

// EntryFileNameIn applies the In predicate on the "entry_file_name" field.
func EntryFileNameIn(vs ...string) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEntryFileName), v...))
	})
}

// EntryFileNameNotIn applies the NotIn predicate on the "entry_file_name" field.
func EntryFileNameNotIn(vs ...string) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEntryFileName), v...))
	})
}

// EntryFileNameGT applies the GT predicate on the "entry_file_name" field.
func EntryFileNameGT(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntryFileName), v))
	})
}

// EntryFileNameGTE applies the GTE predicate on the "entry_file_name" field.
func EntryFileNameGTE(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntryFileName), v))
	})
}

// EntryFileNameLT applies the LT predicate on the "entry_file_name" field.
func EntryFileNameLT(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntryFileName), v))
	})
}

// EntryFileNameLTE applies the LTE predicate on the "entry_file_name" field.
func EntryFileNameLTE(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntryFileName), v))
	})
}

// EntryFileNameContains applies the Contains predicate on the "entry_file_name" field.
func EntryFileNameContains(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEntryFileName), v))
	})
}

// EntryFileNameHasPrefix applies the HasPrefix predicate on the "entry_file_name" field.
func EntryFileNameHasPrefix(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEntryFileName), v))
	})
}

// EntryFileNameHasSuffix applies the HasSuffix predicate on the "entry_file_name" field.
func EntryFileNameHasSuffix(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEntryFileName), v))
	})
}

// EntryFileNameIsNil applies the IsNil predicate on the "entry_file_name" field.
func EntryFileNameIsNil() predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEntryFileName)))
	})
}

// EntryFileNameNotNil applies the NotNil predicate on the "entry_file_name" field.
func EntryFileNameNotNil() predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEntryFileName)))
	})
}

// EntryFileNameEqualFold applies the EqualFold predicate on the "entry_file_name" field.
func EntryFileNameEqualFold(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEntryFileName), v))
	})
}

// EntryFileNameContainsFold applies the ContainsFold predicate on the "entry_file_name" field.
func EntryFileNameContainsFold(v string) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEntryFileName), v))
	})
}

// SessionIDEQ applies the EQ predicate on the "session_id" field.
func SessionIDEQ(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSessionID), v))
	})
}

// SessionIDNEQ applies the NEQ predicate on the "session_id" field.
func SessionIDNEQ(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSessionID), v))
	})
}

// SessionIDIn applies the In predicate on the "session_id" field.
func SessionIDIn(vs ...uint64) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSessionID), v...))
	})
}

// SessionIDNotIn applies the NotIn predicate on the "session_id" field.
func SessionIDNotIn(vs ...uint64) predicate.CustomComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSessionID), v...))
	})
}

// SessionIDGT applies the GT predicate on the "session_id" field.
func SessionIDGT(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSessionID), v))
	})
}

// SessionIDGTE applies the GTE predicate on the "session_id" field.
func SessionIDGTE(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSessionID), v))
	})
}

// SessionIDLT applies the LT predicate on the "session_id" field.
func SessionIDLT(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSessionID), v))
	})
}

// SessionIDLTE applies the LTE predicate on the "session_id" field.
func SessionIDLTE(v uint64) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSessionID), v))
	})
}

// SessionIDIsNil applies the IsNil predicate on the "session_id" field.
func SessionIDIsNil() predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSessionID)))
	})
}

// SessionIDNotNil applies the NotNil predicate on the "session_id" field.
func SessionIDNotNil() predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSessionID)))
	})
}

// HasProps applies the HasEdge predicate on the "props" edge.
func HasProps() predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PropsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PropsTable, PropsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPropsWith applies the HasEdge predicate on the "props" edge with a given conditions (other predicates).
func HasPropsWith(preds ...predicate.ComponentProperty) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PropsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PropsTable, PropsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CustomComponent) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CustomComponent) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CustomComponent) predicate.CustomComponent {
	return predicate.CustomComponent(func(s *sql.Selector) {
		p(s.Not())
	})
}
