// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/bktemplatesection"
	"app-api/ent/componentproperty"
	"app-api/ent/customcomponent"
	"app-api/ent/globaltemplate"
	"app-api/ent/predicate"
	"app-api/ent/shop"
	"app-api/ent/templatesection"
	"app-api/ent/templatesectionversion"
	"app-api/ent/theme"
	"app-api/ent/themetemplate"
	"app-api/ent/todo"
	"context"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBkTemplateSection      = "BkTemplateSection"
	TypeComponentProperty      = "ComponentProperty"
	TypeCustomComponent        = "CustomComponent"
	TypeGlobalTemplate         = "GlobalTemplate"
	TypeShop                   = "Shop"
	TypeTemplateSection        = "TemplateSection"
	TypeTemplateSectionVersion = "TemplateSectionVersion"
	TypeTheme                  = "Theme"
	TypeThemeTemplate          = "ThemeTemplate"
	TypeTodo                   = "Todo"
)

// BkTemplateSectionMutation represents an operation that mutates the BkTemplateSection nodes in the graph.
type BkTemplateSectionMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uint64
	created_at             *time.Time
	updated_at             *time.Time
	theme_template_id      *uint64
	addtheme_template_id   *uint64
	theme_id               *uint64
	addtheme_id            *uint64
	theme_layout_id        *uint64
	addtheme_layout_id     *uint64
	data                   *string
	clearedFields          map[string]struct{}
	templateSection        *uint64
	clearedtemplateSection bool
	version                *uint64
	clearedversion         bool
	done                   bool
	oldValue               func(context.Context) (*BkTemplateSection, error)
	predicates             []predicate.BkTemplateSection
}

var _ ent.Mutation = (*BkTemplateSectionMutation)(nil)

// bktemplatesectionOption allows management of the mutation configuration using functional options.
type bktemplatesectionOption func(*BkTemplateSectionMutation)

// newBkTemplateSectionMutation creates new mutation for the BkTemplateSection entity.
func newBkTemplateSectionMutation(c config, op Op, opts ...bktemplatesectionOption) *BkTemplateSectionMutation {
	m := &BkTemplateSectionMutation{
		config:        c,
		op:            op,
		typ:           TypeBkTemplateSection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBkTemplateSectionID sets the ID field of the mutation.
func withBkTemplateSectionID(id uint64) bktemplatesectionOption {
	return func(m *BkTemplateSectionMutation) {
		var (
			err   error
			once  sync.Once
			value *BkTemplateSection
		)
		m.oldValue = func(ctx context.Context) (*BkTemplateSection, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BkTemplateSection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBkTemplateSection sets the old BkTemplateSection of the mutation.
func withBkTemplateSection(node *BkTemplateSection) bktemplatesectionOption {
	return func(m *BkTemplateSectionMutation) {
		m.oldValue = func(context.Context) (*BkTemplateSection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BkTemplateSectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BkTemplateSectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BkTemplateSection entities.
func (m *BkTemplateSectionMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BkTemplateSectionMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *BkTemplateSectionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BkTemplateSectionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the BkTemplateSection entity.
// If the BkTemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BkTemplateSectionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BkTemplateSectionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BkTemplateSectionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BkTemplateSectionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the BkTemplateSection entity.
// If the BkTemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BkTemplateSectionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BkTemplateSectionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetVersionID sets the "version_id" field.
func (m *BkTemplateSectionMutation) SetVersionID(u uint64) {
	m.version = &u
}

// VersionID returns the value of the "version_id" field in the mutation.
func (m *BkTemplateSectionMutation) VersionID() (r uint64, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersionID returns the old "version_id" field's value of the BkTemplateSection entity.
// If the BkTemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BkTemplateSectionMutation) OldVersionID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVersionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVersionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersionID: %w", err)
	}
	return oldValue.VersionID, nil
}

// ClearVersionID clears the value of the "version_id" field.
func (m *BkTemplateSectionMutation) ClearVersionID() {
	m.version = nil
	m.clearedFields[bktemplatesection.FieldVersionID] = struct{}{}
}

// VersionIDCleared returns if the "version_id" field was cleared in this mutation.
func (m *BkTemplateSectionMutation) VersionIDCleared() bool {
	_, ok := m.clearedFields[bktemplatesection.FieldVersionID]
	return ok
}

// ResetVersionID resets all changes to the "version_id" field.
func (m *BkTemplateSectionMutation) ResetVersionID() {
	m.version = nil
	delete(m.clearedFields, bktemplatesection.FieldVersionID)
}

// SetThemeTemplateID sets the "theme_template_id" field.
func (m *BkTemplateSectionMutation) SetThemeTemplateID(u uint64) {
	m.theme_template_id = &u
	m.addtheme_template_id = nil
}

// ThemeTemplateID returns the value of the "theme_template_id" field in the mutation.
func (m *BkTemplateSectionMutation) ThemeTemplateID() (r uint64, exists bool) {
	v := m.theme_template_id
	if v == nil {
		return
	}
	return *v, true
}

// OldThemeTemplateID returns the old "theme_template_id" field's value of the BkTemplateSection entity.
// If the BkTemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BkTemplateSectionMutation) OldThemeTemplateID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldThemeTemplateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldThemeTemplateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThemeTemplateID: %w", err)
	}
	return oldValue.ThemeTemplateID, nil
}

// AddThemeTemplateID adds u to the "theme_template_id" field.
func (m *BkTemplateSectionMutation) AddThemeTemplateID(u uint64) {
	if m.addtheme_template_id != nil {
		*m.addtheme_template_id += u
	} else {
		m.addtheme_template_id = &u
	}
}

// AddedThemeTemplateID returns the value that was added to the "theme_template_id" field in this mutation.
func (m *BkTemplateSectionMutation) AddedThemeTemplateID() (r uint64, exists bool) {
	v := m.addtheme_template_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearThemeTemplateID clears the value of the "theme_template_id" field.
func (m *BkTemplateSectionMutation) ClearThemeTemplateID() {
	m.theme_template_id = nil
	m.addtheme_template_id = nil
	m.clearedFields[bktemplatesection.FieldThemeTemplateID] = struct{}{}
}

// ThemeTemplateIDCleared returns if the "theme_template_id" field was cleared in this mutation.
func (m *BkTemplateSectionMutation) ThemeTemplateIDCleared() bool {
	_, ok := m.clearedFields[bktemplatesection.FieldThemeTemplateID]
	return ok
}

// ResetThemeTemplateID resets all changes to the "theme_template_id" field.
func (m *BkTemplateSectionMutation) ResetThemeTemplateID() {
	m.theme_template_id = nil
	m.addtheme_template_id = nil
	delete(m.clearedFields, bktemplatesection.FieldThemeTemplateID)
}

// SetTemplateSectionID sets the "template_section_id" field.
func (m *BkTemplateSectionMutation) SetTemplateSectionID(u uint64) {
	m.templateSection = &u
}

// TemplateSectionID returns the value of the "template_section_id" field in the mutation.
func (m *BkTemplateSectionMutation) TemplateSectionID() (r uint64, exists bool) {
	v := m.templateSection
	if v == nil {
		return
	}
	return *v, true
}

// OldTemplateSectionID returns the old "template_section_id" field's value of the BkTemplateSection entity.
// If the BkTemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BkTemplateSectionMutation) OldTemplateSectionID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTemplateSectionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTemplateSectionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTemplateSectionID: %w", err)
	}
	return oldValue.TemplateSectionID, nil
}

// ClearTemplateSectionID clears the value of the "template_section_id" field.
func (m *BkTemplateSectionMutation) ClearTemplateSectionID() {
	m.templateSection = nil
	m.clearedFields[bktemplatesection.FieldTemplateSectionID] = struct{}{}
}

// TemplateSectionIDCleared returns if the "template_section_id" field was cleared in this mutation.
func (m *BkTemplateSectionMutation) TemplateSectionIDCleared() bool {
	_, ok := m.clearedFields[bktemplatesection.FieldTemplateSectionID]
	return ok
}

// ResetTemplateSectionID resets all changes to the "template_section_id" field.
func (m *BkTemplateSectionMutation) ResetTemplateSectionID() {
	m.templateSection = nil
	delete(m.clearedFields, bktemplatesection.FieldTemplateSectionID)
}

// SetThemeID sets the "theme_id" field.
func (m *BkTemplateSectionMutation) SetThemeID(u uint64) {
	m.theme_id = &u
	m.addtheme_id = nil
}

// ThemeID returns the value of the "theme_id" field in the mutation.
func (m *BkTemplateSectionMutation) ThemeID() (r uint64, exists bool) {
	v := m.theme_id
	if v == nil {
		return
	}
	return *v, true
}

// OldThemeID returns the old "theme_id" field's value of the BkTemplateSection entity.
// If the BkTemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BkTemplateSectionMutation) OldThemeID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldThemeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldThemeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThemeID: %w", err)
	}
	return oldValue.ThemeID, nil
}

// AddThemeID adds u to the "theme_id" field.
func (m *BkTemplateSectionMutation) AddThemeID(u uint64) {
	if m.addtheme_id != nil {
		*m.addtheme_id += u
	} else {
		m.addtheme_id = &u
	}
}

// AddedThemeID returns the value that was added to the "theme_id" field in this mutation.
func (m *BkTemplateSectionMutation) AddedThemeID() (r uint64, exists bool) {
	v := m.addtheme_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearThemeID clears the value of the "theme_id" field.
func (m *BkTemplateSectionMutation) ClearThemeID() {
	m.theme_id = nil
	m.addtheme_id = nil
	m.clearedFields[bktemplatesection.FieldThemeID] = struct{}{}
}

// ThemeIDCleared returns if the "theme_id" field was cleared in this mutation.
func (m *BkTemplateSectionMutation) ThemeIDCleared() bool {
	_, ok := m.clearedFields[bktemplatesection.FieldThemeID]
	return ok
}

// ResetThemeID resets all changes to the "theme_id" field.
func (m *BkTemplateSectionMutation) ResetThemeID() {
	m.theme_id = nil
	m.addtheme_id = nil
	delete(m.clearedFields, bktemplatesection.FieldThemeID)
}

// SetThemeLayoutID sets the "theme_layout_id" field.
func (m *BkTemplateSectionMutation) SetThemeLayoutID(u uint64) {
	m.theme_layout_id = &u
	m.addtheme_layout_id = nil
}

// ThemeLayoutID returns the value of the "theme_layout_id" field in the mutation.
func (m *BkTemplateSectionMutation) ThemeLayoutID() (r uint64, exists bool) {
	v := m.theme_layout_id
	if v == nil {
		return
	}
	return *v, true
}

// OldThemeLayoutID returns the old "theme_layout_id" field's value of the BkTemplateSection entity.
// If the BkTemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BkTemplateSectionMutation) OldThemeLayoutID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldThemeLayoutID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldThemeLayoutID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThemeLayoutID: %w", err)
	}
	return oldValue.ThemeLayoutID, nil
}

// AddThemeLayoutID adds u to the "theme_layout_id" field.
func (m *BkTemplateSectionMutation) AddThemeLayoutID(u uint64) {
	if m.addtheme_layout_id != nil {
		*m.addtheme_layout_id += u
	} else {
		m.addtheme_layout_id = &u
	}
}

// AddedThemeLayoutID returns the value that was added to the "theme_layout_id" field in this mutation.
func (m *BkTemplateSectionMutation) AddedThemeLayoutID() (r uint64, exists bool) {
	v := m.addtheme_layout_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearThemeLayoutID clears the value of the "theme_layout_id" field.
func (m *BkTemplateSectionMutation) ClearThemeLayoutID() {
	m.theme_layout_id = nil
	m.addtheme_layout_id = nil
	m.clearedFields[bktemplatesection.FieldThemeLayoutID] = struct{}{}
}

// ThemeLayoutIDCleared returns if the "theme_layout_id" field was cleared in this mutation.
func (m *BkTemplateSectionMutation) ThemeLayoutIDCleared() bool {
	_, ok := m.clearedFields[bktemplatesection.FieldThemeLayoutID]
	return ok
}

// ResetThemeLayoutID resets all changes to the "theme_layout_id" field.
func (m *BkTemplateSectionMutation) ResetThemeLayoutID() {
	m.theme_layout_id = nil
	m.addtheme_layout_id = nil
	delete(m.clearedFields, bktemplatesection.FieldThemeLayoutID)
}

// SetData sets the "data" field.
func (m *BkTemplateSectionMutation) SetData(s string) {
	m.data = &s
}

// Data returns the value of the "data" field in the mutation.
func (m *BkTemplateSectionMutation) Data() (r string, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the BkTemplateSection entity.
// If the BkTemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BkTemplateSectionMutation) OldData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "data" field.
func (m *BkTemplateSectionMutation) ResetData() {
	m.data = nil
}

// ClearTemplateSection clears the "templateSection" edge to the TemplateSection entity.
func (m *BkTemplateSectionMutation) ClearTemplateSection() {
	m.clearedtemplateSection = true
}

// TemplateSectionCleared reports if the "templateSection" edge to the TemplateSection entity was cleared.
func (m *BkTemplateSectionMutation) TemplateSectionCleared() bool {
	return m.TemplateSectionIDCleared() || m.clearedtemplateSection
}

// TemplateSectionIDs returns the "templateSection" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TemplateSectionID instead. It exists only for internal usage by the builders.
func (m *BkTemplateSectionMutation) TemplateSectionIDs() (ids []uint64) {
	if id := m.templateSection; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTemplateSection resets all changes to the "templateSection" edge.
func (m *BkTemplateSectionMutation) ResetTemplateSection() {
	m.templateSection = nil
	m.clearedtemplateSection = false
}

// ClearVersion clears the "version" edge to the TemplateSectionVersion entity.
func (m *BkTemplateSectionMutation) ClearVersion() {
	m.clearedversion = true
}

// VersionCleared reports if the "version" edge to the TemplateSectionVersion entity was cleared.
func (m *BkTemplateSectionMutation) VersionCleared() bool {
	return m.VersionIDCleared() || m.clearedversion
}

// VersionIDs returns the "version" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VersionID instead. It exists only for internal usage by the builders.
func (m *BkTemplateSectionMutation) VersionIDs() (ids []uint64) {
	if id := m.version; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVersion resets all changes to the "version" edge.
func (m *BkTemplateSectionMutation) ResetVersion() {
	m.version = nil
	m.clearedversion = false
}

// Where appends a list predicates to the BkTemplateSectionMutation builder.
func (m *BkTemplateSectionMutation) Where(ps ...predicate.BkTemplateSection) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *BkTemplateSectionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (BkTemplateSection).
func (m *BkTemplateSectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BkTemplateSectionMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, bktemplatesection.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, bktemplatesection.FieldUpdatedAt)
	}
	if m.version != nil {
		fields = append(fields, bktemplatesection.FieldVersionID)
	}
	if m.theme_template_id != nil {
		fields = append(fields, bktemplatesection.FieldThemeTemplateID)
	}
	if m.templateSection != nil {
		fields = append(fields, bktemplatesection.FieldTemplateSectionID)
	}
	if m.theme_id != nil {
		fields = append(fields, bktemplatesection.FieldThemeID)
	}
	if m.theme_layout_id != nil {
		fields = append(fields, bktemplatesection.FieldThemeLayoutID)
	}
	if m.data != nil {
		fields = append(fields, bktemplatesection.FieldData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BkTemplateSectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bktemplatesection.FieldCreatedAt:
		return m.CreatedAt()
	case bktemplatesection.FieldUpdatedAt:
		return m.UpdatedAt()
	case bktemplatesection.FieldVersionID:
		return m.VersionID()
	case bktemplatesection.FieldThemeTemplateID:
		return m.ThemeTemplateID()
	case bktemplatesection.FieldTemplateSectionID:
		return m.TemplateSectionID()
	case bktemplatesection.FieldThemeID:
		return m.ThemeID()
	case bktemplatesection.FieldThemeLayoutID:
		return m.ThemeLayoutID()
	case bktemplatesection.FieldData:
		return m.Data()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BkTemplateSectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bktemplatesection.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case bktemplatesection.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case bktemplatesection.FieldVersionID:
		return m.OldVersionID(ctx)
	case bktemplatesection.FieldThemeTemplateID:
		return m.OldThemeTemplateID(ctx)
	case bktemplatesection.FieldTemplateSectionID:
		return m.OldTemplateSectionID(ctx)
	case bktemplatesection.FieldThemeID:
		return m.OldThemeID(ctx)
	case bktemplatesection.FieldThemeLayoutID:
		return m.OldThemeLayoutID(ctx)
	case bktemplatesection.FieldData:
		return m.OldData(ctx)
	}
	return nil, fmt.Errorf("unknown BkTemplateSection field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BkTemplateSectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bktemplatesection.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case bktemplatesection.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case bktemplatesection.FieldVersionID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersionID(v)
		return nil
	case bktemplatesection.FieldThemeTemplateID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThemeTemplateID(v)
		return nil
	case bktemplatesection.FieldTemplateSectionID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTemplateSectionID(v)
		return nil
	case bktemplatesection.FieldThemeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThemeID(v)
		return nil
	case bktemplatesection.FieldThemeLayoutID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThemeLayoutID(v)
		return nil
	case bktemplatesection.FieldData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	}
	return fmt.Errorf("unknown BkTemplateSection field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BkTemplateSectionMutation) AddedFields() []string {
	var fields []string
	if m.addtheme_template_id != nil {
		fields = append(fields, bktemplatesection.FieldThemeTemplateID)
	}
	if m.addtheme_id != nil {
		fields = append(fields, bktemplatesection.FieldThemeID)
	}
	if m.addtheme_layout_id != nil {
		fields = append(fields, bktemplatesection.FieldThemeLayoutID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BkTemplateSectionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bktemplatesection.FieldThemeTemplateID:
		return m.AddedThemeTemplateID()
	case bktemplatesection.FieldThemeID:
		return m.AddedThemeID()
	case bktemplatesection.FieldThemeLayoutID:
		return m.AddedThemeLayoutID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BkTemplateSectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bktemplatesection.FieldThemeTemplateID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddThemeTemplateID(v)
		return nil
	case bktemplatesection.FieldThemeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddThemeID(v)
		return nil
	case bktemplatesection.FieldThemeLayoutID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddThemeLayoutID(v)
		return nil
	}
	return fmt.Errorf("unknown BkTemplateSection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BkTemplateSectionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bktemplatesection.FieldVersionID) {
		fields = append(fields, bktemplatesection.FieldVersionID)
	}
	if m.FieldCleared(bktemplatesection.FieldThemeTemplateID) {
		fields = append(fields, bktemplatesection.FieldThemeTemplateID)
	}
	if m.FieldCleared(bktemplatesection.FieldTemplateSectionID) {
		fields = append(fields, bktemplatesection.FieldTemplateSectionID)
	}
	if m.FieldCleared(bktemplatesection.FieldThemeID) {
		fields = append(fields, bktemplatesection.FieldThemeID)
	}
	if m.FieldCleared(bktemplatesection.FieldThemeLayoutID) {
		fields = append(fields, bktemplatesection.FieldThemeLayoutID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BkTemplateSectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BkTemplateSectionMutation) ClearField(name string) error {
	switch name {
	case bktemplatesection.FieldVersionID:
		m.ClearVersionID()
		return nil
	case bktemplatesection.FieldThemeTemplateID:
		m.ClearThemeTemplateID()
		return nil
	case bktemplatesection.FieldTemplateSectionID:
		m.ClearTemplateSectionID()
		return nil
	case bktemplatesection.FieldThemeID:
		m.ClearThemeID()
		return nil
	case bktemplatesection.FieldThemeLayoutID:
		m.ClearThemeLayoutID()
		return nil
	}
	return fmt.Errorf("unknown BkTemplateSection nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BkTemplateSectionMutation) ResetField(name string) error {
	switch name {
	case bktemplatesection.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case bktemplatesection.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case bktemplatesection.FieldVersionID:
		m.ResetVersionID()
		return nil
	case bktemplatesection.FieldThemeTemplateID:
		m.ResetThemeTemplateID()
		return nil
	case bktemplatesection.FieldTemplateSectionID:
		m.ResetTemplateSectionID()
		return nil
	case bktemplatesection.FieldThemeID:
		m.ResetThemeID()
		return nil
	case bktemplatesection.FieldThemeLayoutID:
		m.ResetThemeLayoutID()
		return nil
	case bktemplatesection.FieldData:
		m.ResetData()
		return nil
	}
	return fmt.Errorf("unknown BkTemplateSection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BkTemplateSectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.templateSection != nil {
		edges = append(edges, bktemplatesection.EdgeTemplateSection)
	}
	if m.version != nil {
		edges = append(edges, bktemplatesection.EdgeVersion)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BkTemplateSectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bktemplatesection.EdgeTemplateSection:
		if id := m.templateSection; id != nil {
			return []ent.Value{*id}
		}
	case bktemplatesection.EdgeVersion:
		if id := m.version; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BkTemplateSectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BkTemplateSectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BkTemplateSectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtemplateSection {
		edges = append(edges, bktemplatesection.EdgeTemplateSection)
	}
	if m.clearedversion {
		edges = append(edges, bktemplatesection.EdgeVersion)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BkTemplateSectionMutation) EdgeCleared(name string) bool {
	switch name {
	case bktemplatesection.EdgeTemplateSection:
		return m.clearedtemplateSection
	case bktemplatesection.EdgeVersion:
		return m.clearedversion
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BkTemplateSectionMutation) ClearEdge(name string) error {
	switch name {
	case bktemplatesection.EdgeTemplateSection:
		m.ClearTemplateSection()
		return nil
	case bktemplatesection.EdgeVersion:
		m.ClearVersion()
		return nil
	}
	return fmt.Errorf("unknown BkTemplateSection unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BkTemplateSectionMutation) ResetEdge(name string) error {
	switch name {
	case bktemplatesection.EdgeTemplateSection:
		m.ResetTemplateSection()
		return nil
	case bktemplatesection.EdgeVersion:
		m.ResetVersion()
		return nil
	}
	return fmt.Errorf("unknown BkTemplateSection edge %s", name)
}

// ComponentPropertyMutation represents an operation that mutates the ComponentProperty nodes in the graph.
type ComponentPropertyMutation struct {
	config
	op               Op
	typ              string
	id               *uint64
	created_at       *time.Time
	updated_at       *time.Time
	name             *string
	value            *string
	clearedFields    map[string]struct{}
	component        *uint64
	clearedcomponent bool
	done             bool
	oldValue         func(context.Context) (*ComponentProperty, error)
	predicates       []predicate.ComponentProperty
}

var _ ent.Mutation = (*ComponentPropertyMutation)(nil)

// componentpropertyOption allows management of the mutation configuration using functional options.
type componentpropertyOption func(*ComponentPropertyMutation)

// newComponentPropertyMutation creates new mutation for the ComponentProperty entity.
func newComponentPropertyMutation(c config, op Op, opts ...componentpropertyOption) *ComponentPropertyMutation {
	m := &ComponentPropertyMutation{
		config:        c,
		op:            op,
		typ:           TypeComponentProperty,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withComponentPropertyID sets the ID field of the mutation.
func withComponentPropertyID(id uint64) componentpropertyOption {
	return func(m *ComponentPropertyMutation) {
		var (
			err   error
			once  sync.Once
			value *ComponentProperty
		)
		m.oldValue = func(ctx context.Context) (*ComponentProperty, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ComponentProperty.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComponentProperty sets the old ComponentProperty of the mutation.
func withComponentProperty(node *ComponentProperty) componentpropertyOption {
	return func(m *ComponentPropertyMutation) {
		m.oldValue = func(context.Context) (*ComponentProperty, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ComponentPropertyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ComponentPropertyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ComponentProperty entities.
func (m *ComponentPropertyMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ComponentPropertyMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *ComponentPropertyMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ComponentPropertyMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ComponentProperty entity.
// If the ComponentProperty object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComponentPropertyMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ComponentPropertyMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ComponentPropertyMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ComponentPropertyMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ComponentProperty entity.
// If the ComponentProperty object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComponentPropertyMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ComponentPropertyMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetComponentID sets the "component_id" field.
func (m *ComponentPropertyMutation) SetComponentID(u uint64) {
	m.component = &u
}

// ComponentID returns the value of the "component_id" field in the mutation.
func (m *ComponentPropertyMutation) ComponentID() (r uint64, exists bool) {
	v := m.component
	if v == nil {
		return
	}
	return *v, true
}

// OldComponentID returns the old "component_id" field's value of the ComponentProperty entity.
// If the ComponentProperty object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComponentPropertyMutation) OldComponentID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldComponentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldComponentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComponentID: %w", err)
	}
	return oldValue.ComponentID, nil
}

// ResetComponentID resets all changes to the "component_id" field.
func (m *ComponentPropertyMutation) ResetComponentID() {
	m.component = nil
}

// SetName sets the "name" field.
func (m *ComponentPropertyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ComponentPropertyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ComponentProperty entity.
// If the ComponentProperty object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComponentPropertyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ComponentPropertyMutation) ResetName() {
	m.name = nil
}

// SetValue sets the "value" field.
func (m *ComponentPropertyMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *ComponentPropertyMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the ComponentProperty entity.
// If the ComponentProperty object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComponentPropertyMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *ComponentPropertyMutation) ResetValue() {
	m.value = nil
}

// ClearComponent clears the "component" edge to the CustomComponent entity.
func (m *ComponentPropertyMutation) ClearComponent() {
	m.clearedcomponent = true
}

// ComponentCleared reports if the "component" edge to the CustomComponent entity was cleared.
func (m *ComponentPropertyMutation) ComponentCleared() bool {
	return m.clearedcomponent
}

// ComponentIDs returns the "component" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ComponentID instead. It exists only for internal usage by the builders.
func (m *ComponentPropertyMutation) ComponentIDs() (ids []uint64) {
	if id := m.component; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetComponent resets all changes to the "component" edge.
func (m *ComponentPropertyMutation) ResetComponent() {
	m.component = nil
	m.clearedcomponent = false
}

// Where appends a list predicates to the ComponentPropertyMutation builder.
func (m *ComponentPropertyMutation) Where(ps ...predicate.ComponentProperty) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ComponentPropertyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ComponentProperty).
func (m *ComponentPropertyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ComponentPropertyMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, componentproperty.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, componentproperty.FieldUpdatedAt)
	}
	if m.component != nil {
		fields = append(fields, componentproperty.FieldComponentID)
	}
	if m.name != nil {
		fields = append(fields, componentproperty.FieldName)
	}
	if m.value != nil {
		fields = append(fields, componentproperty.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ComponentPropertyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case componentproperty.FieldCreatedAt:
		return m.CreatedAt()
	case componentproperty.FieldUpdatedAt:
		return m.UpdatedAt()
	case componentproperty.FieldComponentID:
		return m.ComponentID()
	case componentproperty.FieldName:
		return m.Name()
	case componentproperty.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ComponentPropertyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case componentproperty.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case componentproperty.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case componentproperty.FieldComponentID:
		return m.OldComponentID(ctx)
	case componentproperty.FieldName:
		return m.OldName(ctx)
	case componentproperty.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown ComponentProperty field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComponentPropertyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case componentproperty.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case componentproperty.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case componentproperty.FieldComponentID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComponentID(v)
		return nil
	case componentproperty.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case componentproperty.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown ComponentProperty field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ComponentPropertyMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ComponentPropertyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComponentPropertyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ComponentProperty numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ComponentPropertyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ComponentPropertyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ComponentPropertyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ComponentProperty nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ComponentPropertyMutation) ResetField(name string) error {
	switch name {
	case componentproperty.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case componentproperty.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case componentproperty.FieldComponentID:
		m.ResetComponentID()
		return nil
	case componentproperty.FieldName:
		m.ResetName()
		return nil
	case componentproperty.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown ComponentProperty field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ComponentPropertyMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.component != nil {
		edges = append(edges, componentproperty.EdgeComponent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ComponentPropertyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case componentproperty.EdgeComponent:
		if id := m.component; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ComponentPropertyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ComponentPropertyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ComponentPropertyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcomponent {
		edges = append(edges, componentproperty.EdgeComponent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ComponentPropertyMutation) EdgeCleared(name string) bool {
	switch name {
	case componentproperty.EdgeComponent:
		return m.clearedcomponent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ComponentPropertyMutation) ClearEdge(name string) error {
	switch name {
	case componentproperty.EdgeComponent:
		m.ClearComponent()
		return nil
	}
	return fmt.Errorf("unknown ComponentProperty unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ComponentPropertyMutation) ResetEdge(name string) error {
	switch name {
	case componentproperty.EdgeComponent:
		m.ResetComponent()
		return nil
	}
	return fmt.Errorf("unknown ComponentProperty edge %s", name)
}

// CustomComponentMutation represents an operation that mutates the CustomComponent nodes in the graph.
type CustomComponentMutation struct {
	config
	op              Op
	typ             string
	id              *uint64
	created_at      *time.Time
	updated_at      *time.Time
	shop_id         *uint64
	addshop_id      *uint64
	created_by      *uint64
	addcreated_by   *uint64
	name            *string
	handle          *string
	content         *string
	dist_url        *string
	is_draft        *bool
	entry_file_name *string
	session_id      *uint64
	addsession_id   *uint64
	clearedFields   map[string]struct{}
	props           map[uint64]struct{}
	removedprops    map[uint64]struct{}
	clearedprops    bool
	done            bool
	oldValue        func(context.Context) (*CustomComponent, error)
	predicates      []predicate.CustomComponent
}

var _ ent.Mutation = (*CustomComponentMutation)(nil)

// customcomponentOption allows management of the mutation configuration using functional options.
type customcomponentOption func(*CustomComponentMutation)

// newCustomComponentMutation creates new mutation for the CustomComponent entity.
func newCustomComponentMutation(c config, op Op, opts ...customcomponentOption) *CustomComponentMutation {
	m := &CustomComponentMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomComponent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomComponentID sets the ID field of the mutation.
func withCustomComponentID(id uint64) customcomponentOption {
	return func(m *CustomComponentMutation) {
		var (
			err   error
			once  sync.Once
			value *CustomComponent
		)
		m.oldValue = func(ctx context.Context) (*CustomComponent, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CustomComponent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomComponent sets the old CustomComponent of the mutation.
func withCustomComponent(node *CustomComponent) customcomponentOption {
	return func(m *CustomComponentMutation) {
		m.oldValue = func(context.Context) (*CustomComponent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomComponentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomComponentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CustomComponent entities.
func (m *CustomComponentMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CustomComponentMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *CustomComponentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CustomComponentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CustomComponent entity.
// If the CustomComponent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomComponentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CustomComponentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CustomComponentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CustomComponentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CustomComponent entity.
// If the CustomComponent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomComponentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CustomComponentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetShopID sets the "shop_id" field.
func (m *CustomComponentMutation) SetShopID(u uint64) {
	m.shop_id = &u
	m.addshop_id = nil
}

// ShopID returns the value of the "shop_id" field in the mutation.
func (m *CustomComponentMutation) ShopID() (r uint64, exists bool) {
	v := m.shop_id
	if v == nil {
		return
	}
	return *v, true
}

// OldShopID returns the old "shop_id" field's value of the CustomComponent entity.
// If the CustomComponent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomComponentMutation) OldShopID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShopID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShopID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopID: %w", err)
	}
	return oldValue.ShopID, nil
}

// AddShopID adds u to the "shop_id" field.
func (m *CustomComponentMutation) AddShopID(u uint64) {
	if m.addshop_id != nil {
		*m.addshop_id += u
	} else {
		m.addshop_id = &u
	}
}

// AddedShopID returns the value that was added to the "shop_id" field in this mutation.
func (m *CustomComponentMutation) AddedShopID() (r uint64, exists bool) {
	v := m.addshop_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearShopID clears the value of the "shop_id" field.
func (m *CustomComponentMutation) ClearShopID() {
	m.shop_id = nil
	m.addshop_id = nil
	m.clearedFields[customcomponent.FieldShopID] = struct{}{}
}

// ShopIDCleared returns if the "shop_id" field was cleared in this mutation.
func (m *CustomComponentMutation) ShopIDCleared() bool {
	_, ok := m.clearedFields[customcomponent.FieldShopID]
	return ok
}

// ResetShopID resets all changes to the "shop_id" field.
func (m *CustomComponentMutation) ResetShopID() {
	m.shop_id = nil
	m.addshop_id = nil
	delete(m.clearedFields, customcomponent.FieldShopID)
}

// SetCreatedBy sets the "created_by" field.
func (m *CustomComponentMutation) SetCreatedBy(u uint64) {
	m.created_by = &u
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *CustomComponentMutation) CreatedBy() (r uint64, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the CustomComponent entity.
// If the CustomComponent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomComponentMutation) OldCreatedBy(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds u to the "created_by" field.
func (m *CustomComponentMutation) AddCreatedBy(u uint64) {
	if m.addcreated_by != nil {
		*m.addcreated_by += u
	} else {
		m.addcreated_by = &u
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *CustomComponentMutation) AddedCreatedBy() (r uint64, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *CustomComponentMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
}

// SetName sets the "name" field.
func (m *CustomComponentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CustomComponentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CustomComponent entity.
// If the CustomComponent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomComponentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CustomComponentMutation) ResetName() {
	m.name = nil
}

// SetHandle sets the "handle" field.
func (m *CustomComponentMutation) SetHandle(s string) {
	m.handle = &s
}

// Handle returns the value of the "handle" field in the mutation.
func (m *CustomComponentMutation) Handle() (r string, exists bool) {
	v := m.handle
	if v == nil {
		return
	}
	return *v, true
}

// OldHandle returns the old "handle" field's value of the CustomComponent entity.
// If the CustomComponent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomComponentMutation) OldHandle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHandle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHandle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHandle: %w", err)
	}
	return oldValue.Handle, nil
}

// ResetHandle resets all changes to the "handle" field.
func (m *CustomComponentMutation) ResetHandle() {
	m.handle = nil
}

// SetContent sets the "content" field.
func (m *CustomComponentMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *CustomComponentMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the CustomComponent entity.
// If the CustomComponent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomComponentMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ClearContent clears the value of the "content" field.
func (m *CustomComponentMutation) ClearContent() {
	m.content = nil
	m.clearedFields[customcomponent.FieldContent] = struct{}{}
}

// ContentCleared returns if the "content" field was cleared in this mutation.
func (m *CustomComponentMutation) ContentCleared() bool {
	_, ok := m.clearedFields[customcomponent.FieldContent]
	return ok
}

// ResetContent resets all changes to the "content" field.
func (m *CustomComponentMutation) ResetContent() {
	m.content = nil
	delete(m.clearedFields, customcomponent.FieldContent)
}

// SetDistURL sets the "dist_url" field.
func (m *CustomComponentMutation) SetDistURL(s string) {
	m.dist_url = &s
}

// DistURL returns the value of the "dist_url" field in the mutation.
func (m *CustomComponentMutation) DistURL() (r string, exists bool) {
	v := m.dist_url
	if v == nil {
		return
	}
	return *v, true
}

// OldDistURL returns the old "dist_url" field's value of the CustomComponent entity.
// If the CustomComponent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomComponentMutation) OldDistURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDistURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDistURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDistURL: %w", err)
	}
	return oldValue.DistURL, nil
}

// ClearDistURL clears the value of the "dist_url" field.
func (m *CustomComponentMutation) ClearDistURL() {
	m.dist_url = nil
	m.clearedFields[customcomponent.FieldDistURL] = struct{}{}
}

// DistURLCleared returns if the "dist_url" field was cleared in this mutation.
func (m *CustomComponentMutation) DistURLCleared() bool {
	_, ok := m.clearedFields[customcomponent.FieldDistURL]
	return ok
}

// ResetDistURL resets all changes to the "dist_url" field.
func (m *CustomComponentMutation) ResetDistURL() {
	m.dist_url = nil
	delete(m.clearedFields, customcomponent.FieldDistURL)
}

// SetIsDraft sets the "is_draft" field.
func (m *CustomComponentMutation) SetIsDraft(b bool) {
	m.is_draft = &b
}

// IsDraft returns the value of the "is_draft" field in the mutation.
func (m *CustomComponentMutation) IsDraft() (r bool, exists bool) {
	v := m.is_draft
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDraft returns the old "is_draft" field's value of the CustomComponent entity.
// If the CustomComponent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomComponentMutation) OldIsDraft(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsDraft is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsDraft requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDraft: %w", err)
	}
	return oldValue.IsDraft, nil
}

// ClearIsDraft clears the value of the "is_draft" field.
func (m *CustomComponentMutation) ClearIsDraft() {
	m.is_draft = nil
	m.clearedFields[customcomponent.FieldIsDraft] = struct{}{}
}

// IsDraftCleared returns if the "is_draft" field was cleared in this mutation.
func (m *CustomComponentMutation) IsDraftCleared() bool {
	_, ok := m.clearedFields[customcomponent.FieldIsDraft]
	return ok
}

// ResetIsDraft resets all changes to the "is_draft" field.
func (m *CustomComponentMutation) ResetIsDraft() {
	m.is_draft = nil
	delete(m.clearedFields, customcomponent.FieldIsDraft)
}

// SetEntryFileName sets the "entry_file_name" field.
func (m *CustomComponentMutation) SetEntryFileName(s string) {
	m.entry_file_name = &s
}

// EntryFileName returns the value of the "entry_file_name" field in the mutation.
func (m *CustomComponentMutation) EntryFileName() (r string, exists bool) {
	v := m.entry_file_name
	if v == nil {
		return
	}
	return *v, true
}

// OldEntryFileName returns the old "entry_file_name" field's value of the CustomComponent entity.
// If the CustomComponent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomComponentMutation) OldEntryFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEntryFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEntryFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntryFileName: %w", err)
	}
	return oldValue.EntryFileName, nil
}

// ClearEntryFileName clears the value of the "entry_file_name" field.
func (m *CustomComponentMutation) ClearEntryFileName() {
	m.entry_file_name = nil
	m.clearedFields[customcomponent.FieldEntryFileName] = struct{}{}
}

// EntryFileNameCleared returns if the "entry_file_name" field was cleared in this mutation.
func (m *CustomComponentMutation) EntryFileNameCleared() bool {
	_, ok := m.clearedFields[customcomponent.FieldEntryFileName]
	return ok
}

// ResetEntryFileName resets all changes to the "entry_file_name" field.
func (m *CustomComponentMutation) ResetEntryFileName() {
	m.entry_file_name = nil
	delete(m.clearedFields, customcomponent.FieldEntryFileName)
}

// SetSessionID sets the "session_id" field.
func (m *CustomComponentMutation) SetSessionID(u uint64) {
	m.session_id = &u
	m.addsession_id = nil
}

// SessionID returns the value of the "session_id" field in the mutation.
func (m *CustomComponentMutation) SessionID() (r uint64, exists bool) {
	v := m.session_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionID returns the old "session_id" field's value of the CustomComponent entity.
// If the CustomComponent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomComponentMutation) OldSessionID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSessionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSessionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionID: %w", err)
	}
	return oldValue.SessionID, nil
}

// AddSessionID adds u to the "session_id" field.
func (m *CustomComponentMutation) AddSessionID(u uint64) {
	if m.addsession_id != nil {
		*m.addsession_id += u
	} else {
		m.addsession_id = &u
	}
}

// AddedSessionID returns the value that was added to the "session_id" field in this mutation.
func (m *CustomComponentMutation) AddedSessionID() (r uint64, exists bool) {
	v := m.addsession_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearSessionID clears the value of the "session_id" field.
func (m *CustomComponentMutation) ClearSessionID() {
	m.session_id = nil
	m.addsession_id = nil
	m.clearedFields[customcomponent.FieldSessionID] = struct{}{}
}

// SessionIDCleared returns if the "session_id" field was cleared in this mutation.
func (m *CustomComponentMutation) SessionIDCleared() bool {
	_, ok := m.clearedFields[customcomponent.FieldSessionID]
	return ok
}

// ResetSessionID resets all changes to the "session_id" field.
func (m *CustomComponentMutation) ResetSessionID() {
	m.session_id = nil
	m.addsession_id = nil
	delete(m.clearedFields, customcomponent.FieldSessionID)
}

// AddPropIDs adds the "props" edge to the ComponentProperty entity by ids.
func (m *CustomComponentMutation) AddPropIDs(ids ...uint64) {
	if m.props == nil {
		m.props = make(map[uint64]struct{})
	}
	for i := range ids {
		m.props[ids[i]] = struct{}{}
	}
}

// ClearProps clears the "props" edge to the ComponentProperty entity.
func (m *CustomComponentMutation) ClearProps() {
	m.clearedprops = true
}

// PropsCleared reports if the "props" edge to the ComponentProperty entity was cleared.
func (m *CustomComponentMutation) PropsCleared() bool {
	return m.clearedprops
}

// RemovePropIDs removes the "props" edge to the ComponentProperty entity by IDs.
func (m *CustomComponentMutation) RemovePropIDs(ids ...uint64) {
	if m.removedprops == nil {
		m.removedprops = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.props, ids[i])
		m.removedprops[ids[i]] = struct{}{}
	}
}

// RemovedProps returns the removed IDs of the "props" edge to the ComponentProperty entity.
func (m *CustomComponentMutation) RemovedPropsIDs() (ids []uint64) {
	for id := range m.removedprops {
		ids = append(ids, id)
	}
	return
}

// PropsIDs returns the "props" edge IDs in the mutation.
func (m *CustomComponentMutation) PropsIDs() (ids []uint64) {
	for id := range m.props {
		ids = append(ids, id)
	}
	return
}

// ResetProps resets all changes to the "props" edge.
func (m *CustomComponentMutation) ResetProps() {
	m.props = nil
	m.clearedprops = false
	m.removedprops = nil
}

// Where appends a list predicates to the CustomComponentMutation builder.
func (m *CustomComponentMutation) Where(ps ...predicate.CustomComponent) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CustomComponentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CustomComponent).
func (m *CustomComponentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CustomComponentMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, customcomponent.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, customcomponent.FieldUpdatedAt)
	}
	if m.shop_id != nil {
		fields = append(fields, customcomponent.FieldShopID)
	}
	if m.created_by != nil {
		fields = append(fields, customcomponent.FieldCreatedBy)
	}
	if m.name != nil {
		fields = append(fields, customcomponent.FieldName)
	}
	if m.handle != nil {
		fields = append(fields, customcomponent.FieldHandle)
	}
	if m.content != nil {
		fields = append(fields, customcomponent.FieldContent)
	}
	if m.dist_url != nil {
		fields = append(fields, customcomponent.FieldDistURL)
	}
	if m.is_draft != nil {
		fields = append(fields, customcomponent.FieldIsDraft)
	}
	if m.entry_file_name != nil {
		fields = append(fields, customcomponent.FieldEntryFileName)
	}
	if m.session_id != nil {
		fields = append(fields, customcomponent.FieldSessionID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CustomComponentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customcomponent.FieldCreatedAt:
		return m.CreatedAt()
	case customcomponent.FieldUpdatedAt:
		return m.UpdatedAt()
	case customcomponent.FieldShopID:
		return m.ShopID()
	case customcomponent.FieldCreatedBy:
		return m.CreatedBy()
	case customcomponent.FieldName:
		return m.Name()
	case customcomponent.FieldHandle:
		return m.Handle()
	case customcomponent.FieldContent:
		return m.Content()
	case customcomponent.FieldDistURL:
		return m.DistURL()
	case customcomponent.FieldIsDraft:
		return m.IsDraft()
	case customcomponent.FieldEntryFileName:
		return m.EntryFileName()
	case customcomponent.FieldSessionID:
		return m.SessionID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CustomComponentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customcomponent.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case customcomponent.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case customcomponent.FieldShopID:
		return m.OldShopID(ctx)
	case customcomponent.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case customcomponent.FieldName:
		return m.OldName(ctx)
	case customcomponent.FieldHandle:
		return m.OldHandle(ctx)
	case customcomponent.FieldContent:
		return m.OldContent(ctx)
	case customcomponent.FieldDistURL:
		return m.OldDistURL(ctx)
	case customcomponent.FieldIsDraft:
		return m.OldIsDraft(ctx)
	case customcomponent.FieldEntryFileName:
		return m.OldEntryFileName(ctx)
	case customcomponent.FieldSessionID:
		return m.OldSessionID(ctx)
	}
	return nil, fmt.Errorf("unknown CustomComponent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomComponentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customcomponent.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case customcomponent.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case customcomponent.FieldShopID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopID(v)
		return nil
	case customcomponent.FieldCreatedBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case customcomponent.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case customcomponent.FieldHandle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHandle(v)
		return nil
	case customcomponent.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case customcomponent.FieldDistURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDistURL(v)
		return nil
	case customcomponent.FieldIsDraft:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDraft(v)
		return nil
	case customcomponent.FieldEntryFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntryFileName(v)
		return nil
	case customcomponent.FieldSessionID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionID(v)
		return nil
	}
	return fmt.Errorf("unknown CustomComponent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CustomComponentMutation) AddedFields() []string {
	var fields []string
	if m.addshop_id != nil {
		fields = append(fields, customcomponent.FieldShopID)
	}
	if m.addcreated_by != nil {
		fields = append(fields, customcomponent.FieldCreatedBy)
	}
	if m.addsession_id != nil {
		fields = append(fields, customcomponent.FieldSessionID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CustomComponentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case customcomponent.FieldShopID:
		return m.AddedShopID()
	case customcomponent.FieldCreatedBy:
		return m.AddedCreatedBy()
	case customcomponent.FieldSessionID:
		return m.AddedSessionID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomComponentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case customcomponent.FieldShopID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShopID(v)
		return nil
	case customcomponent.FieldCreatedBy:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case customcomponent.FieldSessionID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSessionID(v)
		return nil
	}
	return fmt.Errorf("unknown CustomComponent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CustomComponentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(customcomponent.FieldShopID) {
		fields = append(fields, customcomponent.FieldShopID)
	}
	if m.FieldCleared(customcomponent.FieldContent) {
		fields = append(fields, customcomponent.FieldContent)
	}
	if m.FieldCleared(customcomponent.FieldDistURL) {
		fields = append(fields, customcomponent.FieldDistURL)
	}
	if m.FieldCleared(customcomponent.FieldIsDraft) {
		fields = append(fields, customcomponent.FieldIsDraft)
	}
	if m.FieldCleared(customcomponent.FieldEntryFileName) {
		fields = append(fields, customcomponent.FieldEntryFileName)
	}
	if m.FieldCleared(customcomponent.FieldSessionID) {
		fields = append(fields, customcomponent.FieldSessionID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CustomComponentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomComponentMutation) ClearField(name string) error {
	switch name {
	case customcomponent.FieldShopID:
		m.ClearShopID()
		return nil
	case customcomponent.FieldContent:
		m.ClearContent()
		return nil
	case customcomponent.FieldDistURL:
		m.ClearDistURL()
		return nil
	case customcomponent.FieldIsDraft:
		m.ClearIsDraft()
		return nil
	case customcomponent.FieldEntryFileName:
		m.ClearEntryFileName()
		return nil
	case customcomponent.FieldSessionID:
		m.ClearSessionID()
		return nil
	}
	return fmt.Errorf("unknown CustomComponent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CustomComponentMutation) ResetField(name string) error {
	switch name {
	case customcomponent.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case customcomponent.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case customcomponent.FieldShopID:
		m.ResetShopID()
		return nil
	case customcomponent.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case customcomponent.FieldName:
		m.ResetName()
		return nil
	case customcomponent.FieldHandle:
		m.ResetHandle()
		return nil
	case customcomponent.FieldContent:
		m.ResetContent()
		return nil
	case customcomponent.FieldDistURL:
		m.ResetDistURL()
		return nil
	case customcomponent.FieldIsDraft:
		m.ResetIsDraft()
		return nil
	case customcomponent.FieldEntryFileName:
		m.ResetEntryFileName()
		return nil
	case customcomponent.FieldSessionID:
		m.ResetSessionID()
		return nil
	}
	return fmt.Errorf("unknown CustomComponent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CustomComponentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.props != nil {
		edges = append(edges, customcomponent.EdgeProps)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CustomComponentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case customcomponent.EdgeProps:
		ids := make([]ent.Value, 0, len(m.props))
		for id := range m.props {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CustomComponentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedprops != nil {
		edges = append(edges, customcomponent.EdgeProps)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CustomComponentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case customcomponent.EdgeProps:
		ids := make([]ent.Value, 0, len(m.removedprops))
		for id := range m.removedprops {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CustomComponentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprops {
		edges = append(edges, customcomponent.EdgeProps)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CustomComponentMutation) EdgeCleared(name string) bool {
	switch name {
	case customcomponent.EdgeProps:
		return m.clearedprops
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CustomComponentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown CustomComponent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CustomComponentMutation) ResetEdge(name string) error {
	switch name {
	case customcomponent.EdgeProps:
		m.ResetProps()
		return nil
	}
	return fmt.Errorf("unknown CustomComponent edge %s", name)
}

// GlobalTemplateMutation represents an operation that mutates the GlobalTemplate nodes in the graph.
type GlobalTemplateMutation struct {
	config
	op               Op
	typ              string
	id               *uint64
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	shop_id          *uint64
	addshop_id       *uint64
	name             *string
	view_count       *int
	addview_count    *int
	install_count    *int
	addinstall_count *int
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*GlobalTemplate, error)
	predicates       []predicate.GlobalTemplate
}

var _ ent.Mutation = (*GlobalTemplateMutation)(nil)

// globaltemplateOption allows management of the mutation configuration using functional options.
type globaltemplateOption func(*GlobalTemplateMutation)

// newGlobalTemplateMutation creates new mutation for the GlobalTemplate entity.
func newGlobalTemplateMutation(c config, op Op, opts ...globaltemplateOption) *GlobalTemplateMutation {
	m := &GlobalTemplateMutation{
		config:        c,
		op:            op,
		typ:           TypeGlobalTemplate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGlobalTemplateID sets the ID field of the mutation.
func withGlobalTemplateID(id uint64) globaltemplateOption {
	return func(m *GlobalTemplateMutation) {
		var (
			err   error
			once  sync.Once
			value *GlobalTemplate
		)
		m.oldValue = func(ctx context.Context) (*GlobalTemplate, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GlobalTemplate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGlobalTemplate sets the old GlobalTemplate of the mutation.
func withGlobalTemplate(node *GlobalTemplate) globaltemplateOption {
	return func(m *GlobalTemplateMutation) {
		m.oldValue = func(context.Context) (*GlobalTemplate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GlobalTemplateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GlobalTemplateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GlobalTemplate entities.
func (m *GlobalTemplateMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GlobalTemplateMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *GlobalTemplateMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GlobalTemplateMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GlobalTemplate entity.
// If the GlobalTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GlobalTemplateMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GlobalTemplateMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GlobalTemplateMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GlobalTemplateMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the GlobalTemplate entity.
// If the GlobalTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GlobalTemplateMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GlobalTemplateMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *GlobalTemplateMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *GlobalTemplateMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the GlobalTemplate entity.
// If the GlobalTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GlobalTemplateMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *GlobalTemplateMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[globaltemplate.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *GlobalTemplateMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[globaltemplate.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *GlobalTemplateMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, globaltemplate.FieldDeletedAt)
}

// SetShopID sets the "shop_id" field.
func (m *GlobalTemplateMutation) SetShopID(u uint64) {
	m.shop_id = &u
	m.addshop_id = nil
}

// ShopID returns the value of the "shop_id" field in the mutation.
func (m *GlobalTemplateMutation) ShopID() (r uint64, exists bool) {
	v := m.shop_id
	if v == nil {
		return
	}
	return *v, true
}

// OldShopID returns the old "shop_id" field's value of the GlobalTemplate entity.
// If the GlobalTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GlobalTemplateMutation) OldShopID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShopID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShopID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopID: %w", err)
	}
	return oldValue.ShopID, nil
}

// AddShopID adds u to the "shop_id" field.
func (m *GlobalTemplateMutation) AddShopID(u uint64) {
	if m.addshop_id != nil {
		*m.addshop_id += u
	} else {
		m.addshop_id = &u
	}
}

// AddedShopID returns the value that was added to the "shop_id" field in this mutation.
func (m *GlobalTemplateMutation) AddedShopID() (r uint64, exists bool) {
	v := m.addshop_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearShopID clears the value of the "shop_id" field.
func (m *GlobalTemplateMutation) ClearShopID() {
	m.shop_id = nil
	m.addshop_id = nil
	m.clearedFields[globaltemplate.FieldShopID] = struct{}{}
}

// ShopIDCleared returns if the "shop_id" field was cleared in this mutation.
func (m *GlobalTemplateMutation) ShopIDCleared() bool {
	_, ok := m.clearedFields[globaltemplate.FieldShopID]
	return ok
}

// ResetShopID resets all changes to the "shop_id" field.
func (m *GlobalTemplateMutation) ResetShopID() {
	m.shop_id = nil
	m.addshop_id = nil
	delete(m.clearedFields, globaltemplate.FieldShopID)
}

// SetName sets the "name" field.
func (m *GlobalTemplateMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GlobalTemplateMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the GlobalTemplate entity.
// If the GlobalTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GlobalTemplateMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GlobalTemplateMutation) ResetName() {
	m.name = nil
}

// SetViewCount sets the "view_count" field.
func (m *GlobalTemplateMutation) SetViewCount(i int) {
	m.view_count = &i
	m.addview_count = nil
}

// ViewCount returns the value of the "view_count" field in the mutation.
func (m *GlobalTemplateMutation) ViewCount() (r int, exists bool) {
	v := m.view_count
	if v == nil {
		return
	}
	return *v, true
}

// OldViewCount returns the old "view_count" field's value of the GlobalTemplate entity.
// If the GlobalTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GlobalTemplateMutation) OldViewCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldViewCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldViewCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldViewCount: %w", err)
	}
	return oldValue.ViewCount, nil
}

// AddViewCount adds i to the "view_count" field.
func (m *GlobalTemplateMutation) AddViewCount(i int) {
	if m.addview_count != nil {
		*m.addview_count += i
	} else {
		m.addview_count = &i
	}
}

// AddedViewCount returns the value that was added to the "view_count" field in this mutation.
func (m *GlobalTemplateMutation) AddedViewCount() (r int, exists bool) {
	v := m.addview_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetViewCount resets all changes to the "view_count" field.
func (m *GlobalTemplateMutation) ResetViewCount() {
	m.view_count = nil
	m.addview_count = nil
}

// SetInstallCount sets the "install_count" field.
func (m *GlobalTemplateMutation) SetInstallCount(i int) {
	m.install_count = &i
	m.addinstall_count = nil
}

// InstallCount returns the value of the "install_count" field in the mutation.
func (m *GlobalTemplateMutation) InstallCount() (r int, exists bool) {
	v := m.install_count
	if v == nil {
		return
	}
	return *v, true
}

// OldInstallCount returns the old "install_count" field's value of the GlobalTemplate entity.
// If the GlobalTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GlobalTemplateMutation) OldInstallCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInstallCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInstallCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstallCount: %w", err)
	}
	return oldValue.InstallCount, nil
}

// AddInstallCount adds i to the "install_count" field.
func (m *GlobalTemplateMutation) AddInstallCount(i int) {
	if m.addinstall_count != nil {
		*m.addinstall_count += i
	} else {
		m.addinstall_count = &i
	}
}

// AddedInstallCount returns the value that was added to the "install_count" field in this mutation.
func (m *GlobalTemplateMutation) AddedInstallCount() (r int, exists bool) {
	v := m.addinstall_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetInstallCount resets all changes to the "install_count" field.
func (m *GlobalTemplateMutation) ResetInstallCount() {
	m.install_count = nil
	m.addinstall_count = nil
}

// Where appends a list predicates to the GlobalTemplateMutation builder.
func (m *GlobalTemplateMutation) Where(ps ...predicate.GlobalTemplate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GlobalTemplateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GlobalTemplate).
func (m *GlobalTemplateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GlobalTemplateMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, globaltemplate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, globaltemplate.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, globaltemplate.FieldDeletedAt)
	}
	if m.shop_id != nil {
		fields = append(fields, globaltemplate.FieldShopID)
	}
	if m.name != nil {
		fields = append(fields, globaltemplate.FieldName)
	}
	if m.view_count != nil {
		fields = append(fields, globaltemplate.FieldViewCount)
	}
	if m.install_count != nil {
		fields = append(fields, globaltemplate.FieldInstallCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GlobalTemplateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case globaltemplate.FieldCreatedAt:
		return m.CreatedAt()
	case globaltemplate.FieldUpdatedAt:
		return m.UpdatedAt()
	case globaltemplate.FieldDeletedAt:
		return m.DeletedAt()
	case globaltemplate.FieldShopID:
		return m.ShopID()
	case globaltemplate.FieldName:
		return m.Name()
	case globaltemplate.FieldViewCount:
		return m.ViewCount()
	case globaltemplate.FieldInstallCount:
		return m.InstallCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GlobalTemplateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case globaltemplate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case globaltemplate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case globaltemplate.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case globaltemplate.FieldShopID:
		return m.OldShopID(ctx)
	case globaltemplate.FieldName:
		return m.OldName(ctx)
	case globaltemplate.FieldViewCount:
		return m.OldViewCount(ctx)
	case globaltemplate.FieldInstallCount:
		return m.OldInstallCount(ctx)
	}
	return nil, fmt.Errorf("unknown GlobalTemplate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GlobalTemplateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case globaltemplate.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case globaltemplate.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case globaltemplate.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case globaltemplate.FieldShopID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopID(v)
		return nil
	case globaltemplate.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case globaltemplate.FieldViewCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetViewCount(v)
		return nil
	case globaltemplate.FieldInstallCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstallCount(v)
		return nil
	}
	return fmt.Errorf("unknown GlobalTemplate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GlobalTemplateMutation) AddedFields() []string {
	var fields []string
	if m.addshop_id != nil {
		fields = append(fields, globaltemplate.FieldShopID)
	}
	if m.addview_count != nil {
		fields = append(fields, globaltemplate.FieldViewCount)
	}
	if m.addinstall_count != nil {
		fields = append(fields, globaltemplate.FieldInstallCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GlobalTemplateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case globaltemplate.FieldShopID:
		return m.AddedShopID()
	case globaltemplate.FieldViewCount:
		return m.AddedViewCount()
	case globaltemplate.FieldInstallCount:
		return m.AddedInstallCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GlobalTemplateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case globaltemplate.FieldShopID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShopID(v)
		return nil
	case globaltemplate.FieldViewCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddViewCount(v)
		return nil
	case globaltemplate.FieldInstallCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInstallCount(v)
		return nil
	}
	return fmt.Errorf("unknown GlobalTemplate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GlobalTemplateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(globaltemplate.FieldDeletedAt) {
		fields = append(fields, globaltemplate.FieldDeletedAt)
	}
	if m.FieldCleared(globaltemplate.FieldShopID) {
		fields = append(fields, globaltemplate.FieldShopID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GlobalTemplateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GlobalTemplateMutation) ClearField(name string) error {
	switch name {
	case globaltemplate.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case globaltemplate.FieldShopID:
		m.ClearShopID()
		return nil
	}
	return fmt.Errorf("unknown GlobalTemplate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GlobalTemplateMutation) ResetField(name string) error {
	switch name {
	case globaltemplate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case globaltemplate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case globaltemplate.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case globaltemplate.FieldShopID:
		m.ResetShopID()
		return nil
	case globaltemplate.FieldName:
		m.ResetName()
		return nil
	case globaltemplate.FieldViewCount:
		m.ResetViewCount()
		return nil
	case globaltemplate.FieldInstallCount:
		m.ResetInstallCount()
		return nil
	}
	return fmt.Errorf("unknown GlobalTemplate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GlobalTemplateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GlobalTemplateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GlobalTemplateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GlobalTemplateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GlobalTemplateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GlobalTemplateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GlobalTemplateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GlobalTemplate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GlobalTemplateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GlobalTemplate edge %s", name)
}

// ShopMutation represents an operation that mutates the Shop nodes in the graph.
type ShopMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uint64
	created_at            *time.Time
	updated_at            *time.Time
	deleted_at            *time.Time
	shop_name             *string
	default_domain        *string
	custom_domain         *string
	clearedFields         map[string]struct{}
	themes                map[uint64]struct{}
	removedthemes         map[uint64]struct{}
	clearedthemes         bool
	themeTemplates        map[uint64]struct{}
	removedthemeTemplates map[uint64]struct{}
	clearedthemeTemplates bool
	done                  bool
	oldValue              func(context.Context) (*Shop, error)
	predicates            []predicate.Shop
}

var _ ent.Mutation = (*ShopMutation)(nil)

// shopOption allows management of the mutation configuration using functional options.
type shopOption func(*ShopMutation)

// newShopMutation creates new mutation for the Shop entity.
func newShopMutation(c config, op Op, opts ...shopOption) *ShopMutation {
	m := &ShopMutation{
		config:        c,
		op:            op,
		typ:           TypeShop,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShopID sets the ID field of the mutation.
func withShopID(id uint64) shopOption {
	return func(m *ShopMutation) {
		var (
			err   error
			once  sync.Once
			value *Shop
		)
		m.oldValue = func(ctx context.Context) (*Shop, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Shop.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShop sets the old Shop of the mutation.
func withShop(node *Shop) shopOption {
	return func(m *ShopMutation) {
		m.oldValue = func(context.Context) (*Shop, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShopMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShopMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Shop entities.
func (m *ShopMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShopMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *ShopMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ShopMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ShopMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ShopMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ShopMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ShopMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ShopMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ShopMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ShopMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[shop.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ShopMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[shop.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ShopMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, shop.FieldDeletedAt)
}

// SetShopName sets the "shop_name" field.
func (m *ShopMutation) SetShopName(s string) {
	m.shop_name = &s
}

// ShopName returns the value of the "shop_name" field in the mutation.
func (m *ShopMutation) ShopName() (r string, exists bool) {
	v := m.shop_name
	if v == nil {
		return
	}
	return *v, true
}

// OldShopName returns the old "shop_name" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldShopName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShopName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShopName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopName: %w", err)
	}
	return oldValue.ShopName, nil
}

// ResetShopName resets all changes to the "shop_name" field.
func (m *ShopMutation) ResetShopName() {
	m.shop_name = nil
}

// SetDefaultDomain sets the "default_domain" field.
func (m *ShopMutation) SetDefaultDomain(s string) {
	m.default_domain = &s
}

// DefaultDomain returns the value of the "default_domain" field in the mutation.
func (m *ShopMutation) DefaultDomain() (r string, exists bool) {
	v := m.default_domain
	if v == nil {
		return
	}
	return *v, true
}

// OldDefaultDomain returns the old "default_domain" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldDefaultDomain(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDefaultDomain is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDefaultDomain requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefaultDomain: %w", err)
	}
	return oldValue.DefaultDomain, nil
}

// ResetDefaultDomain resets all changes to the "default_domain" field.
func (m *ShopMutation) ResetDefaultDomain() {
	m.default_domain = nil
}

// SetCustomDomain sets the "custom_domain" field.
func (m *ShopMutation) SetCustomDomain(s string) {
	m.custom_domain = &s
}

// CustomDomain returns the value of the "custom_domain" field in the mutation.
func (m *ShopMutation) CustomDomain() (r string, exists bool) {
	v := m.custom_domain
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomDomain returns the old "custom_domain" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldCustomDomain(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCustomDomain is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCustomDomain requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomDomain: %w", err)
	}
	return oldValue.CustomDomain, nil
}

// ResetCustomDomain resets all changes to the "custom_domain" field.
func (m *ShopMutation) ResetCustomDomain() {
	m.custom_domain = nil
}

// AddThemeIDs adds the "themes" edge to the Theme entity by ids.
func (m *ShopMutation) AddThemeIDs(ids ...uint64) {
	if m.themes == nil {
		m.themes = make(map[uint64]struct{})
	}
	for i := range ids {
		m.themes[ids[i]] = struct{}{}
	}
}

// ClearThemes clears the "themes" edge to the Theme entity.
func (m *ShopMutation) ClearThemes() {
	m.clearedthemes = true
}

// ThemesCleared reports if the "themes" edge to the Theme entity was cleared.
func (m *ShopMutation) ThemesCleared() bool {
	return m.clearedthemes
}

// RemoveThemeIDs removes the "themes" edge to the Theme entity by IDs.
func (m *ShopMutation) RemoveThemeIDs(ids ...uint64) {
	if m.removedthemes == nil {
		m.removedthemes = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.themes, ids[i])
		m.removedthemes[ids[i]] = struct{}{}
	}
}

// RemovedThemes returns the removed IDs of the "themes" edge to the Theme entity.
func (m *ShopMutation) RemovedThemesIDs() (ids []uint64) {
	for id := range m.removedthemes {
		ids = append(ids, id)
	}
	return
}

// ThemesIDs returns the "themes" edge IDs in the mutation.
func (m *ShopMutation) ThemesIDs() (ids []uint64) {
	for id := range m.themes {
		ids = append(ids, id)
	}
	return
}

// ResetThemes resets all changes to the "themes" edge.
func (m *ShopMutation) ResetThemes() {
	m.themes = nil
	m.clearedthemes = false
	m.removedthemes = nil
}

// AddThemeTemplateIDs adds the "themeTemplates" edge to the ThemeTemplate entity by ids.
func (m *ShopMutation) AddThemeTemplateIDs(ids ...uint64) {
	if m.themeTemplates == nil {
		m.themeTemplates = make(map[uint64]struct{})
	}
	for i := range ids {
		m.themeTemplates[ids[i]] = struct{}{}
	}
}

// ClearThemeTemplates clears the "themeTemplates" edge to the ThemeTemplate entity.
func (m *ShopMutation) ClearThemeTemplates() {
	m.clearedthemeTemplates = true
}

// ThemeTemplatesCleared reports if the "themeTemplates" edge to the ThemeTemplate entity was cleared.
func (m *ShopMutation) ThemeTemplatesCleared() bool {
	return m.clearedthemeTemplates
}

// RemoveThemeTemplateIDs removes the "themeTemplates" edge to the ThemeTemplate entity by IDs.
func (m *ShopMutation) RemoveThemeTemplateIDs(ids ...uint64) {
	if m.removedthemeTemplates == nil {
		m.removedthemeTemplates = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.themeTemplates, ids[i])
		m.removedthemeTemplates[ids[i]] = struct{}{}
	}
}

// RemovedThemeTemplates returns the removed IDs of the "themeTemplates" edge to the ThemeTemplate entity.
func (m *ShopMutation) RemovedThemeTemplatesIDs() (ids []uint64) {
	for id := range m.removedthemeTemplates {
		ids = append(ids, id)
	}
	return
}

// ThemeTemplatesIDs returns the "themeTemplates" edge IDs in the mutation.
func (m *ShopMutation) ThemeTemplatesIDs() (ids []uint64) {
	for id := range m.themeTemplates {
		ids = append(ids, id)
	}
	return
}

// ResetThemeTemplates resets all changes to the "themeTemplates" edge.
func (m *ShopMutation) ResetThemeTemplates() {
	m.themeTemplates = nil
	m.clearedthemeTemplates = false
	m.removedthemeTemplates = nil
}

// Where appends a list predicates to the ShopMutation builder.
func (m *ShopMutation) Where(ps ...predicate.Shop) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ShopMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Shop).
func (m *ShopMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShopMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, shop.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, shop.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, shop.FieldDeletedAt)
	}
	if m.shop_name != nil {
		fields = append(fields, shop.FieldShopName)
	}
	if m.default_domain != nil {
		fields = append(fields, shop.FieldDefaultDomain)
	}
	if m.custom_domain != nil {
		fields = append(fields, shop.FieldCustomDomain)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShopMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shop.FieldCreatedAt:
		return m.CreatedAt()
	case shop.FieldUpdatedAt:
		return m.UpdatedAt()
	case shop.FieldDeletedAt:
		return m.DeletedAt()
	case shop.FieldShopName:
		return m.ShopName()
	case shop.FieldDefaultDomain:
		return m.DefaultDomain()
	case shop.FieldCustomDomain:
		return m.CustomDomain()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShopMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shop.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case shop.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case shop.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case shop.FieldShopName:
		return m.OldShopName(ctx)
	case shop.FieldDefaultDomain:
		return m.OldDefaultDomain(ctx)
	case shop.FieldCustomDomain:
		return m.OldCustomDomain(ctx)
	}
	return nil, fmt.Errorf("unknown Shop field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShopMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shop.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case shop.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case shop.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case shop.FieldShopName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopName(v)
		return nil
	case shop.FieldDefaultDomain:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefaultDomain(v)
		return nil
	case shop.FieldCustomDomain:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomDomain(v)
		return nil
	}
	return fmt.Errorf("unknown Shop field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShopMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShopMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShopMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Shop numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShopMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(shop.FieldDeletedAt) {
		fields = append(fields, shop.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShopMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShopMutation) ClearField(name string) error {
	switch name {
	case shop.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Shop nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShopMutation) ResetField(name string) error {
	switch name {
	case shop.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case shop.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case shop.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case shop.FieldShopName:
		m.ResetShopName()
		return nil
	case shop.FieldDefaultDomain:
		m.ResetDefaultDomain()
		return nil
	case shop.FieldCustomDomain:
		m.ResetCustomDomain()
		return nil
	}
	return fmt.Errorf("unknown Shop field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShopMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.themes != nil {
		edges = append(edges, shop.EdgeThemes)
	}
	if m.themeTemplates != nil {
		edges = append(edges, shop.EdgeThemeTemplates)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShopMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shop.EdgeThemes:
		ids := make([]ent.Value, 0, len(m.themes))
		for id := range m.themes {
			ids = append(ids, id)
		}
		return ids
	case shop.EdgeThemeTemplates:
		ids := make([]ent.Value, 0, len(m.themeTemplates))
		for id := range m.themeTemplates {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShopMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedthemes != nil {
		edges = append(edges, shop.EdgeThemes)
	}
	if m.removedthemeTemplates != nil {
		edges = append(edges, shop.EdgeThemeTemplates)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShopMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case shop.EdgeThemes:
		ids := make([]ent.Value, 0, len(m.removedthemes))
		for id := range m.removedthemes {
			ids = append(ids, id)
		}
		return ids
	case shop.EdgeThemeTemplates:
		ids := make([]ent.Value, 0, len(m.removedthemeTemplates))
		for id := range m.removedthemeTemplates {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShopMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedthemes {
		edges = append(edges, shop.EdgeThemes)
	}
	if m.clearedthemeTemplates {
		edges = append(edges, shop.EdgeThemeTemplates)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShopMutation) EdgeCleared(name string) bool {
	switch name {
	case shop.EdgeThemes:
		return m.clearedthemes
	case shop.EdgeThemeTemplates:
		return m.clearedthemeTemplates
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShopMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Shop unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShopMutation) ResetEdge(name string) error {
	switch name {
	case shop.EdgeThemes:
		m.ResetThemes()
		return nil
	case shop.EdgeThemeTemplates:
		m.ResetThemeTemplates()
		return nil
	}
	return fmt.Errorf("unknown Shop edge %s", name)
}

// TemplateSectionMutation represents an operation that mutates the TemplateSection nodes in the graph.
type TemplateSectionMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uint64
	created_at            *time.Time
	updated_at            *time.Time
	deleted_at            *time.Time
	shop_id               *uint64
	addshop_id            *uint64
	global_section_id     *uint64
	addglobal_section_id  *uint64
	theme_template_id     *uint64
	addtheme_template_id  *uint64
	current_version_id    *uint64
	addcurrent_version_id *uint64
	cid                   *string
	name                  *string
	area                  *templatesection.Area
	component             *string
	position              *int
	addposition           *int
	display               *bool
	clearedFields         map[string]struct{}
	revisions             map[uint64]struct{}
	removedrevisions      map[uint64]struct{}
	clearedrevisions      bool
	done                  bool
	oldValue              func(context.Context) (*TemplateSection, error)
	predicates            []predicate.TemplateSection
}

var _ ent.Mutation = (*TemplateSectionMutation)(nil)

// templatesectionOption allows management of the mutation configuration using functional options.
type templatesectionOption func(*TemplateSectionMutation)

// newTemplateSectionMutation creates new mutation for the TemplateSection entity.
func newTemplateSectionMutation(c config, op Op, opts ...templatesectionOption) *TemplateSectionMutation {
	m := &TemplateSectionMutation{
		config:        c,
		op:            op,
		typ:           TypeTemplateSection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTemplateSectionID sets the ID field of the mutation.
func withTemplateSectionID(id uint64) templatesectionOption {
	return func(m *TemplateSectionMutation) {
		var (
			err   error
			once  sync.Once
			value *TemplateSection
		)
		m.oldValue = func(ctx context.Context) (*TemplateSection, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TemplateSection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTemplateSection sets the old TemplateSection of the mutation.
func withTemplateSection(node *TemplateSection) templatesectionOption {
	return func(m *TemplateSectionMutation) {
		m.oldValue = func(context.Context) (*TemplateSection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TemplateSectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TemplateSectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TemplateSection entities.
func (m *TemplateSectionMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TemplateSectionMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *TemplateSectionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TemplateSectionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TemplateSection entity.
// If the TemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TemplateSectionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TemplateSectionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TemplateSectionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TemplateSection entity.
// If the TemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TemplateSectionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TemplateSectionMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TemplateSectionMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the TemplateSection entity.
// If the TemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *TemplateSectionMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[templatesection.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *TemplateSectionMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[templatesection.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TemplateSectionMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, templatesection.FieldDeletedAt)
}

// SetShopID sets the "shop_id" field.
func (m *TemplateSectionMutation) SetShopID(u uint64) {
	m.shop_id = &u
	m.addshop_id = nil
}

// ShopID returns the value of the "shop_id" field in the mutation.
func (m *TemplateSectionMutation) ShopID() (r uint64, exists bool) {
	v := m.shop_id
	if v == nil {
		return
	}
	return *v, true
}

// OldShopID returns the old "shop_id" field's value of the TemplateSection entity.
// If the TemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionMutation) OldShopID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShopID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShopID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopID: %w", err)
	}
	return oldValue.ShopID, nil
}

// AddShopID adds u to the "shop_id" field.
func (m *TemplateSectionMutation) AddShopID(u uint64) {
	if m.addshop_id != nil {
		*m.addshop_id += u
	} else {
		m.addshop_id = &u
	}
}

// AddedShopID returns the value that was added to the "shop_id" field in this mutation.
func (m *TemplateSectionMutation) AddedShopID() (r uint64, exists bool) {
	v := m.addshop_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearShopID clears the value of the "shop_id" field.
func (m *TemplateSectionMutation) ClearShopID() {
	m.shop_id = nil
	m.addshop_id = nil
	m.clearedFields[templatesection.FieldShopID] = struct{}{}
}

// ShopIDCleared returns if the "shop_id" field was cleared in this mutation.
func (m *TemplateSectionMutation) ShopIDCleared() bool {
	_, ok := m.clearedFields[templatesection.FieldShopID]
	return ok
}

// ResetShopID resets all changes to the "shop_id" field.
func (m *TemplateSectionMutation) ResetShopID() {
	m.shop_id = nil
	m.addshop_id = nil
	delete(m.clearedFields, templatesection.FieldShopID)
}

// SetGlobalSectionID sets the "global_section_id" field.
func (m *TemplateSectionMutation) SetGlobalSectionID(u uint64) {
	m.global_section_id = &u
	m.addglobal_section_id = nil
}

// GlobalSectionID returns the value of the "global_section_id" field in the mutation.
func (m *TemplateSectionMutation) GlobalSectionID() (r uint64, exists bool) {
	v := m.global_section_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGlobalSectionID returns the old "global_section_id" field's value of the TemplateSection entity.
// If the TemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionMutation) OldGlobalSectionID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGlobalSectionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGlobalSectionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGlobalSectionID: %w", err)
	}
	return oldValue.GlobalSectionID, nil
}

// AddGlobalSectionID adds u to the "global_section_id" field.
func (m *TemplateSectionMutation) AddGlobalSectionID(u uint64) {
	if m.addglobal_section_id != nil {
		*m.addglobal_section_id += u
	} else {
		m.addglobal_section_id = &u
	}
}

// AddedGlobalSectionID returns the value that was added to the "global_section_id" field in this mutation.
func (m *TemplateSectionMutation) AddedGlobalSectionID() (r uint64, exists bool) {
	v := m.addglobal_section_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearGlobalSectionID clears the value of the "global_section_id" field.
func (m *TemplateSectionMutation) ClearGlobalSectionID() {
	m.global_section_id = nil
	m.addglobal_section_id = nil
	m.clearedFields[templatesection.FieldGlobalSectionID] = struct{}{}
}

// GlobalSectionIDCleared returns if the "global_section_id" field was cleared in this mutation.
func (m *TemplateSectionMutation) GlobalSectionIDCleared() bool {
	_, ok := m.clearedFields[templatesection.FieldGlobalSectionID]
	return ok
}

// ResetGlobalSectionID resets all changes to the "global_section_id" field.
func (m *TemplateSectionMutation) ResetGlobalSectionID() {
	m.global_section_id = nil
	m.addglobal_section_id = nil
	delete(m.clearedFields, templatesection.FieldGlobalSectionID)
}

// SetThemeTemplateID sets the "theme_template_id" field.
func (m *TemplateSectionMutation) SetThemeTemplateID(u uint64) {
	m.theme_template_id = &u
	m.addtheme_template_id = nil
}

// ThemeTemplateID returns the value of the "theme_template_id" field in the mutation.
func (m *TemplateSectionMutation) ThemeTemplateID() (r uint64, exists bool) {
	v := m.theme_template_id
	if v == nil {
		return
	}
	return *v, true
}

// OldThemeTemplateID returns the old "theme_template_id" field's value of the TemplateSection entity.
// If the TemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionMutation) OldThemeTemplateID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldThemeTemplateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldThemeTemplateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThemeTemplateID: %w", err)
	}
	return oldValue.ThemeTemplateID, nil
}

// AddThemeTemplateID adds u to the "theme_template_id" field.
func (m *TemplateSectionMutation) AddThemeTemplateID(u uint64) {
	if m.addtheme_template_id != nil {
		*m.addtheme_template_id += u
	} else {
		m.addtheme_template_id = &u
	}
}

// AddedThemeTemplateID returns the value that was added to the "theme_template_id" field in this mutation.
func (m *TemplateSectionMutation) AddedThemeTemplateID() (r uint64, exists bool) {
	v := m.addtheme_template_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearThemeTemplateID clears the value of the "theme_template_id" field.
func (m *TemplateSectionMutation) ClearThemeTemplateID() {
	m.theme_template_id = nil
	m.addtheme_template_id = nil
	m.clearedFields[templatesection.FieldThemeTemplateID] = struct{}{}
}

// ThemeTemplateIDCleared returns if the "theme_template_id" field was cleared in this mutation.
func (m *TemplateSectionMutation) ThemeTemplateIDCleared() bool {
	_, ok := m.clearedFields[templatesection.FieldThemeTemplateID]
	return ok
}

// ResetThemeTemplateID resets all changes to the "theme_template_id" field.
func (m *TemplateSectionMutation) ResetThemeTemplateID() {
	m.theme_template_id = nil
	m.addtheme_template_id = nil
	delete(m.clearedFields, templatesection.FieldThemeTemplateID)
}

// SetCurrentVersionID sets the "current_version_id" field.
func (m *TemplateSectionMutation) SetCurrentVersionID(u uint64) {
	m.current_version_id = &u
	m.addcurrent_version_id = nil
}

// CurrentVersionID returns the value of the "current_version_id" field in the mutation.
func (m *TemplateSectionMutation) CurrentVersionID() (r uint64, exists bool) {
	v := m.current_version_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentVersionID returns the old "current_version_id" field's value of the TemplateSection entity.
// If the TemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionMutation) OldCurrentVersionID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCurrentVersionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCurrentVersionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentVersionID: %w", err)
	}
	return oldValue.CurrentVersionID, nil
}

// AddCurrentVersionID adds u to the "current_version_id" field.
func (m *TemplateSectionMutation) AddCurrentVersionID(u uint64) {
	if m.addcurrent_version_id != nil {
		*m.addcurrent_version_id += u
	} else {
		m.addcurrent_version_id = &u
	}
}

// AddedCurrentVersionID returns the value that was added to the "current_version_id" field in this mutation.
func (m *TemplateSectionMutation) AddedCurrentVersionID() (r uint64, exists bool) {
	v := m.addcurrent_version_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCurrentVersionID clears the value of the "current_version_id" field.
func (m *TemplateSectionMutation) ClearCurrentVersionID() {
	m.current_version_id = nil
	m.addcurrent_version_id = nil
	m.clearedFields[templatesection.FieldCurrentVersionID] = struct{}{}
}

// CurrentVersionIDCleared returns if the "current_version_id" field was cleared in this mutation.
func (m *TemplateSectionMutation) CurrentVersionIDCleared() bool {
	_, ok := m.clearedFields[templatesection.FieldCurrentVersionID]
	return ok
}

// ResetCurrentVersionID resets all changes to the "current_version_id" field.
func (m *TemplateSectionMutation) ResetCurrentVersionID() {
	m.current_version_id = nil
	m.addcurrent_version_id = nil
	delete(m.clearedFields, templatesection.FieldCurrentVersionID)
}

// SetCid sets the "cid" field.
func (m *TemplateSectionMutation) SetCid(s string) {
	m.cid = &s
}

// Cid returns the value of the "cid" field in the mutation.
func (m *TemplateSectionMutation) Cid() (r string, exists bool) {
	v := m.cid
	if v == nil {
		return
	}
	return *v, true
}

// OldCid returns the old "cid" field's value of the TemplateSection entity.
// If the TemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionMutation) OldCid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCid: %w", err)
	}
	return oldValue.Cid, nil
}

// ResetCid resets all changes to the "cid" field.
func (m *TemplateSectionMutation) ResetCid() {
	m.cid = nil
}

// SetName sets the "name" field.
func (m *TemplateSectionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TemplateSectionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TemplateSection entity.
// If the TemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TemplateSectionMutation) ResetName() {
	m.name = nil
}

// SetArea sets the "area" field.
func (m *TemplateSectionMutation) SetArea(t templatesection.Area) {
	m.area = &t
}

// Area returns the value of the "area" field in the mutation.
func (m *TemplateSectionMutation) Area() (r templatesection.Area, exists bool) {
	v := m.area
	if v == nil {
		return
	}
	return *v, true
}

// OldArea returns the old "area" field's value of the TemplateSection entity.
// If the TemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionMutation) OldArea(ctx context.Context) (v templatesection.Area, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldArea is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldArea requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArea: %w", err)
	}
	return oldValue.Area, nil
}

// ResetArea resets all changes to the "area" field.
func (m *TemplateSectionMutation) ResetArea() {
	m.area = nil
}

// SetComponent sets the "component" field.
func (m *TemplateSectionMutation) SetComponent(s string) {
	m.component = &s
}

// Component returns the value of the "component" field in the mutation.
func (m *TemplateSectionMutation) Component() (r string, exists bool) {
	v := m.component
	if v == nil {
		return
	}
	return *v, true
}

// OldComponent returns the old "component" field's value of the TemplateSection entity.
// If the TemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionMutation) OldComponent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldComponent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldComponent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComponent: %w", err)
	}
	return oldValue.Component, nil
}

// ResetComponent resets all changes to the "component" field.
func (m *TemplateSectionMutation) ResetComponent() {
	m.component = nil
}

// SetPosition sets the "position" field.
func (m *TemplateSectionMutation) SetPosition(i int) {
	m.position = &i
	m.addposition = nil
}

// Position returns the value of the "position" field in the mutation.
func (m *TemplateSectionMutation) Position() (r int, exists bool) {
	v := m.position
	if v == nil {
		return
	}
	return *v, true
}

// OldPosition returns the old "position" field's value of the TemplateSection entity.
// If the TemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionMutation) OldPosition(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPosition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPosition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosition: %w", err)
	}
	return oldValue.Position, nil
}

// AddPosition adds i to the "position" field.
func (m *TemplateSectionMutation) AddPosition(i int) {
	if m.addposition != nil {
		*m.addposition += i
	} else {
		m.addposition = &i
	}
}

// AddedPosition returns the value that was added to the "position" field in this mutation.
func (m *TemplateSectionMutation) AddedPosition() (r int, exists bool) {
	v := m.addposition
	if v == nil {
		return
	}
	return *v, true
}

// ResetPosition resets all changes to the "position" field.
func (m *TemplateSectionMutation) ResetPosition() {
	m.position = nil
	m.addposition = nil
}

// SetDisplay sets the "display" field.
func (m *TemplateSectionMutation) SetDisplay(b bool) {
	m.display = &b
}

// Display returns the value of the "display" field in the mutation.
func (m *TemplateSectionMutation) Display() (r bool, exists bool) {
	v := m.display
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplay returns the old "display" field's value of the TemplateSection entity.
// If the TemplateSection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionMutation) OldDisplay(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDisplay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDisplay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplay: %w", err)
	}
	return oldValue.Display, nil
}

// ResetDisplay resets all changes to the "display" field.
func (m *TemplateSectionMutation) ResetDisplay() {
	m.display = nil
}

// AddRevisionIDs adds the "revisions" edge to the BkTemplateSection entity by ids.
func (m *TemplateSectionMutation) AddRevisionIDs(ids ...uint64) {
	if m.revisions == nil {
		m.revisions = make(map[uint64]struct{})
	}
	for i := range ids {
		m.revisions[ids[i]] = struct{}{}
	}
}

// ClearRevisions clears the "revisions" edge to the BkTemplateSection entity.
func (m *TemplateSectionMutation) ClearRevisions() {
	m.clearedrevisions = true
}

// RevisionsCleared reports if the "revisions" edge to the BkTemplateSection entity was cleared.
func (m *TemplateSectionMutation) RevisionsCleared() bool {
	return m.clearedrevisions
}

// RemoveRevisionIDs removes the "revisions" edge to the BkTemplateSection entity by IDs.
func (m *TemplateSectionMutation) RemoveRevisionIDs(ids ...uint64) {
	if m.removedrevisions == nil {
		m.removedrevisions = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.revisions, ids[i])
		m.removedrevisions[ids[i]] = struct{}{}
	}
}

// RemovedRevisions returns the removed IDs of the "revisions" edge to the BkTemplateSection entity.
func (m *TemplateSectionMutation) RemovedRevisionsIDs() (ids []uint64) {
	for id := range m.removedrevisions {
		ids = append(ids, id)
	}
	return
}

// RevisionsIDs returns the "revisions" edge IDs in the mutation.
func (m *TemplateSectionMutation) RevisionsIDs() (ids []uint64) {
	for id := range m.revisions {
		ids = append(ids, id)
	}
	return
}

// ResetRevisions resets all changes to the "revisions" edge.
func (m *TemplateSectionMutation) ResetRevisions() {
	m.revisions = nil
	m.clearedrevisions = false
	m.removedrevisions = nil
}

// Where appends a list predicates to the TemplateSectionMutation builder.
func (m *TemplateSectionMutation) Where(ps ...predicate.TemplateSection) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TemplateSectionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TemplateSection).
func (m *TemplateSectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TemplateSectionMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, templatesection.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, templatesection.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, templatesection.FieldDeletedAt)
	}
	if m.shop_id != nil {
		fields = append(fields, templatesection.FieldShopID)
	}
	if m.global_section_id != nil {
		fields = append(fields, templatesection.FieldGlobalSectionID)
	}
	if m.theme_template_id != nil {
		fields = append(fields, templatesection.FieldThemeTemplateID)
	}
	if m.current_version_id != nil {
		fields = append(fields, templatesection.FieldCurrentVersionID)
	}
	if m.cid != nil {
		fields = append(fields, templatesection.FieldCid)
	}
	if m.name != nil {
		fields = append(fields, templatesection.FieldName)
	}
	if m.area != nil {
		fields = append(fields, templatesection.FieldArea)
	}
	if m.component != nil {
		fields = append(fields, templatesection.FieldComponent)
	}
	if m.position != nil {
		fields = append(fields, templatesection.FieldPosition)
	}
	if m.display != nil {
		fields = append(fields, templatesection.FieldDisplay)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TemplateSectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case templatesection.FieldCreatedAt:
		return m.CreatedAt()
	case templatesection.FieldUpdatedAt:
		return m.UpdatedAt()
	case templatesection.FieldDeletedAt:
		return m.DeletedAt()
	case templatesection.FieldShopID:
		return m.ShopID()
	case templatesection.FieldGlobalSectionID:
		return m.GlobalSectionID()
	case templatesection.FieldThemeTemplateID:
		return m.ThemeTemplateID()
	case templatesection.FieldCurrentVersionID:
		return m.CurrentVersionID()
	case templatesection.FieldCid:
		return m.Cid()
	case templatesection.FieldName:
		return m.Name()
	case templatesection.FieldArea:
		return m.Area()
	case templatesection.FieldComponent:
		return m.Component()
	case templatesection.FieldPosition:
		return m.Position()
	case templatesection.FieldDisplay:
		return m.Display()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TemplateSectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case templatesection.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case templatesection.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case templatesection.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case templatesection.FieldShopID:
		return m.OldShopID(ctx)
	case templatesection.FieldGlobalSectionID:
		return m.OldGlobalSectionID(ctx)
	case templatesection.FieldThemeTemplateID:
		return m.OldThemeTemplateID(ctx)
	case templatesection.FieldCurrentVersionID:
		return m.OldCurrentVersionID(ctx)
	case templatesection.FieldCid:
		return m.OldCid(ctx)
	case templatesection.FieldName:
		return m.OldName(ctx)
	case templatesection.FieldArea:
		return m.OldArea(ctx)
	case templatesection.FieldComponent:
		return m.OldComponent(ctx)
	case templatesection.FieldPosition:
		return m.OldPosition(ctx)
	case templatesection.FieldDisplay:
		return m.OldDisplay(ctx)
	}
	return nil, fmt.Errorf("unknown TemplateSection field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TemplateSectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case templatesection.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case templatesection.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case templatesection.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case templatesection.FieldShopID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopID(v)
		return nil
	case templatesection.FieldGlobalSectionID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGlobalSectionID(v)
		return nil
	case templatesection.FieldThemeTemplateID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThemeTemplateID(v)
		return nil
	case templatesection.FieldCurrentVersionID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentVersionID(v)
		return nil
	case templatesection.FieldCid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCid(v)
		return nil
	case templatesection.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case templatesection.FieldArea:
		v, ok := value.(templatesection.Area)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArea(v)
		return nil
	case templatesection.FieldComponent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComponent(v)
		return nil
	case templatesection.FieldPosition:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosition(v)
		return nil
	case templatesection.FieldDisplay:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplay(v)
		return nil
	}
	return fmt.Errorf("unknown TemplateSection field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TemplateSectionMutation) AddedFields() []string {
	var fields []string
	if m.addshop_id != nil {
		fields = append(fields, templatesection.FieldShopID)
	}
	if m.addglobal_section_id != nil {
		fields = append(fields, templatesection.FieldGlobalSectionID)
	}
	if m.addtheme_template_id != nil {
		fields = append(fields, templatesection.FieldThemeTemplateID)
	}
	if m.addcurrent_version_id != nil {
		fields = append(fields, templatesection.FieldCurrentVersionID)
	}
	if m.addposition != nil {
		fields = append(fields, templatesection.FieldPosition)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TemplateSectionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case templatesection.FieldShopID:
		return m.AddedShopID()
	case templatesection.FieldGlobalSectionID:
		return m.AddedGlobalSectionID()
	case templatesection.FieldThemeTemplateID:
		return m.AddedThemeTemplateID()
	case templatesection.FieldCurrentVersionID:
		return m.AddedCurrentVersionID()
	case templatesection.FieldPosition:
		return m.AddedPosition()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TemplateSectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case templatesection.FieldShopID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShopID(v)
		return nil
	case templatesection.FieldGlobalSectionID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGlobalSectionID(v)
		return nil
	case templatesection.FieldThemeTemplateID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddThemeTemplateID(v)
		return nil
	case templatesection.FieldCurrentVersionID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrentVersionID(v)
		return nil
	case templatesection.FieldPosition:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPosition(v)
		return nil
	}
	return fmt.Errorf("unknown TemplateSection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TemplateSectionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(templatesection.FieldDeletedAt) {
		fields = append(fields, templatesection.FieldDeletedAt)
	}
	if m.FieldCleared(templatesection.FieldShopID) {
		fields = append(fields, templatesection.FieldShopID)
	}
	if m.FieldCleared(templatesection.FieldGlobalSectionID) {
		fields = append(fields, templatesection.FieldGlobalSectionID)
	}
	if m.FieldCleared(templatesection.FieldThemeTemplateID) {
		fields = append(fields, templatesection.FieldThemeTemplateID)
	}
	if m.FieldCleared(templatesection.FieldCurrentVersionID) {
		fields = append(fields, templatesection.FieldCurrentVersionID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TemplateSectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TemplateSectionMutation) ClearField(name string) error {
	switch name {
	case templatesection.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case templatesection.FieldShopID:
		m.ClearShopID()
		return nil
	case templatesection.FieldGlobalSectionID:
		m.ClearGlobalSectionID()
		return nil
	case templatesection.FieldThemeTemplateID:
		m.ClearThemeTemplateID()
		return nil
	case templatesection.FieldCurrentVersionID:
		m.ClearCurrentVersionID()
		return nil
	}
	return fmt.Errorf("unknown TemplateSection nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TemplateSectionMutation) ResetField(name string) error {
	switch name {
	case templatesection.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case templatesection.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case templatesection.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case templatesection.FieldShopID:
		m.ResetShopID()
		return nil
	case templatesection.FieldGlobalSectionID:
		m.ResetGlobalSectionID()
		return nil
	case templatesection.FieldThemeTemplateID:
		m.ResetThemeTemplateID()
		return nil
	case templatesection.FieldCurrentVersionID:
		m.ResetCurrentVersionID()
		return nil
	case templatesection.FieldCid:
		m.ResetCid()
		return nil
	case templatesection.FieldName:
		m.ResetName()
		return nil
	case templatesection.FieldArea:
		m.ResetArea()
		return nil
	case templatesection.FieldComponent:
		m.ResetComponent()
		return nil
	case templatesection.FieldPosition:
		m.ResetPosition()
		return nil
	case templatesection.FieldDisplay:
		m.ResetDisplay()
		return nil
	}
	return fmt.Errorf("unknown TemplateSection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TemplateSectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.revisions != nil {
		edges = append(edges, templatesection.EdgeRevisions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TemplateSectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case templatesection.EdgeRevisions:
		ids := make([]ent.Value, 0, len(m.revisions))
		for id := range m.revisions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TemplateSectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrevisions != nil {
		edges = append(edges, templatesection.EdgeRevisions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TemplateSectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case templatesection.EdgeRevisions:
		ids := make([]ent.Value, 0, len(m.removedrevisions))
		for id := range m.removedrevisions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TemplateSectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrevisions {
		edges = append(edges, templatesection.EdgeRevisions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TemplateSectionMutation) EdgeCleared(name string) bool {
	switch name {
	case templatesection.EdgeRevisions:
		return m.clearedrevisions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TemplateSectionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown TemplateSection unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TemplateSectionMutation) ResetEdge(name string) error {
	switch name {
	case templatesection.EdgeRevisions:
		m.ResetRevisions()
		return nil
	}
	return fmt.Errorf("unknown TemplateSection edge %s", name)
}

// TemplateSectionVersionMutation represents an operation that mutates the TemplateSectionVersion nodes in the graph.
type TemplateSectionVersionMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uint64
	created_at                *time.Time
	updated_at                *time.Time
	theme_template_id         *uint64
	addtheme_template_id      *uint64
	version                   *string
	name                      *string
	clearedFields             map[string]struct{}
	bkTemplateSections        map[uint64]struct{}
	removedbkTemplateSections map[uint64]struct{}
	clearedbkTemplateSections bool
	done                      bool
	oldValue                  func(context.Context) (*TemplateSectionVersion, error)
	predicates                []predicate.TemplateSectionVersion
}

var _ ent.Mutation = (*TemplateSectionVersionMutation)(nil)

// templatesectionversionOption allows management of the mutation configuration using functional options.
type templatesectionversionOption func(*TemplateSectionVersionMutation)

// newTemplateSectionVersionMutation creates new mutation for the TemplateSectionVersion entity.
func newTemplateSectionVersionMutation(c config, op Op, opts ...templatesectionversionOption) *TemplateSectionVersionMutation {
	m := &TemplateSectionVersionMutation{
		config:        c,
		op:            op,
		typ:           TypeTemplateSectionVersion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTemplateSectionVersionID sets the ID field of the mutation.
func withTemplateSectionVersionID(id uint64) templatesectionversionOption {
	return func(m *TemplateSectionVersionMutation) {
		var (
			err   error
			once  sync.Once
			value *TemplateSectionVersion
		)
		m.oldValue = func(ctx context.Context) (*TemplateSectionVersion, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TemplateSectionVersion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTemplateSectionVersion sets the old TemplateSectionVersion of the mutation.
func withTemplateSectionVersion(node *TemplateSectionVersion) templatesectionversionOption {
	return func(m *TemplateSectionVersionMutation) {
		m.oldValue = func(context.Context) (*TemplateSectionVersion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TemplateSectionVersionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TemplateSectionVersionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TemplateSectionVersion entities.
func (m *TemplateSectionVersionMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TemplateSectionVersionMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *TemplateSectionVersionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TemplateSectionVersionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TemplateSectionVersion entity.
// If the TemplateSectionVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionVersionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TemplateSectionVersionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TemplateSectionVersionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TemplateSectionVersionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TemplateSectionVersion entity.
// If the TemplateSectionVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionVersionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TemplateSectionVersionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetThemeTemplateID sets the "theme_template_id" field.
func (m *TemplateSectionVersionMutation) SetThemeTemplateID(u uint64) {
	m.theme_template_id = &u
	m.addtheme_template_id = nil
}

// ThemeTemplateID returns the value of the "theme_template_id" field in the mutation.
func (m *TemplateSectionVersionMutation) ThemeTemplateID() (r uint64, exists bool) {
	v := m.theme_template_id
	if v == nil {
		return
	}
	return *v, true
}

// OldThemeTemplateID returns the old "theme_template_id" field's value of the TemplateSectionVersion entity.
// If the TemplateSectionVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionVersionMutation) OldThemeTemplateID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldThemeTemplateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldThemeTemplateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThemeTemplateID: %w", err)
	}
	return oldValue.ThemeTemplateID, nil
}

// AddThemeTemplateID adds u to the "theme_template_id" field.
func (m *TemplateSectionVersionMutation) AddThemeTemplateID(u uint64) {
	if m.addtheme_template_id != nil {
		*m.addtheme_template_id += u
	} else {
		m.addtheme_template_id = &u
	}
}

// AddedThemeTemplateID returns the value that was added to the "theme_template_id" field in this mutation.
func (m *TemplateSectionVersionMutation) AddedThemeTemplateID() (r uint64, exists bool) {
	v := m.addtheme_template_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearThemeTemplateID clears the value of the "theme_template_id" field.
func (m *TemplateSectionVersionMutation) ClearThemeTemplateID() {
	m.theme_template_id = nil
	m.addtheme_template_id = nil
	m.clearedFields[templatesectionversion.FieldThemeTemplateID] = struct{}{}
}

// ThemeTemplateIDCleared returns if the "theme_template_id" field was cleared in this mutation.
func (m *TemplateSectionVersionMutation) ThemeTemplateIDCleared() bool {
	_, ok := m.clearedFields[templatesectionversion.FieldThemeTemplateID]
	return ok
}

// ResetThemeTemplateID resets all changes to the "theme_template_id" field.
func (m *TemplateSectionVersionMutation) ResetThemeTemplateID() {
	m.theme_template_id = nil
	m.addtheme_template_id = nil
	delete(m.clearedFields, templatesectionversion.FieldThemeTemplateID)
}

// SetVersion sets the "version" field.
func (m *TemplateSectionVersionMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *TemplateSectionVersionMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the TemplateSectionVersion entity.
// If the TemplateSectionVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionVersionMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *TemplateSectionVersionMutation) ResetVersion() {
	m.version = nil
}

// SetName sets the "name" field.
func (m *TemplateSectionVersionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TemplateSectionVersionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TemplateSectionVersion entity.
// If the TemplateSectionVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TemplateSectionVersionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TemplateSectionVersionMutation) ResetName() {
	m.name = nil
}

// AddBkTemplateSectionIDs adds the "bkTemplateSections" edge to the BkTemplateSection entity by ids.
func (m *TemplateSectionVersionMutation) AddBkTemplateSectionIDs(ids ...uint64) {
	if m.bkTemplateSections == nil {
		m.bkTemplateSections = make(map[uint64]struct{})
	}
	for i := range ids {
		m.bkTemplateSections[ids[i]] = struct{}{}
	}
}

// ClearBkTemplateSections clears the "bkTemplateSections" edge to the BkTemplateSection entity.
func (m *TemplateSectionVersionMutation) ClearBkTemplateSections() {
	m.clearedbkTemplateSections = true
}

// BkTemplateSectionsCleared reports if the "bkTemplateSections" edge to the BkTemplateSection entity was cleared.
func (m *TemplateSectionVersionMutation) BkTemplateSectionsCleared() bool {
	return m.clearedbkTemplateSections
}

// RemoveBkTemplateSectionIDs removes the "bkTemplateSections" edge to the BkTemplateSection entity by IDs.
func (m *TemplateSectionVersionMutation) RemoveBkTemplateSectionIDs(ids ...uint64) {
	if m.removedbkTemplateSections == nil {
		m.removedbkTemplateSections = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.bkTemplateSections, ids[i])
		m.removedbkTemplateSections[ids[i]] = struct{}{}
	}
}

// RemovedBkTemplateSections returns the removed IDs of the "bkTemplateSections" edge to the BkTemplateSection entity.
func (m *TemplateSectionVersionMutation) RemovedBkTemplateSectionsIDs() (ids []uint64) {
	for id := range m.removedbkTemplateSections {
		ids = append(ids, id)
	}
	return
}

// BkTemplateSectionsIDs returns the "bkTemplateSections" edge IDs in the mutation.
func (m *TemplateSectionVersionMutation) BkTemplateSectionsIDs() (ids []uint64) {
	for id := range m.bkTemplateSections {
		ids = append(ids, id)
	}
	return
}

// ResetBkTemplateSections resets all changes to the "bkTemplateSections" edge.
func (m *TemplateSectionVersionMutation) ResetBkTemplateSections() {
	m.bkTemplateSections = nil
	m.clearedbkTemplateSections = false
	m.removedbkTemplateSections = nil
}

// Where appends a list predicates to the TemplateSectionVersionMutation builder.
func (m *TemplateSectionVersionMutation) Where(ps ...predicate.TemplateSectionVersion) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TemplateSectionVersionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TemplateSectionVersion).
func (m *TemplateSectionVersionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TemplateSectionVersionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, templatesectionversion.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, templatesectionversion.FieldUpdatedAt)
	}
	if m.theme_template_id != nil {
		fields = append(fields, templatesectionversion.FieldThemeTemplateID)
	}
	if m.version != nil {
		fields = append(fields, templatesectionversion.FieldVersion)
	}
	if m.name != nil {
		fields = append(fields, templatesectionversion.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TemplateSectionVersionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case templatesectionversion.FieldCreatedAt:
		return m.CreatedAt()
	case templatesectionversion.FieldUpdatedAt:
		return m.UpdatedAt()
	case templatesectionversion.FieldThemeTemplateID:
		return m.ThemeTemplateID()
	case templatesectionversion.FieldVersion:
		return m.Version()
	case templatesectionversion.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TemplateSectionVersionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case templatesectionversion.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case templatesectionversion.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case templatesectionversion.FieldThemeTemplateID:
		return m.OldThemeTemplateID(ctx)
	case templatesectionversion.FieldVersion:
		return m.OldVersion(ctx)
	case templatesectionversion.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown TemplateSectionVersion field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TemplateSectionVersionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case templatesectionversion.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case templatesectionversion.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case templatesectionversion.FieldThemeTemplateID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThemeTemplateID(v)
		return nil
	case templatesectionversion.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case templatesectionversion.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown TemplateSectionVersion field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TemplateSectionVersionMutation) AddedFields() []string {
	var fields []string
	if m.addtheme_template_id != nil {
		fields = append(fields, templatesectionversion.FieldThemeTemplateID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TemplateSectionVersionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case templatesectionversion.FieldThemeTemplateID:
		return m.AddedThemeTemplateID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TemplateSectionVersionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case templatesectionversion.FieldThemeTemplateID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddThemeTemplateID(v)
		return nil
	}
	return fmt.Errorf("unknown TemplateSectionVersion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TemplateSectionVersionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(templatesectionversion.FieldThemeTemplateID) {
		fields = append(fields, templatesectionversion.FieldThemeTemplateID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TemplateSectionVersionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TemplateSectionVersionMutation) ClearField(name string) error {
	switch name {
	case templatesectionversion.FieldThemeTemplateID:
		m.ClearThemeTemplateID()
		return nil
	}
	return fmt.Errorf("unknown TemplateSectionVersion nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TemplateSectionVersionMutation) ResetField(name string) error {
	switch name {
	case templatesectionversion.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case templatesectionversion.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case templatesectionversion.FieldThemeTemplateID:
		m.ResetThemeTemplateID()
		return nil
	case templatesectionversion.FieldVersion:
		m.ResetVersion()
		return nil
	case templatesectionversion.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown TemplateSectionVersion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TemplateSectionVersionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.bkTemplateSections != nil {
		edges = append(edges, templatesectionversion.EdgeBkTemplateSections)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TemplateSectionVersionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case templatesectionversion.EdgeBkTemplateSections:
		ids := make([]ent.Value, 0, len(m.bkTemplateSections))
		for id := range m.bkTemplateSections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TemplateSectionVersionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedbkTemplateSections != nil {
		edges = append(edges, templatesectionversion.EdgeBkTemplateSections)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TemplateSectionVersionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case templatesectionversion.EdgeBkTemplateSections:
		ids := make([]ent.Value, 0, len(m.removedbkTemplateSections))
		for id := range m.removedbkTemplateSections {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TemplateSectionVersionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedbkTemplateSections {
		edges = append(edges, templatesectionversion.EdgeBkTemplateSections)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TemplateSectionVersionMutation) EdgeCleared(name string) bool {
	switch name {
	case templatesectionversion.EdgeBkTemplateSections:
		return m.clearedbkTemplateSections
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TemplateSectionVersionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown TemplateSectionVersion unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TemplateSectionVersionMutation) ResetEdge(name string) error {
	switch name {
	case templatesectionversion.EdgeBkTemplateSections:
		m.ResetBkTemplateSections()
		return nil
	}
	return fmt.Errorf("unknown TemplateSectionVersion edge %s", name)
}

// ThemeMutation represents an operation that mutates the Theme nodes in the graph.
type ThemeMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uint64
	created_at            *time.Time
	updated_at            *time.Time
	deleted_at            *time.Time
	name                  *string
	thumbnail             *string
	publish               *bool
	clearedFields         map[string]struct{}
	themeTemplates        map[uint64]struct{}
	removedthemeTemplates map[uint64]struct{}
	clearedthemeTemplates bool
	shop                  *uint64
	clearedshop           bool
	done                  bool
	oldValue              func(context.Context) (*Theme, error)
	predicates            []predicate.Theme
}

var _ ent.Mutation = (*ThemeMutation)(nil)

// themeOption allows management of the mutation configuration using functional options.
type themeOption func(*ThemeMutation)

// newThemeMutation creates new mutation for the Theme entity.
func newThemeMutation(c config, op Op, opts ...themeOption) *ThemeMutation {
	m := &ThemeMutation{
		config:        c,
		op:            op,
		typ:           TypeTheme,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withThemeID sets the ID field of the mutation.
func withThemeID(id uint64) themeOption {
	return func(m *ThemeMutation) {
		var (
			err   error
			once  sync.Once
			value *Theme
		)
		m.oldValue = func(ctx context.Context) (*Theme, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Theme.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTheme sets the old Theme of the mutation.
func withTheme(node *Theme) themeOption {
	return func(m *ThemeMutation) {
		m.oldValue = func(context.Context) (*Theme, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ThemeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ThemeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Theme entities.
func (m *ThemeMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ThemeMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *ThemeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ThemeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Theme entity.
// If the Theme object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ThemeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ThemeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ThemeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Theme entity.
// If the Theme object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ThemeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ThemeMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ThemeMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Theme entity.
// If the Theme object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ThemeMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[theme.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ThemeMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[theme.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ThemeMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, theme.FieldDeletedAt)
}

// SetShopID sets the "shop_id" field.
func (m *ThemeMutation) SetShopID(u uint64) {
	m.shop = &u
}

// ShopID returns the value of the "shop_id" field in the mutation.
func (m *ThemeMutation) ShopID() (r uint64, exists bool) {
	v := m.shop
	if v == nil {
		return
	}
	return *v, true
}

// OldShopID returns the old "shop_id" field's value of the Theme entity.
// If the Theme object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeMutation) OldShopID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShopID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShopID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopID: %w", err)
	}
	return oldValue.ShopID, nil
}

// ClearShopID clears the value of the "shop_id" field.
func (m *ThemeMutation) ClearShopID() {
	m.shop = nil
	m.clearedFields[theme.FieldShopID] = struct{}{}
}

// ShopIDCleared returns if the "shop_id" field was cleared in this mutation.
func (m *ThemeMutation) ShopIDCleared() bool {
	_, ok := m.clearedFields[theme.FieldShopID]
	return ok
}

// ResetShopID resets all changes to the "shop_id" field.
func (m *ThemeMutation) ResetShopID() {
	m.shop = nil
	delete(m.clearedFields, theme.FieldShopID)
}

// SetName sets the "name" field.
func (m *ThemeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ThemeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Theme entity.
// If the Theme object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ThemeMutation) ResetName() {
	m.name = nil
}

// SetThumbnail sets the "thumbnail" field.
func (m *ThemeMutation) SetThumbnail(s string) {
	m.thumbnail = &s
}

// Thumbnail returns the value of the "thumbnail" field in the mutation.
func (m *ThemeMutation) Thumbnail() (r string, exists bool) {
	v := m.thumbnail
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnail returns the old "thumbnail" field's value of the Theme entity.
// If the Theme object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeMutation) OldThumbnail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldThumbnail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldThumbnail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnail: %w", err)
	}
	return oldValue.Thumbnail, nil
}

// ResetThumbnail resets all changes to the "thumbnail" field.
func (m *ThemeMutation) ResetThumbnail() {
	m.thumbnail = nil
}

// SetPublish sets the "publish" field.
func (m *ThemeMutation) SetPublish(b bool) {
	m.publish = &b
}

// Publish returns the value of the "publish" field in the mutation.
func (m *ThemeMutation) Publish() (r bool, exists bool) {
	v := m.publish
	if v == nil {
		return
	}
	return *v, true
}

// OldPublish returns the old "publish" field's value of the Theme entity.
// If the Theme object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeMutation) OldPublish(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPublish is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPublish requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublish: %w", err)
	}
	return oldValue.Publish, nil
}

// ResetPublish resets all changes to the "publish" field.
func (m *ThemeMutation) ResetPublish() {
	m.publish = nil
}

// AddThemeTemplateIDs adds the "themeTemplates" edge to the ThemeTemplate entity by ids.
func (m *ThemeMutation) AddThemeTemplateIDs(ids ...uint64) {
	if m.themeTemplates == nil {
		m.themeTemplates = make(map[uint64]struct{})
	}
	for i := range ids {
		m.themeTemplates[ids[i]] = struct{}{}
	}
}

// ClearThemeTemplates clears the "themeTemplates" edge to the ThemeTemplate entity.
func (m *ThemeMutation) ClearThemeTemplates() {
	m.clearedthemeTemplates = true
}

// ThemeTemplatesCleared reports if the "themeTemplates" edge to the ThemeTemplate entity was cleared.
func (m *ThemeMutation) ThemeTemplatesCleared() bool {
	return m.clearedthemeTemplates
}

// RemoveThemeTemplateIDs removes the "themeTemplates" edge to the ThemeTemplate entity by IDs.
func (m *ThemeMutation) RemoveThemeTemplateIDs(ids ...uint64) {
	if m.removedthemeTemplates == nil {
		m.removedthemeTemplates = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.themeTemplates, ids[i])
		m.removedthemeTemplates[ids[i]] = struct{}{}
	}
}

// RemovedThemeTemplates returns the removed IDs of the "themeTemplates" edge to the ThemeTemplate entity.
func (m *ThemeMutation) RemovedThemeTemplatesIDs() (ids []uint64) {
	for id := range m.removedthemeTemplates {
		ids = append(ids, id)
	}
	return
}

// ThemeTemplatesIDs returns the "themeTemplates" edge IDs in the mutation.
func (m *ThemeMutation) ThemeTemplatesIDs() (ids []uint64) {
	for id := range m.themeTemplates {
		ids = append(ids, id)
	}
	return
}

// ResetThemeTemplates resets all changes to the "themeTemplates" edge.
func (m *ThemeMutation) ResetThemeTemplates() {
	m.themeTemplates = nil
	m.clearedthemeTemplates = false
	m.removedthemeTemplates = nil
}

// ClearShop clears the "shop" edge to the Shop entity.
func (m *ThemeMutation) ClearShop() {
	m.clearedshop = true
}

// ShopCleared reports if the "shop" edge to the Shop entity was cleared.
func (m *ThemeMutation) ShopCleared() bool {
	return m.ShopIDCleared() || m.clearedshop
}

// ShopIDs returns the "shop" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ShopID instead. It exists only for internal usage by the builders.
func (m *ThemeMutation) ShopIDs() (ids []uint64) {
	if id := m.shop; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShop resets all changes to the "shop" edge.
func (m *ThemeMutation) ResetShop() {
	m.shop = nil
	m.clearedshop = false
}

// Where appends a list predicates to the ThemeMutation builder.
func (m *ThemeMutation) Where(ps ...predicate.Theme) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ThemeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Theme).
func (m *ThemeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ThemeMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, theme.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, theme.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, theme.FieldDeletedAt)
	}
	if m.shop != nil {
		fields = append(fields, theme.FieldShopID)
	}
	if m.name != nil {
		fields = append(fields, theme.FieldName)
	}
	if m.thumbnail != nil {
		fields = append(fields, theme.FieldThumbnail)
	}
	if m.publish != nil {
		fields = append(fields, theme.FieldPublish)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ThemeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case theme.FieldCreatedAt:
		return m.CreatedAt()
	case theme.FieldUpdatedAt:
		return m.UpdatedAt()
	case theme.FieldDeletedAt:
		return m.DeletedAt()
	case theme.FieldShopID:
		return m.ShopID()
	case theme.FieldName:
		return m.Name()
	case theme.FieldThumbnail:
		return m.Thumbnail()
	case theme.FieldPublish:
		return m.Publish()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ThemeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case theme.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case theme.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case theme.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case theme.FieldShopID:
		return m.OldShopID(ctx)
	case theme.FieldName:
		return m.OldName(ctx)
	case theme.FieldThumbnail:
		return m.OldThumbnail(ctx)
	case theme.FieldPublish:
		return m.OldPublish(ctx)
	}
	return nil, fmt.Errorf("unknown Theme field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ThemeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case theme.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case theme.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case theme.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case theme.FieldShopID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopID(v)
		return nil
	case theme.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case theme.FieldThumbnail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnail(v)
		return nil
	case theme.FieldPublish:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublish(v)
		return nil
	}
	return fmt.Errorf("unknown Theme field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ThemeMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ThemeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ThemeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Theme numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ThemeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(theme.FieldDeletedAt) {
		fields = append(fields, theme.FieldDeletedAt)
	}
	if m.FieldCleared(theme.FieldShopID) {
		fields = append(fields, theme.FieldShopID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ThemeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ThemeMutation) ClearField(name string) error {
	switch name {
	case theme.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case theme.FieldShopID:
		m.ClearShopID()
		return nil
	}
	return fmt.Errorf("unknown Theme nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ThemeMutation) ResetField(name string) error {
	switch name {
	case theme.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case theme.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case theme.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case theme.FieldShopID:
		m.ResetShopID()
		return nil
	case theme.FieldName:
		m.ResetName()
		return nil
	case theme.FieldThumbnail:
		m.ResetThumbnail()
		return nil
	case theme.FieldPublish:
		m.ResetPublish()
		return nil
	}
	return fmt.Errorf("unknown Theme field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ThemeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.themeTemplates != nil {
		edges = append(edges, theme.EdgeThemeTemplates)
	}
	if m.shop != nil {
		edges = append(edges, theme.EdgeShop)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ThemeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case theme.EdgeThemeTemplates:
		ids := make([]ent.Value, 0, len(m.themeTemplates))
		for id := range m.themeTemplates {
			ids = append(ids, id)
		}
		return ids
	case theme.EdgeShop:
		if id := m.shop; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ThemeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedthemeTemplates != nil {
		edges = append(edges, theme.EdgeThemeTemplates)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ThemeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case theme.EdgeThemeTemplates:
		ids := make([]ent.Value, 0, len(m.removedthemeTemplates))
		for id := range m.removedthemeTemplates {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ThemeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedthemeTemplates {
		edges = append(edges, theme.EdgeThemeTemplates)
	}
	if m.clearedshop {
		edges = append(edges, theme.EdgeShop)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ThemeMutation) EdgeCleared(name string) bool {
	switch name {
	case theme.EdgeThemeTemplates:
		return m.clearedthemeTemplates
	case theme.EdgeShop:
		return m.clearedshop
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ThemeMutation) ClearEdge(name string) error {
	switch name {
	case theme.EdgeShop:
		m.ClearShop()
		return nil
	}
	return fmt.Errorf("unknown Theme unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ThemeMutation) ResetEdge(name string) error {
	switch name {
	case theme.EdgeThemeTemplates:
		m.ResetThemeTemplates()
		return nil
	case theme.EdgeShop:
		m.ResetShop()
		return nil
	}
	return fmt.Errorf("unknown Theme edge %s", name)
}

// ThemeTemplateMutation represents an operation that mutates the ThemeTemplate nodes in the graph.
type ThemeTemplateMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	name          *string
	page_type     *themetemplate.PageType
	_default      *bool
	clearedFields map[string]struct{}
	shop          *uint64
	clearedshop   bool
	theme         *uint64
	clearedtheme  bool
	done          bool
	oldValue      func(context.Context) (*ThemeTemplate, error)
	predicates    []predicate.ThemeTemplate
}

var _ ent.Mutation = (*ThemeTemplateMutation)(nil)

// themetemplateOption allows management of the mutation configuration using functional options.
type themetemplateOption func(*ThemeTemplateMutation)

// newThemeTemplateMutation creates new mutation for the ThemeTemplate entity.
func newThemeTemplateMutation(c config, op Op, opts ...themetemplateOption) *ThemeTemplateMutation {
	m := &ThemeTemplateMutation{
		config:        c,
		op:            op,
		typ:           TypeThemeTemplate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withThemeTemplateID sets the ID field of the mutation.
func withThemeTemplateID(id uint64) themetemplateOption {
	return func(m *ThemeTemplateMutation) {
		var (
			err   error
			once  sync.Once
			value *ThemeTemplate
		)
		m.oldValue = func(ctx context.Context) (*ThemeTemplate, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ThemeTemplate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withThemeTemplate sets the old ThemeTemplate of the mutation.
func withThemeTemplate(node *ThemeTemplate) themetemplateOption {
	return func(m *ThemeTemplateMutation) {
		m.oldValue = func(context.Context) (*ThemeTemplate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ThemeTemplateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ThemeTemplateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ThemeTemplate entities.
func (m *ThemeTemplateMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ThemeTemplateMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *ThemeTemplateMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ThemeTemplateMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ThemeTemplate entity.
// If the ThemeTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeTemplateMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ThemeTemplateMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ThemeTemplateMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ThemeTemplateMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ThemeTemplate entity.
// If the ThemeTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeTemplateMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ThemeTemplateMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ThemeTemplateMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ThemeTemplateMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ThemeTemplate entity.
// If the ThemeTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeTemplateMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ThemeTemplateMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[themetemplate.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ThemeTemplateMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[themetemplate.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ThemeTemplateMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, themetemplate.FieldDeletedAt)
}

// SetShopID sets the "shop_id" field.
func (m *ThemeTemplateMutation) SetShopID(u uint64) {
	m.shop = &u
}

// ShopID returns the value of the "shop_id" field in the mutation.
func (m *ThemeTemplateMutation) ShopID() (r uint64, exists bool) {
	v := m.shop
	if v == nil {
		return
	}
	return *v, true
}

// OldShopID returns the old "shop_id" field's value of the ThemeTemplate entity.
// If the ThemeTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeTemplateMutation) OldShopID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShopID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShopID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopID: %w", err)
	}
	return oldValue.ShopID, nil
}

// ClearShopID clears the value of the "shop_id" field.
func (m *ThemeTemplateMutation) ClearShopID() {
	m.shop = nil
	m.clearedFields[themetemplate.FieldShopID] = struct{}{}
}

// ShopIDCleared returns if the "shop_id" field was cleared in this mutation.
func (m *ThemeTemplateMutation) ShopIDCleared() bool {
	_, ok := m.clearedFields[themetemplate.FieldShopID]
	return ok
}

// ResetShopID resets all changes to the "shop_id" field.
func (m *ThemeTemplateMutation) ResetShopID() {
	m.shop = nil
	delete(m.clearedFields, themetemplate.FieldShopID)
}

// SetThemeID sets the "theme_id" field.
func (m *ThemeTemplateMutation) SetThemeID(u uint64) {
	m.theme = &u
}

// ThemeID returns the value of the "theme_id" field in the mutation.
func (m *ThemeTemplateMutation) ThemeID() (r uint64, exists bool) {
	v := m.theme
	if v == nil {
		return
	}
	return *v, true
}

// OldThemeID returns the old "theme_id" field's value of the ThemeTemplate entity.
// If the ThemeTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeTemplateMutation) OldThemeID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldThemeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldThemeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThemeID: %w", err)
	}
	return oldValue.ThemeID, nil
}

// ClearThemeID clears the value of the "theme_id" field.
func (m *ThemeTemplateMutation) ClearThemeID() {
	m.theme = nil
	m.clearedFields[themetemplate.FieldThemeID] = struct{}{}
}

// ThemeIDCleared returns if the "theme_id" field was cleared in this mutation.
func (m *ThemeTemplateMutation) ThemeIDCleared() bool {
	_, ok := m.clearedFields[themetemplate.FieldThemeID]
	return ok
}

// ResetThemeID resets all changes to the "theme_id" field.
func (m *ThemeTemplateMutation) ResetThemeID() {
	m.theme = nil
	delete(m.clearedFields, themetemplate.FieldThemeID)
}

// SetName sets the "name" field.
func (m *ThemeTemplateMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ThemeTemplateMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ThemeTemplate entity.
// If the ThemeTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeTemplateMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ThemeTemplateMutation) ResetName() {
	m.name = nil
}

// SetPageType sets the "page_type" field.
func (m *ThemeTemplateMutation) SetPageType(tt themetemplate.PageType) {
	m.page_type = &tt
}

// PageType returns the value of the "page_type" field in the mutation.
func (m *ThemeTemplateMutation) PageType() (r themetemplate.PageType, exists bool) {
	v := m.page_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPageType returns the old "page_type" field's value of the ThemeTemplate entity.
// If the ThemeTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeTemplateMutation) OldPageType(ctx context.Context) (v themetemplate.PageType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPageType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPageType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPageType: %w", err)
	}
	return oldValue.PageType, nil
}

// ResetPageType resets all changes to the "page_type" field.
func (m *ThemeTemplateMutation) ResetPageType() {
	m.page_type = nil
}

// SetDefault sets the "default" field.
func (m *ThemeTemplateMutation) SetDefault(b bool) {
	m._default = &b
}

// Default returns the value of the "default" field in the mutation.
func (m *ThemeTemplateMutation) Default() (r bool, exists bool) {
	v := m._default
	if v == nil {
		return
	}
	return *v, true
}

// OldDefault returns the old "default" field's value of the ThemeTemplate entity.
// If the ThemeTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ThemeTemplateMutation) OldDefault(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDefault is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDefault requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefault: %w", err)
	}
	return oldValue.Default, nil
}

// ResetDefault resets all changes to the "default" field.
func (m *ThemeTemplateMutation) ResetDefault() {
	m._default = nil
}

// ClearShop clears the "shop" edge to the Shop entity.
func (m *ThemeTemplateMutation) ClearShop() {
	m.clearedshop = true
}

// ShopCleared reports if the "shop" edge to the Shop entity was cleared.
func (m *ThemeTemplateMutation) ShopCleared() bool {
	return m.ShopIDCleared() || m.clearedshop
}

// ShopIDs returns the "shop" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ShopID instead. It exists only for internal usage by the builders.
func (m *ThemeTemplateMutation) ShopIDs() (ids []uint64) {
	if id := m.shop; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShop resets all changes to the "shop" edge.
func (m *ThemeTemplateMutation) ResetShop() {
	m.shop = nil
	m.clearedshop = false
}

// ClearTheme clears the "theme" edge to the Theme entity.
func (m *ThemeTemplateMutation) ClearTheme() {
	m.clearedtheme = true
}

// ThemeCleared reports if the "theme" edge to the Theme entity was cleared.
func (m *ThemeTemplateMutation) ThemeCleared() bool {
	return m.ThemeIDCleared() || m.clearedtheme
}

// ThemeIDs returns the "theme" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ThemeID instead. It exists only for internal usage by the builders.
func (m *ThemeTemplateMutation) ThemeIDs() (ids []uint64) {
	if id := m.theme; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTheme resets all changes to the "theme" edge.
func (m *ThemeTemplateMutation) ResetTheme() {
	m.theme = nil
	m.clearedtheme = false
}

// Where appends a list predicates to the ThemeTemplateMutation builder.
func (m *ThemeTemplateMutation) Where(ps ...predicate.ThemeTemplate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ThemeTemplateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ThemeTemplate).
func (m *ThemeTemplateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ThemeTemplateMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, themetemplate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, themetemplate.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, themetemplate.FieldDeletedAt)
	}
	if m.shop != nil {
		fields = append(fields, themetemplate.FieldShopID)
	}
	if m.theme != nil {
		fields = append(fields, themetemplate.FieldThemeID)
	}
	if m.name != nil {
		fields = append(fields, themetemplate.FieldName)
	}
	if m.page_type != nil {
		fields = append(fields, themetemplate.FieldPageType)
	}
	if m._default != nil {
		fields = append(fields, themetemplate.FieldDefault)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ThemeTemplateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case themetemplate.FieldCreatedAt:
		return m.CreatedAt()
	case themetemplate.FieldUpdatedAt:
		return m.UpdatedAt()
	case themetemplate.FieldDeletedAt:
		return m.DeletedAt()
	case themetemplate.FieldShopID:
		return m.ShopID()
	case themetemplate.FieldThemeID:
		return m.ThemeID()
	case themetemplate.FieldName:
		return m.Name()
	case themetemplate.FieldPageType:
		return m.PageType()
	case themetemplate.FieldDefault:
		return m.Default()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ThemeTemplateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case themetemplate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case themetemplate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case themetemplate.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case themetemplate.FieldShopID:
		return m.OldShopID(ctx)
	case themetemplate.FieldThemeID:
		return m.OldThemeID(ctx)
	case themetemplate.FieldName:
		return m.OldName(ctx)
	case themetemplate.FieldPageType:
		return m.OldPageType(ctx)
	case themetemplate.FieldDefault:
		return m.OldDefault(ctx)
	}
	return nil, fmt.Errorf("unknown ThemeTemplate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ThemeTemplateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case themetemplate.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case themetemplate.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case themetemplate.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case themetemplate.FieldShopID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopID(v)
		return nil
	case themetemplate.FieldThemeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThemeID(v)
		return nil
	case themetemplate.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case themetemplate.FieldPageType:
		v, ok := value.(themetemplate.PageType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPageType(v)
		return nil
	case themetemplate.FieldDefault:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefault(v)
		return nil
	}
	return fmt.Errorf("unknown ThemeTemplate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ThemeTemplateMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ThemeTemplateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ThemeTemplateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ThemeTemplate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ThemeTemplateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(themetemplate.FieldDeletedAt) {
		fields = append(fields, themetemplate.FieldDeletedAt)
	}
	if m.FieldCleared(themetemplate.FieldShopID) {
		fields = append(fields, themetemplate.FieldShopID)
	}
	if m.FieldCleared(themetemplate.FieldThemeID) {
		fields = append(fields, themetemplate.FieldThemeID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ThemeTemplateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ThemeTemplateMutation) ClearField(name string) error {
	switch name {
	case themetemplate.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case themetemplate.FieldShopID:
		m.ClearShopID()
		return nil
	case themetemplate.FieldThemeID:
		m.ClearThemeID()
		return nil
	}
	return fmt.Errorf("unknown ThemeTemplate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ThemeTemplateMutation) ResetField(name string) error {
	switch name {
	case themetemplate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case themetemplate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case themetemplate.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case themetemplate.FieldShopID:
		m.ResetShopID()
		return nil
	case themetemplate.FieldThemeID:
		m.ResetThemeID()
		return nil
	case themetemplate.FieldName:
		m.ResetName()
		return nil
	case themetemplate.FieldPageType:
		m.ResetPageType()
		return nil
	case themetemplate.FieldDefault:
		m.ResetDefault()
		return nil
	}
	return fmt.Errorf("unknown ThemeTemplate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ThemeTemplateMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.shop != nil {
		edges = append(edges, themetemplate.EdgeShop)
	}
	if m.theme != nil {
		edges = append(edges, themetemplate.EdgeTheme)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ThemeTemplateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case themetemplate.EdgeShop:
		if id := m.shop; id != nil {
			return []ent.Value{*id}
		}
	case themetemplate.EdgeTheme:
		if id := m.theme; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ThemeTemplateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ThemeTemplateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ThemeTemplateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedshop {
		edges = append(edges, themetemplate.EdgeShop)
	}
	if m.clearedtheme {
		edges = append(edges, themetemplate.EdgeTheme)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ThemeTemplateMutation) EdgeCleared(name string) bool {
	switch name {
	case themetemplate.EdgeShop:
		return m.clearedshop
	case themetemplate.EdgeTheme:
		return m.clearedtheme
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ThemeTemplateMutation) ClearEdge(name string) error {
	switch name {
	case themetemplate.EdgeShop:
		m.ClearShop()
		return nil
	case themetemplate.EdgeTheme:
		m.ClearTheme()
		return nil
	}
	return fmt.Errorf("unknown ThemeTemplate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ThemeTemplateMutation) ResetEdge(name string) error {
	switch name {
	case themetemplate.EdgeShop:
		m.ResetShop()
		return nil
	case themetemplate.EdgeTheme:
		m.ResetTheme()
		return nil
	}
	return fmt.Errorf("unknown ThemeTemplate edge %s", name)
}

// TodoMutation represents an operation that mutates the Todo nodes in the graph.
type TodoMutation struct {
	config
	op              Op
	typ             string
	id              *uint64
	created_at      *time.Time
	updated_at      *time.Time
	deleted_at      *time.Time
	text            *string
	status          *todo.Status
	priority        *int
	addpriority     *int
	clearedFields   map[string]struct{}
	children        map[uint64]struct{}
	removedchildren map[uint64]struct{}
	clearedchildren bool
	parent          *uint64
	clearedparent   bool
	done            bool
	oldValue        func(context.Context) (*Todo, error)
	predicates      []predicate.Todo
}

var _ ent.Mutation = (*TodoMutation)(nil)

// todoOption allows management of the mutation configuration using functional options.
type todoOption func(*TodoMutation)

// newTodoMutation creates new mutation for the Todo entity.
func newTodoMutation(c config, op Op, opts ...todoOption) *TodoMutation {
	m := &TodoMutation{
		config:        c,
		op:            op,
		typ:           TypeTodo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTodoID sets the ID field of the mutation.
func withTodoID(id uint64) todoOption {
	return func(m *TodoMutation) {
		var (
			err   error
			once  sync.Once
			value *Todo
		)
		m.oldValue = func(ctx context.Context) (*Todo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Todo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTodo sets the old Todo of the mutation.
func withTodo(node *Todo) todoOption {
	return func(m *TodoMutation) {
		m.oldValue = func(context.Context) (*Todo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TodoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TodoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Todo entities.
func (m *TodoMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TodoMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *TodoMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TodoMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Todo entity.
// If the Todo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TodoMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TodoMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TodoMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Todo entity.
// If the Todo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TodoMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TodoMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TodoMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Todo entity.
// If the Todo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *TodoMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[todo.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *TodoMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[todo.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TodoMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, todo.FieldDeletedAt)
}

// SetText sets the "text" field.
func (m *TodoMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *TodoMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Todo entity.
// If the Todo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *TodoMutation) ResetText() {
	m.text = nil
}

// SetStatus sets the "status" field.
func (m *TodoMutation) SetStatus(t todo.Status) {
	m.status = &t
}

// Status returns the value of the "status" field in the mutation.
func (m *TodoMutation) Status() (r todo.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Todo entity.
// If the Todo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoMutation) OldStatus(ctx context.Context) (v todo.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TodoMutation) ResetStatus() {
	m.status = nil
}

// SetPriority sets the "priority" field.
func (m *TodoMutation) SetPriority(i int) {
	m.priority = &i
	m.addpriority = nil
}

// Priority returns the value of the "priority" field in the mutation.
func (m *TodoMutation) Priority() (r int, exists bool) {
	v := m.priority
	if v == nil {
		return
	}
	return *v, true
}

// OldPriority returns the old "priority" field's value of the Todo entity.
// If the Todo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoMutation) OldPriority(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriority: %w", err)
	}
	return oldValue.Priority, nil
}

// AddPriority adds i to the "priority" field.
func (m *TodoMutation) AddPriority(i int) {
	if m.addpriority != nil {
		*m.addpriority += i
	} else {
		m.addpriority = &i
	}
}

// AddedPriority returns the value that was added to the "priority" field in this mutation.
func (m *TodoMutation) AddedPriority() (r int, exists bool) {
	v := m.addpriority
	if v == nil {
		return
	}
	return *v, true
}

// ResetPriority resets all changes to the "priority" field.
func (m *TodoMutation) ResetPriority() {
	m.priority = nil
	m.addpriority = nil
}

// AddChildIDs adds the "children" edge to the Todo entity by ids.
func (m *TodoMutation) AddChildIDs(ids ...uint64) {
	if m.children == nil {
		m.children = make(map[uint64]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Todo entity.
func (m *TodoMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Todo entity was cleared.
func (m *TodoMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Todo entity by IDs.
func (m *TodoMutation) RemoveChildIDs(ids ...uint64) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Todo entity.
func (m *TodoMutation) RemovedChildrenIDs() (ids []uint64) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *TodoMutation) ChildrenIDs() (ids []uint64) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *TodoMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// SetParentID sets the "parent" edge to the Todo entity by id.
func (m *TodoMutation) SetParentID(id uint64) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Todo entity.
func (m *TodoMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Todo entity was cleared.
func (m *TodoMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *TodoMutation) ParentID() (id uint64, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *TodoMutation) ParentIDs() (ids []uint64) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *TodoMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// Where appends a list predicates to the TodoMutation builder.
func (m *TodoMutation) Where(ps ...predicate.Todo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TodoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Todo).
func (m *TodoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TodoMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, todo.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, todo.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, todo.FieldDeletedAt)
	}
	if m.text != nil {
		fields = append(fields, todo.FieldText)
	}
	if m.status != nil {
		fields = append(fields, todo.FieldStatus)
	}
	if m.priority != nil {
		fields = append(fields, todo.FieldPriority)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TodoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case todo.FieldCreatedAt:
		return m.CreatedAt()
	case todo.FieldUpdatedAt:
		return m.UpdatedAt()
	case todo.FieldDeletedAt:
		return m.DeletedAt()
	case todo.FieldText:
		return m.Text()
	case todo.FieldStatus:
		return m.Status()
	case todo.FieldPriority:
		return m.Priority()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TodoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case todo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case todo.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case todo.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case todo.FieldText:
		return m.OldText(ctx)
	case todo.FieldStatus:
		return m.OldStatus(ctx)
	case todo.FieldPriority:
		return m.OldPriority(ctx)
	}
	return nil, fmt.Errorf("unknown Todo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case todo.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case todo.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case todo.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case todo.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case todo.FieldStatus:
		v, ok := value.(todo.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case todo.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriority(v)
		return nil
	}
	return fmt.Errorf("unknown Todo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TodoMutation) AddedFields() []string {
	var fields []string
	if m.addpriority != nil {
		fields = append(fields, todo.FieldPriority)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TodoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case todo.FieldPriority:
		return m.AddedPriority()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case todo.FieldPriority:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPriority(v)
		return nil
	}
	return fmt.Errorf("unknown Todo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TodoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(todo.FieldDeletedAt) {
		fields = append(fields, todo.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TodoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TodoMutation) ClearField(name string) error {
	switch name {
	case todo.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Todo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TodoMutation) ResetField(name string) error {
	switch name {
	case todo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case todo.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case todo.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case todo.FieldText:
		m.ResetText()
		return nil
	case todo.FieldStatus:
		m.ResetStatus()
		return nil
	case todo.FieldPriority:
		m.ResetPriority()
		return nil
	}
	return fmt.Errorf("unknown Todo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TodoMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.children != nil {
		edges = append(edges, todo.EdgeChildren)
	}
	if m.parent != nil {
		edges = append(edges, todo.EdgeParent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TodoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case todo.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case todo.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TodoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchildren != nil {
		edges = append(edges, todo.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TodoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case todo.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TodoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedchildren {
		edges = append(edges, todo.EdgeChildren)
	}
	if m.clearedparent {
		edges = append(edges, todo.EdgeParent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TodoMutation) EdgeCleared(name string) bool {
	switch name {
	case todo.EdgeChildren:
		return m.clearedchildren
	case todo.EdgeParent:
		return m.clearedparent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TodoMutation) ClearEdge(name string) error {
	switch name {
	case todo.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Todo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TodoMutation) ResetEdge(name string) error {
	switch name {
	case todo.EdgeChildren:
		m.ResetChildren()
		return nil
	case todo.EdgeParent:
		m.ResetParent()
		return nil
	}
	return fmt.Errorf("unknown Todo edge %s", name)
}
