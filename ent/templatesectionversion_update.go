// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/bktemplatesection"
	"app-api/ent/predicate"
	"app-api/ent/templatesectionversion"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TemplateSectionVersionUpdate is the builder for updating TemplateSectionVersion entities.
type TemplateSectionVersionUpdate struct {
	config
	hooks    []Hook
	mutation *TemplateSectionVersionMutation
}

// Where appends a list predicates to the TemplateSectionVersionUpdate builder.
func (tsvu *TemplateSectionVersionUpdate) Where(ps ...predicate.TemplateSectionVersion) *TemplateSectionVersionUpdate {
	tsvu.mutation.Where(ps...)
	return tsvu
}

// SetUpdatedAt sets the "updated_at" field.
func (tsvu *TemplateSectionVersionUpdate) SetUpdatedAt(t time.Time) *TemplateSectionVersionUpdate {
	tsvu.mutation.SetUpdatedAt(t)
	return tsvu
}

// SetThemeTemplateID sets the "theme_template_id" field.
func (tsvu *TemplateSectionVersionUpdate) SetThemeTemplateID(u uint64) *TemplateSectionVersionUpdate {
	tsvu.mutation.ResetThemeTemplateID()
	tsvu.mutation.SetThemeTemplateID(u)
	return tsvu
}

// SetNillableThemeTemplateID sets the "theme_template_id" field if the given value is not nil.
func (tsvu *TemplateSectionVersionUpdate) SetNillableThemeTemplateID(u *uint64) *TemplateSectionVersionUpdate {
	if u != nil {
		tsvu.SetThemeTemplateID(*u)
	}
	return tsvu
}

// AddThemeTemplateID adds u to the "theme_template_id" field.
func (tsvu *TemplateSectionVersionUpdate) AddThemeTemplateID(u uint64) *TemplateSectionVersionUpdate {
	tsvu.mutation.AddThemeTemplateID(u)
	return tsvu
}

// ClearThemeTemplateID clears the value of the "theme_template_id" field.
func (tsvu *TemplateSectionVersionUpdate) ClearThemeTemplateID() *TemplateSectionVersionUpdate {
	tsvu.mutation.ClearThemeTemplateID()
	return tsvu
}

// SetVersion sets the "version" field.
func (tsvu *TemplateSectionVersionUpdate) SetVersion(s string) *TemplateSectionVersionUpdate {
	tsvu.mutation.SetVersion(s)
	return tsvu
}

// SetName sets the "name" field.
func (tsvu *TemplateSectionVersionUpdate) SetName(s string) *TemplateSectionVersionUpdate {
	tsvu.mutation.SetName(s)
	return tsvu
}

// AddBkTemplateSectionIDs adds the "bkTemplateSections" edge to the BkTemplateSection entity by IDs.
func (tsvu *TemplateSectionVersionUpdate) AddBkTemplateSectionIDs(ids ...uint64) *TemplateSectionVersionUpdate {
	tsvu.mutation.AddBkTemplateSectionIDs(ids...)
	return tsvu
}

// AddBkTemplateSections adds the "bkTemplateSections" edges to the BkTemplateSection entity.
func (tsvu *TemplateSectionVersionUpdate) AddBkTemplateSections(b ...*BkTemplateSection) *TemplateSectionVersionUpdate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tsvu.AddBkTemplateSectionIDs(ids...)
}

// Mutation returns the TemplateSectionVersionMutation object of the builder.
func (tsvu *TemplateSectionVersionUpdate) Mutation() *TemplateSectionVersionMutation {
	return tsvu.mutation
}

// ClearBkTemplateSections clears all "bkTemplateSections" edges to the BkTemplateSection entity.
func (tsvu *TemplateSectionVersionUpdate) ClearBkTemplateSections() *TemplateSectionVersionUpdate {
	tsvu.mutation.ClearBkTemplateSections()
	return tsvu
}

// RemoveBkTemplateSectionIDs removes the "bkTemplateSections" edge to BkTemplateSection entities by IDs.
func (tsvu *TemplateSectionVersionUpdate) RemoveBkTemplateSectionIDs(ids ...uint64) *TemplateSectionVersionUpdate {
	tsvu.mutation.RemoveBkTemplateSectionIDs(ids...)
	return tsvu
}

// RemoveBkTemplateSections removes "bkTemplateSections" edges to BkTemplateSection entities.
func (tsvu *TemplateSectionVersionUpdate) RemoveBkTemplateSections(b ...*BkTemplateSection) *TemplateSectionVersionUpdate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tsvu.RemoveBkTemplateSectionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsvu *TemplateSectionVersionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tsvu.defaults()
	if len(tsvu.hooks) == 0 {
		if err = tsvu.check(); err != nil {
			return 0, err
		}
		affected, err = tsvu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TemplateSectionVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tsvu.check(); err != nil {
				return 0, err
			}
			tsvu.mutation = mutation
			affected, err = tsvu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tsvu.hooks) - 1; i >= 0; i-- {
			if tsvu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tsvu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsvu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tsvu *TemplateSectionVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := tsvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsvu *TemplateSectionVersionUpdate) Exec(ctx context.Context) error {
	_, err := tsvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsvu *TemplateSectionVersionUpdate) ExecX(ctx context.Context) {
	if err := tsvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsvu *TemplateSectionVersionUpdate) defaults() {
	if _, ok := tsvu.mutation.UpdatedAt(); !ok {
		v := templatesectionversion.UpdateDefaultUpdatedAt()
		tsvu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsvu *TemplateSectionVersionUpdate) check() error {
	if v, ok := tsvu.mutation.Version(); ok {
		if err := templatesectionversion.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf("ent: validator failed for field \"version\": %w", err)}
		}
	}
	if v, ok := tsvu.mutation.Name(); ok {
		if err := templatesectionversion.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (tsvu *TemplateSectionVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   templatesectionversion.Table,
			Columns: templatesectionversion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: templatesectionversion.FieldID,
			},
		},
	}
	if ps := tsvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsvu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: templatesectionversion.FieldUpdatedAt,
		})
	}
	if value, ok := tsvu.mutation.ThemeTemplateID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesectionversion.FieldThemeTemplateID,
		})
	}
	if value, ok := tsvu.mutation.AddedThemeTemplateID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesectionversion.FieldThemeTemplateID,
		})
	}
	if tsvu.mutation.ThemeTemplateIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: templatesectionversion.FieldThemeTemplateID,
		})
	}
	if value, ok := tsvu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatesectionversion.FieldVersion,
		})
	}
	if value, ok := tsvu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatesectionversion.FieldName,
		})
	}
	if tsvu.mutation.BkTemplateSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templatesectionversion.BkTemplateSectionsTable,
			Columns: []string{templatesectionversion.BkTemplateSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bktemplatesection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsvu.mutation.RemovedBkTemplateSectionsIDs(); len(nodes) > 0 && !tsvu.mutation.BkTemplateSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templatesectionversion.BkTemplateSectionsTable,
			Columns: []string{templatesectionversion.BkTemplateSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bktemplatesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsvu.mutation.BkTemplateSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templatesectionversion.BkTemplateSectionsTable,
			Columns: []string{templatesectionversion.BkTemplateSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bktemplatesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tsvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{templatesectionversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TemplateSectionVersionUpdateOne is the builder for updating a single TemplateSectionVersion entity.
type TemplateSectionVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TemplateSectionVersionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tsvuo *TemplateSectionVersionUpdateOne) SetUpdatedAt(t time.Time) *TemplateSectionVersionUpdateOne {
	tsvuo.mutation.SetUpdatedAt(t)
	return tsvuo
}

// SetThemeTemplateID sets the "theme_template_id" field.
func (tsvuo *TemplateSectionVersionUpdateOne) SetThemeTemplateID(u uint64) *TemplateSectionVersionUpdateOne {
	tsvuo.mutation.ResetThemeTemplateID()
	tsvuo.mutation.SetThemeTemplateID(u)
	return tsvuo
}

// SetNillableThemeTemplateID sets the "theme_template_id" field if the given value is not nil.
func (tsvuo *TemplateSectionVersionUpdateOne) SetNillableThemeTemplateID(u *uint64) *TemplateSectionVersionUpdateOne {
	if u != nil {
		tsvuo.SetThemeTemplateID(*u)
	}
	return tsvuo
}

// AddThemeTemplateID adds u to the "theme_template_id" field.
func (tsvuo *TemplateSectionVersionUpdateOne) AddThemeTemplateID(u uint64) *TemplateSectionVersionUpdateOne {
	tsvuo.mutation.AddThemeTemplateID(u)
	return tsvuo
}

// ClearThemeTemplateID clears the value of the "theme_template_id" field.
func (tsvuo *TemplateSectionVersionUpdateOne) ClearThemeTemplateID() *TemplateSectionVersionUpdateOne {
	tsvuo.mutation.ClearThemeTemplateID()
	return tsvuo
}

// SetVersion sets the "version" field.
func (tsvuo *TemplateSectionVersionUpdateOne) SetVersion(s string) *TemplateSectionVersionUpdateOne {
	tsvuo.mutation.SetVersion(s)
	return tsvuo
}

// SetName sets the "name" field.
func (tsvuo *TemplateSectionVersionUpdateOne) SetName(s string) *TemplateSectionVersionUpdateOne {
	tsvuo.mutation.SetName(s)
	return tsvuo
}

// AddBkTemplateSectionIDs adds the "bkTemplateSections" edge to the BkTemplateSection entity by IDs.
func (tsvuo *TemplateSectionVersionUpdateOne) AddBkTemplateSectionIDs(ids ...uint64) *TemplateSectionVersionUpdateOne {
	tsvuo.mutation.AddBkTemplateSectionIDs(ids...)
	return tsvuo
}

// AddBkTemplateSections adds the "bkTemplateSections" edges to the BkTemplateSection entity.
func (tsvuo *TemplateSectionVersionUpdateOne) AddBkTemplateSections(b ...*BkTemplateSection) *TemplateSectionVersionUpdateOne {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tsvuo.AddBkTemplateSectionIDs(ids...)
}

// Mutation returns the TemplateSectionVersionMutation object of the builder.
func (tsvuo *TemplateSectionVersionUpdateOne) Mutation() *TemplateSectionVersionMutation {
	return tsvuo.mutation
}

// ClearBkTemplateSections clears all "bkTemplateSections" edges to the BkTemplateSection entity.
func (tsvuo *TemplateSectionVersionUpdateOne) ClearBkTemplateSections() *TemplateSectionVersionUpdateOne {
	tsvuo.mutation.ClearBkTemplateSections()
	return tsvuo
}

// RemoveBkTemplateSectionIDs removes the "bkTemplateSections" edge to BkTemplateSection entities by IDs.
func (tsvuo *TemplateSectionVersionUpdateOne) RemoveBkTemplateSectionIDs(ids ...uint64) *TemplateSectionVersionUpdateOne {
	tsvuo.mutation.RemoveBkTemplateSectionIDs(ids...)
	return tsvuo
}

// RemoveBkTemplateSections removes "bkTemplateSections" edges to BkTemplateSection entities.
func (tsvuo *TemplateSectionVersionUpdateOne) RemoveBkTemplateSections(b ...*BkTemplateSection) *TemplateSectionVersionUpdateOne {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tsvuo.RemoveBkTemplateSectionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsvuo *TemplateSectionVersionUpdateOne) Select(field string, fields ...string) *TemplateSectionVersionUpdateOne {
	tsvuo.fields = append([]string{field}, fields...)
	return tsvuo
}

// Save executes the query and returns the updated TemplateSectionVersion entity.
func (tsvuo *TemplateSectionVersionUpdateOne) Save(ctx context.Context) (*TemplateSectionVersion, error) {
	var (
		err  error
		node *TemplateSectionVersion
	)
	tsvuo.defaults()
	if len(tsvuo.hooks) == 0 {
		if err = tsvuo.check(); err != nil {
			return nil, err
		}
		node, err = tsvuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TemplateSectionVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tsvuo.check(); err != nil {
				return nil, err
			}
			tsvuo.mutation = mutation
			node, err = tsvuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tsvuo.hooks) - 1; i >= 0; i-- {
			if tsvuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tsvuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsvuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tsvuo *TemplateSectionVersionUpdateOne) SaveX(ctx context.Context) *TemplateSectionVersion {
	node, err := tsvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsvuo *TemplateSectionVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := tsvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsvuo *TemplateSectionVersionUpdateOne) ExecX(ctx context.Context) {
	if err := tsvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsvuo *TemplateSectionVersionUpdateOne) defaults() {
	if _, ok := tsvuo.mutation.UpdatedAt(); !ok {
		v := templatesectionversion.UpdateDefaultUpdatedAt()
		tsvuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsvuo *TemplateSectionVersionUpdateOne) check() error {
	if v, ok := tsvuo.mutation.Version(); ok {
		if err := templatesectionversion.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf("ent: validator failed for field \"version\": %w", err)}
		}
	}
	if v, ok := tsvuo.mutation.Name(); ok {
		if err := templatesectionversion.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (tsvuo *TemplateSectionVersionUpdateOne) sqlSave(ctx context.Context) (_node *TemplateSectionVersion, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   templatesectionversion.Table,
			Columns: templatesectionversion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: templatesectionversion.FieldID,
			},
		},
	}
	id, ok := tsvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TemplateSectionVersion.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tsvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, templatesectionversion.FieldID)
		for _, f := range fields {
			if !templatesectionversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != templatesectionversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsvuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: templatesectionversion.FieldUpdatedAt,
		})
	}
	if value, ok := tsvuo.mutation.ThemeTemplateID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesectionversion.FieldThemeTemplateID,
		})
	}
	if value, ok := tsvuo.mutation.AddedThemeTemplateID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesectionversion.FieldThemeTemplateID,
		})
	}
	if tsvuo.mutation.ThemeTemplateIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: templatesectionversion.FieldThemeTemplateID,
		})
	}
	if value, ok := tsvuo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatesectionversion.FieldVersion,
		})
	}
	if value, ok := tsvuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatesectionversion.FieldName,
		})
	}
	if tsvuo.mutation.BkTemplateSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templatesectionversion.BkTemplateSectionsTable,
			Columns: []string{templatesectionversion.BkTemplateSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bktemplatesection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsvuo.mutation.RemovedBkTemplateSectionsIDs(); len(nodes) > 0 && !tsvuo.mutation.BkTemplateSectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templatesectionversion.BkTemplateSectionsTable,
			Columns: []string{templatesectionversion.BkTemplateSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bktemplatesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsvuo.mutation.BkTemplateSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templatesectionversion.BkTemplateSectionsTable,
			Columns: []string{templatesectionversion.BkTemplateSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bktemplatesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TemplateSectionVersion{config: tsvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{templatesectionversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
