// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"app-api/ent/migrate"

	"app-api/ent/bktemplatesection"
	"app-api/ent/componentproperty"
	"app-api/ent/customcomponent"
	"app-api/ent/globaltemplate"
	"app-api/ent/shop"
	"app-api/ent/templatesection"
	"app-api/ent/templatesectionversion"
	"app-api/ent/theme"
	"app-api/ent/themetemplate"
	"app-api/ent/todo"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BkTemplateSection is the client for interacting with the BkTemplateSection builders.
	BkTemplateSection *BkTemplateSectionClient
	// ComponentProperty is the client for interacting with the ComponentProperty builders.
	ComponentProperty *ComponentPropertyClient
	// CustomComponent is the client for interacting with the CustomComponent builders.
	CustomComponent *CustomComponentClient
	// GlobalTemplate is the client for interacting with the GlobalTemplate builders.
	GlobalTemplate *GlobalTemplateClient
	// Shop is the client for interacting with the Shop builders.
	Shop *ShopClient
	// TemplateSection is the client for interacting with the TemplateSection builders.
	TemplateSection *TemplateSectionClient
	// TemplateSectionVersion is the client for interacting with the TemplateSectionVersion builders.
	TemplateSectionVersion *TemplateSectionVersionClient
	// Theme is the client for interacting with the Theme builders.
	Theme *ThemeClient
	// ThemeTemplate is the client for interacting with the ThemeTemplate builders.
	ThemeTemplate *ThemeTemplateClient
	// Todo is the client for interacting with the Todo builders.
	Todo *TodoClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BkTemplateSection = NewBkTemplateSectionClient(c.config)
	c.ComponentProperty = NewComponentPropertyClient(c.config)
	c.CustomComponent = NewCustomComponentClient(c.config)
	c.GlobalTemplate = NewGlobalTemplateClient(c.config)
	c.Shop = NewShopClient(c.config)
	c.TemplateSection = NewTemplateSectionClient(c.config)
	c.TemplateSectionVersion = NewTemplateSectionVersionClient(c.config)
	c.Theme = NewThemeClient(c.config)
	c.ThemeTemplate = NewThemeTemplateClient(c.config)
	c.Todo = NewTodoClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		BkTemplateSection:      NewBkTemplateSectionClient(cfg),
		ComponentProperty:      NewComponentPropertyClient(cfg),
		CustomComponent:        NewCustomComponentClient(cfg),
		GlobalTemplate:         NewGlobalTemplateClient(cfg),
		Shop:                   NewShopClient(cfg),
		TemplateSection:        NewTemplateSectionClient(cfg),
		TemplateSectionVersion: NewTemplateSectionVersionClient(cfg),
		Theme:                  NewThemeClient(cfg),
		ThemeTemplate:          NewThemeTemplateClient(cfg),
		Todo:                   NewTodoClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                 cfg,
		BkTemplateSection:      NewBkTemplateSectionClient(cfg),
		ComponentProperty:      NewComponentPropertyClient(cfg),
		CustomComponent:        NewCustomComponentClient(cfg),
		GlobalTemplate:         NewGlobalTemplateClient(cfg),
		Shop:                   NewShopClient(cfg),
		TemplateSection:        NewTemplateSectionClient(cfg),
		TemplateSectionVersion: NewTemplateSectionVersionClient(cfg),
		Theme:                  NewThemeClient(cfg),
		ThemeTemplate:          NewThemeTemplateClient(cfg),
		Todo:                   NewTodoClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BkTemplateSection.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.BkTemplateSection.Use(hooks...)
	c.ComponentProperty.Use(hooks...)
	c.CustomComponent.Use(hooks...)
	c.GlobalTemplate.Use(hooks...)
	c.Shop.Use(hooks...)
	c.TemplateSection.Use(hooks...)
	c.TemplateSectionVersion.Use(hooks...)
	c.Theme.Use(hooks...)
	c.ThemeTemplate.Use(hooks...)
	c.Todo.Use(hooks...)
}

// BkTemplateSectionClient is a client for the BkTemplateSection schema.
type BkTemplateSectionClient struct {
	config
}

// NewBkTemplateSectionClient returns a client for the BkTemplateSection from the given config.
func NewBkTemplateSectionClient(c config) *BkTemplateSectionClient {
	return &BkTemplateSectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bktemplatesection.Hooks(f(g(h())))`.
func (c *BkTemplateSectionClient) Use(hooks ...Hook) {
	c.hooks.BkTemplateSection = append(c.hooks.BkTemplateSection, hooks...)
}

// Create returns a create builder for BkTemplateSection.
func (c *BkTemplateSectionClient) Create() *BkTemplateSectionCreate {
	mutation := newBkTemplateSectionMutation(c.config, OpCreate)
	return &BkTemplateSectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BkTemplateSection entities.
func (c *BkTemplateSectionClient) CreateBulk(builders ...*BkTemplateSectionCreate) *BkTemplateSectionCreateBulk {
	return &BkTemplateSectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BkTemplateSection.
func (c *BkTemplateSectionClient) Update() *BkTemplateSectionUpdate {
	mutation := newBkTemplateSectionMutation(c.config, OpUpdate)
	return &BkTemplateSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BkTemplateSectionClient) UpdateOne(bts *BkTemplateSection) *BkTemplateSectionUpdateOne {
	mutation := newBkTemplateSectionMutation(c.config, OpUpdateOne, withBkTemplateSection(bts))
	return &BkTemplateSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BkTemplateSectionClient) UpdateOneID(id uint64) *BkTemplateSectionUpdateOne {
	mutation := newBkTemplateSectionMutation(c.config, OpUpdateOne, withBkTemplateSectionID(id))
	return &BkTemplateSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BkTemplateSection.
func (c *BkTemplateSectionClient) Delete() *BkTemplateSectionDelete {
	mutation := newBkTemplateSectionMutation(c.config, OpDelete)
	return &BkTemplateSectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BkTemplateSectionClient) DeleteOne(bts *BkTemplateSection) *BkTemplateSectionDeleteOne {
	return c.DeleteOneID(bts.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BkTemplateSectionClient) DeleteOneID(id uint64) *BkTemplateSectionDeleteOne {
	builder := c.Delete().Where(bktemplatesection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BkTemplateSectionDeleteOne{builder}
}

// Query returns a query builder for BkTemplateSection.
func (c *BkTemplateSectionClient) Query() *BkTemplateSectionQuery {
	return &BkTemplateSectionQuery{
		config: c.config,
	}
}

// Get returns a BkTemplateSection entity by its id.
func (c *BkTemplateSectionClient) Get(ctx context.Context, id uint64) (*BkTemplateSection, error) {
	return c.Query().Where(bktemplatesection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BkTemplateSectionClient) GetX(ctx context.Context, id uint64) *BkTemplateSection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTemplateSection queries the templateSection edge of a BkTemplateSection.
func (c *BkTemplateSectionClient) QueryTemplateSection(bts *BkTemplateSection) *TemplateSectionQuery {
	query := &TemplateSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bktemplatesection.Table, bktemplatesection.FieldID, id),
			sqlgraph.To(templatesection.Table, templatesection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bktemplatesection.TemplateSectionTable, bktemplatesection.TemplateSectionColumn),
		)
		fromV = sqlgraph.Neighbors(bts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVersion queries the version edge of a BkTemplateSection.
func (c *BkTemplateSectionClient) QueryVersion(bts *BkTemplateSection) *TemplateSectionVersionQuery {
	query := &TemplateSectionVersionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bktemplatesection.Table, bktemplatesection.FieldID, id),
			sqlgraph.To(templatesectionversion.Table, templatesectionversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bktemplatesection.VersionTable, bktemplatesection.VersionColumn),
		)
		fromV = sqlgraph.Neighbors(bts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BkTemplateSectionClient) Hooks() []Hook {
	return c.hooks.BkTemplateSection
}

// ComponentPropertyClient is a client for the ComponentProperty schema.
type ComponentPropertyClient struct {
	config
}

// NewComponentPropertyClient returns a client for the ComponentProperty from the given config.
func NewComponentPropertyClient(c config) *ComponentPropertyClient {
	return &ComponentPropertyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `componentproperty.Hooks(f(g(h())))`.
func (c *ComponentPropertyClient) Use(hooks ...Hook) {
	c.hooks.ComponentProperty = append(c.hooks.ComponentProperty, hooks...)
}

// Create returns a create builder for ComponentProperty.
func (c *ComponentPropertyClient) Create() *ComponentPropertyCreate {
	mutation := newComponentPropertyMutation(c.config, OpCreate)
	return &ComponentPropertyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ComponentProperty entities.
func (c *ComponentPropertyClient) CreateBulk(builders ...*ComponentPropertyCreate) *ComponentPropertyCreateBulk {
	return &ComponentPropertyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ComponentProperty.
func (c *ComponentPropertyClient) Update() *ComponentPropertyUpdate {
	mutation := newComponentPropertyMutation(c.config, OpUpdate)
	return &ComponentPropertyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ComponentPropertyClient) UpdateOne(cp *ComponentProperty) *ComponentPropertyUpdateOne {
	mutation := newComponentPropertyMutation(c.config, OpUpdateOne, withComponentProperty(cp))
	return &ComponentPropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ComponentPropertyClient) UpdateOneID(id uint64) *ComponentPropertyUpdateOne {
	mutation := newComponentPropertyMutation(c.config, OpUpdateOne, withComponentPropertyID(id))
	return &ComponentPropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ComponentProperty.
func (c *ComponentPropertyClient) Delete() *ComponentPropertyDelete {
	mutation := newComponentPropertyMutation(c.config, OpDelete)
	return &ComponentPropertyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ComponentPropertyClient) DeleteOne(cp *ComponentProperty) *ComponentPropertyDeleteOne {
	return c.DeleteOneID(cp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ComponentPropertyClient) DeleteOneID(id uint64) *ComponentPropertyDeleteOne {
	builder := c.Delete().Where(componentproperty.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ComponentPropertyDeleteOne{builder}
}

// Query returns a query builder for ComponentProperty.
func (c *ComponentPropertyClient) Query() *ComponentPropertyQuery {
	return &ComponentPropertyQuery{
		config: c.config,
	}
}

// Get returns a ComponentProperty entity by its id.
func (c *ComponentPropertyClient) Get(ctx context.Context, id uint64) (*ComponentProperty, error) {
	return c.Query().Where(componentproperty.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ComponentPropertyClient) GetX(ctx context.Context, id uint64) *ComponentProperty {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryComponent queries the component edge of a ComponentProperty.
func (c *ComponentPropertyClient) QueryComponent(cp *ComponentProperty) *CustomComponentQuery {
	query := &CustomComponentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(componentproperty.Table, componentproperty.FieldID, id),
			sqlgraph.To(customcomponent.Table, customcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, componentproperty.ComponentTable, componentproperty.ComponentColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ComponentPropertyClient) Hooks() []Hook {
	return c.hooks.ComponentProperty
}

// CustomComponentClient is a client for the CustomComponent schema.
type CustomComponentClient struct {
	config
}

// NewCustomComponentClient returns a client for the CustomComponent from the given config.
func NewCustomComponentClient(c config) *CustomComponentClient {
	return &CustomComponentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customcomponent.Hooks(f(g(h())))`.
func (c *CustomComponentClient) Use(hooks ...Hook) {
	c.hooks.CustomComponent = append(c.hooks.CustomComponent, hooks...)
}

// Create returns a create builder for CustomComponent.
func (c *CustomComponentClient) Create() *CustomComponentCreate {
	mutation := newCustomComponentMutation(c.config, OpCreate)
	return &CustomComponentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CustomComponent entities.
func (c *CustomComponentClient) CreateBulk(builders ...*CustomComponentCreate) *CustomComponentCreateBulk {
	return &CustomComponentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CustomComponent.
func (c *CustomComponentClient) Update() *CustomComponentUpdate {
	mutation := newCustomComponentMutation(c.config, OpUpdate)
	return &CustomComponentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomComponentClient) UpdateOne(cc *CustomComponent) *CustomComponentUpdateOne {
	mutation := newCustomComponentMutation(c.config, OpUpdateOne, withCustomComponent(cc))
	return &CustomComponentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomComponentClient) UpdateOneID(id uint64) *CustomComponentUpdateOne {
	mutation := newCustomComponentMutation(c.config, OpUpdateOne, withCustomComponentID(id))
	return &CustomComponentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CustomComponent.
func (c *CustomComponentClient) Delete() *CustomComponentDelete {
	mutation := newCustomComponentMutation(c.config, OpDelete)
	return &CustomComponentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CustomComponentClient) DeleteOne(cc *CustomComponent) *CustomComponentDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CustomComponentClient) DeleteOneID(id uint64) *CustomComponentDeleteOne {
	builder := c.Delete().Where(customcomponent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomComponentDeleteOne{builder}
}

// Query returns a query builder for CustomComponent.
func (c *CustomComponentClient) Query() *CustomComponentQuery {
	return &CustomComponentQuery{
		config: c.config,
	}
}

// Get returns a CustomComponent entity by its id.
func (c *CustomComponentClient) Get(ctx context.Context, id uint64) (*CustomComponent, error) {
	return c.Query().Where(customcomponent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomComponentClient) GetX(ctx context.Context, id uint64) *CustomComponent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProps queries the props edge of a CustomComponent.
func (c *CustomComponentClient) QueryProps(cc *CustomComponent) *ComponentPropertyQuery {
	query := &ComponentPropertyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customcomponent.Table, customcomponent.FieldID, id),
			sqlgraph.To(componentproperty.Table, componentproperty.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customcomponent.PropsTable, customcomponent.PropsColumn),
		)
		fromV = sqlgraph.Neighbors(cc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomComponentClient) Hooks() []Hook {
	return c.hooks.CustomComponent
}

// GlobalTemplateClient is a client for the GlobalTemplate schema.
type GlobalTemplateClient struct {
	config
}

// NewGlobalTemplateClient returns a client for the GlobalTemplate from the given config.
func NewGlobalTemplateClient(c config) *GlobalTemplateClient {
	return &GlobalTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `globaltemplate.Hooks(f(g(h())))`.
func (c *GlobalTemplateClient) Use(hooks ...Hook) {
	c.hooks.GlobalTemplate = append(c.hooks.GlobalTemplate, hooks...)
}

// Create returns a create builder for GlobalTemplate.
func (c *GlobalTemplateClient) Create() *GlobalTemplateCreate {
	mutation := newGlobalTemplateMutation(c.config, OpCreate)
	return &GlobalTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GlobalTemplate entities.
func (c *GlobalTemplateClient) CreateBulk(builders ...*GlobalTemplateCreate) *GlobalTemplateCreateBulk {
	return &GlobalTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GlobalTemplate.
func (c *GlobalTemplateClient) Update() *GlobalTemplateUpdate {
	mutation := newGlobalTemplateMutation(c.config, OpUpdate)
	return &GlobalTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GlobalTemplateClient) UpdateOne(gt *GlobalTemplate) *GlobalTemplateUpdateOne {
	mutation := newGlobalTemplateMutation(c.config, OpUpdateOne, withGlobalTemplate(gt))
	return &GlobalTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GlobalTemplateClient) UpdateOneID(id uint64) *GlobalTemplateUpdateOne {
	mutation := newGlobalTemplateMutation(c.config, OpUpdateOne, withGlobalTemplateID(id))
	return &GlobalTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GlobalTemplate.
func (c *GlobalTemplateClient) Delete() *GlobalTemplateDelete {
	mutation := newGlobalTemplateMutation(c.config, OpDelete)
	return &GlobalTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GlobalTemplateClient) DeleteOne(gt *GlobalTemplate) *GlobalTemplateDeleteOne {
	return c.DeleteOneID(gt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GlobalTemplateClient) DeleteOneID(id uint64) *GlobalTemplateDeleteOne {
	builder := c.Delete().Where(globaltemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GlobalTemplateDeleteOne{builder}
}

// Query returns a query builder for GlobalTemplate.
func (c *GlobalTemplateClient) Query() *GlobalTemplateQuery {
	return &GlobalTemplateQuery{
		config: c.config,
	}
}

// Get returns a GlobalTemplate entity by its id.
func (c *GlobalTemplateClient) Get(ctx context.Context, id uint64) (*GlobalTemplate, error) {
	return c.Query().Where(globaltemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GlobalTemplateClient) GetX(ctx context.Context, id uint64) *GlobalTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GlobalTemplateClient) Hooks() []Hook {
	return c.hooks.GlobalTemplate
}

// ShopClient is a client for the Shop schema.
type ShopClient struct {
	config
}

// NewShopClient returns a client for the Shop from the given config.
func NewShopClient(c config) *ShopClient {
	return &ShopClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shop.Hooks(f(g(h())))`.
func (c *ShopClient) Use(hooks ...Hook) {
	c.hooks.Shop = append(c.hooks.Shop, hooks...)
}

// Create returns a create builder for Shop.
func (c *ShopClient) Create() *ShopCreate {
	mutation := newShopMutation(c.config, OpCreate)
	return &ShopCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Shop entities.
func (c *ShopClient) CreateBulk(builders ...*ShopCreate) *ShopCreateBulk {
	return &ShopCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Shop.
func (c *ShopClient) Update() *ShopUpdate {
	mutation := newShopMutation(c.config, OpUpdate)
	return &ShopUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShopClient) UpdateOne(s *Shop) *ShopUpdateOne {
	mutation := newShopMutation(c.config, OpUpdateOne, withShop(s))
	return &ShopUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShopClient) UpdateOneID(id uint64) *ShopUpdateOne {
	mutation := newShopMutation(c.config, OpUpdateOne, withShopID(id))
	return &ShopUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Shop.
func (c *ShopClient) Delete() *ShopDelete {
	mutation := newShopMutation(c.config, OpDelete)
	return &ShopDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShopClient) DeleteOne(s *Shop) *ShopDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShopClient) DeleteOneID(id uint64) *ShopDeleteOne {
	builder := c.Delete().Where(shop.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShopDeleteOne{builder}
}

// Query returns a query builder for Shop.
func (c *ShopClient) Query() *ShopQuery {
	return &ShopQuery{
		config: c.config,
	}
}

// Get returns a Shop entity by its id.
func (c *ShopClient) Get(ctx context.Context, id uint64) (*Shop, error) {
	return c.Query().Where(shop.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShopClient) GetX(ctx context.Context, id uint64) *Shop {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryThemes queries the themes edge of a Shop.
func (c *ShopClient) QueryThemes(s *Shop) *ThemeQuery {
	query := &ThemeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shop.Table, shop.FieldID, id),
			sqlgraph.To(theme.Table, theme.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shop.ThemesTable, shop.ThemesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryThemeTemplates queries the themeTemplates edge of a Shop.
func (c *ShopClient) QueryThemeTemplates(s *Shop) *ThemeTemplateQuery {
	query := &ThemeTemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shop.Table, shop.FieldID, id),
			sqlgraph.To(themetemplate.Table, themetemplate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shop.ThemeTemplatesTable, shop.ThemeTemplatesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShopClient) Hooks() []Hook {
	return c.hooks.Shop
}

// TemplateSectionClient is a client for the TemplateSection schema.
type TemplateSectionClient struct {
	config
}

// NewTemplateSectionClient returns a client for the TemplateSection from the given config.
func NewTemplateSectionClient(c config) *TemplateSectionClient {
	return &TemplateSectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `templatesection.Hooks(f(g(h())))`.
func (c *TemplateSectionClient) Use(hooks ...Hook) {
	c.hooks.TemplateSection = append(c.hooks.TemplateSection, hooks...)
}

// Create returns a create builder for TemplateSection.
func (c *TemplateSectionClient) Create() *TemplateSectionCreate {
	mutation := newTemplateSectionMutation(c.config, OpCreate)
	return &TemplateSectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TemplateSection entities.
func (c *TemplateSectionClient) CreateBulk(builders ...*TemplateSectionCreate) *TemplateSectionCreateBulk {
	return &TemplateSectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TemplateSection.
func (c *TemplateSectionClient) Update() *TemplateSectionUpdate {
	mutation := newTemplateSectionMutation(c.config, OpUpdate)
	return &TemplateSectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TemplateSectionClient) UpdateOne(ts *TemplateSection) *TemplateSectionUpdateOne {
	mutation := newTemplateSectionMutation(c.config, OpUpdateOne, withTemplateSection(ts))
	return &TemplateSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TemplateSectionClient) UpdateOneID(id uint64) *TemplateSectionUpdateOne {
	mutation := newTemplateSectionMutation(c.config, OpUpdateOne, withTemplateSectionID(id))
	return &TemplateSectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TemplateSection.
func (c *TemplateSectionClient) Delete() *TemplateSectionDelete {
	mutation := newTemplateSectionMutation(c.config, OpDelete)
	return &TemplateSectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TemplateSectionClient) DeleteOne(ts *TemplateSection) *TemplateSectionDeleteOne {
	return c.DeleteOneID(ts.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TemplateSectionClient) DeleteOneID(id uint64) *TemplateSectionDeleteOne {
	builder := c.Delete().Where(templatesection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TemplateSectionDeleteOne{builder}
}

// Query returns a query builder for TemplateSection.
func (c *TemplateSectionClient) Query() *TemplateSectionQuery {
	return &TemplateSectionQuery{
		config: c.config,
	}
}

// Get returns a TemplateSection entity by its id.
func (c *TemplateSectionClient) Get(ctx context.Context, id uint64) (*TemplateSection, error) {
	return c.Query().Where(templatesection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TemplateSectionClient) GetX(ctx context.Context, id uint64) *TemplateSection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRevisions queries the revisions edge of a TemplateSection.
func (c *TemplateSectionClient) QueryRevisions(ts *TemplateSection) *BkTemplateSectionQuery {
	query := &BkTemplateSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(templatesection.Table, templatesection.FieldID, id),
			sqlgraph.To(bktemplatesection.Table, bktemplatesection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, templatesection.RevisionsTable, templatesection.RevisionsColumn),
		)
		fromV = sqlgraph.Neighbors(ts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TemplateSectionClient) Hooks() []Hook {
	return c.hooks.TemplateSection
}

// TemplateSectionVersionClient is a client for the TemplateSectionVersion schema.
type TemplateSectionVersionClient struct {
	config
}

// NewTemplateSectionVersionClient returns a client for the TemplateSectionVersion from the given config.
func NewTemplateSectionVersionClient(c config) *TemplateSectionVersionClient {
	return &TemplateSectionVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `templatesectionversion.Hooks(f(g(h())))`.
func (c *TemplateSectionVersionClient) Use(hooks ...Hook) {
	c.hooks.TemplateSectionVersion = append(c.hooks.TemplateSectionVersion, hooks...)
}

// Create returns a create builder for TemplateSectionVersion.
func (c *TemplateSectionVersionClient) Create() *TemplateSectionVersionCreate {
	mutation := newTemplateSectionVersionMutation(c.config, OpCreate)
	return &TemplateSectionVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TemplateSectionVersion entities.
func (c *TemplateSectionVersionClient) CreateBulk(builders ...*TemplateSectionVersionCreate) *TemplateSectionVersionCreateBulk {
	return &TemplateSectionVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TemplateSectionVersion.
func (c *TemplateSectionVersionClient) Update() *TemplateSectionVersionUpdate {
	mutation := newTemplateSectionVersionMutation(c.config, OpUpdate)
	return &TemplateSectionVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TemplateSectionVersionClient) UpdateOne(tsv *TemplateSectionVersion) *TemplateSectionVersionUpdateOne {
	mutation := newTemplateSectionVersionMutation(c.config, OpUpdateOne, withTemplateSectionVersion(tsv))
	return &TemplateSectionVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TemplateSectionVersionClient) UpdateOneID(id uint64) *TemplateSectionVersionUpdateOne {
	mutation := newTemplateSectionVersionMutation(c.config, OpUpdateOne, withTemplateSectionVersionID(id))
	return &TemplateSectionVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TemplateSectionVersion.
func (c *TemplateSectionVersionClient) Delete() *TemplateSectionVersionDelete {
	mutation := newTemplateSectionVersionMutation(c.config, OpDelete)
	return &TemplateSectionVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TemplateSectionVersionClient) DeleteOne(tsv *TemplateSectionVersion) *TemplateSectionVersionDeleteOne {
	return c.DeleteOneID(tsv.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TemplateSectionVersionClient) DeleteOneID(id uint64) *TemplateSectionVersionDeleteOne {
	builder := c.Delete().Where(templatesectionversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TemplateSectionVersionDeleteOne{builder}
}

// Query returns a query builder for TemplateSectionVersion.
func (c *TemplateSectionVersionClient) Query() *TemplateSectionVersionQuery {
	return &TemplateSectionVersionQuery{
		config: c.config,
	}
}

// Get returns a TemplateSectionVersion entity by its id.
func (c *TemplateSectionVersionClient) Get(ctx context.Context, id uint64) (*TemplateSectionVersion, error) {
	return c.Query().Where(templatesectionversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TemplateSectionVersionClient) GetX(ctx context.Context, id uint64) *TemplateSectionVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBkTemplateSections queries the bkTemplateSections edge of a TemplateSectionVersion.
func (c *TemplateSectionVersionClient) QueryBkTemplateSections(tsv *TemplateSectionVersion) *BkTemplateSectionQuery {
	query := &BkTemplateSectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tsv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(templatesectionversion.Table, templatesectionversion.FieldID, id),
			sqlgraph.To(bktemplatesection.Table, bktemplatesection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, templatesectionversion.BkTemplateSectionsTable, templatesectionversion.BkTemplateSectionsColumn),
		)
		fromV = sqlgraph.Neighbors(tsv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TemplateSectionVersionClient) Hooks() []Hook {
	return c.hooks.TemplateSectionVersion
}

// ThemeClient is a client for the Theme schema.
type ThemeClient struct {
	config
}

// NewThemeClient returns a client for the Theme from the given config.
func NewThemeClient(c config) *ThemeClient {
	return &ThemeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `theme.Hooks(f(g(h())))`.
func (c *ThemeClient) Use(hooks ...Hook) {
	c.hooks.Theme = append(c.hooks.Theme, hooks...)
}

// Create returns a create builder for Theme.
func (c *ThemeClient) Create() *ThemeCreate {
	mutation := newThemeMutation(c.config, OpCreate)
	return &ThemeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Theme entities.
func (c *ThemeClient) CreateBulk(builders ...*ThemeCreate) *ThemeCreateBulk {
	return &ThemeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Theme.
func (c *ThemeClient) Update() *ThemeUpdate {
	mutation := newThemeMutation(c.config, OpUpdate)
	return &ThemeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ThemeClient) UpdateOne(t *Theme) *ThemeUpdateOne {
	mutation := newThemeMutation(c.config, OpUpdateOne, withTheme(t))
	return &ThemeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ThemeClient) UpdateOneID(id uint64) *ThemeUpdateOne {
	mutation := newThemeMutation(c.config, OpUpdateOne, withThemeID(id))
	return &ThemeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Theme.
func (c *ThemeClient) Delete() *ThemeDelete {
	mutation := newThemeMutation(c.config, OpDelete)
	return &ThemeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ThemeClient) DeleteOne(t *Theme) *ThemeDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ThemeClient) DeleteOneID(id uint64) *ThemeDeleteOne {
	builder := c.Delete().Where(theme.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ThemeDeleteOne{builder}
}

// Query returns a query builder for Theme.
func (c *ThemeClient) Query() *ThemeQuery {
	return &ThemeQuery{
		config: c.config,
	}
}

// Get returns a Theme entity by its id.
func (c *ThemeClient) Get(ctx context.Context, id uint64) (*Theme, error) {
	return c.Query().Where(theme.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ThemeClient) GetX(ctx context.Context, id uint64) *Theme {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryThemeTemplates queries the themeTemplates edge of a Theme.
func (c *ThemeClient) QueryThemeTemplates(t *Theme) *ThemeTemplateQuery {
	query := &ThemeTemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(theme.Table, theme.FieldID, id),
			sqlgraph.To(themetemplate.Table, themetemplate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, theme.ThemeTemplatesTable, theme.ThemeTemplatesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShop queries the shop edge of a Theme.
func (c *ThemeClient) QueryShop(t *Theme) *ShopQuery {
	query := &ShopQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(theme.Table, theme.FieldID, id),
			sqlgraph.To(shop.Table, shop.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, theme.ShopTable, theme.ShopColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ThemeClient) Hooks() []Hook {
	return c.hooks.Theme
}

// ThemeTemplateClient is a client for the ThemeTemplate schema.
type ThemeTemplateClient struct {
	config
}

// NewThemeTemplateClient returns a client for the ThemeTemplate from the given config.
func NewThemeTemplateClient(c config) *ThemeTemplateClient {
	return &ThemeTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `themetemplate.Hooks(f(g(h())))`.
func (c *ThemeTemplateClient) Use(hooks ...Hook) {
	c.hooks.ThemeTemplate = append(c.hooks.ThemeTemplate, hooks...)
}

// Create returns a create builder for ThemeTemplate.
func (c *ThemeTemplateClient) Create() *ThemeTemplateCreate {
	mutation := newThemeTemplateMutation(c.config, OpCreate)
	return &ThemeTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ThemeTemplate entities.
func (c *ThemeTemplateClient) CreateBulk(builders ...*ThemeTemplateCreate) *ThemeTemplateCreateBulk {
	return &ThemeTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ThemeTemplate.
func (c *ThemeTemplateClient) Update() *ThemeTemplateUpdate {
	mutation := newThemeTemplateMutation(c.config, OpUpdate)
	return &ThemeTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ThemeTemplateClient) UpdateOne(tt *ThemeTemplate) *ThemeTemplateUpdateOne {
	mutation := newThemeTemplateMutation(c.config, OpUpdateOne, withThemeTemplate(tt))
	return &ThemeTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ThemeTemplateClient) UpdateOneID(id uint64) *ThemeTemplateUpdateOne {
	mutation := newThemeTemplateMutation(c.config, OpUpdateOne, withThemeTemplateID(id))
	return &ThemeTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ThemeTemplate.
func (c *ThemeTemplateClient) Delete() *ThemeTemplateDelete {
	mutation := newThemeTemplateMutation(c.config, OpDelete)
	return &ThemeTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ThemeTemplateClient) DeleteOne(tt *ThemeTemplate) *ThemeTemplateDeleteOne {
	return c.DeleteOneID(tt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ThemeTemplateClient) DeleteOneID(id uint64) *ThemeTemplateDeleteOne {
	builder := c.Delete().Where(themetemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ThemeTemplateDeleteOne{builder}
}

// Query returns a query builder for ThemeTemplate.
func (c *ThemeTemplateClient) Query() *ThemeTemplateQuery {
	return &ThemeTemplateQuery{
		config: c.config,
	}
}

// Get returns a ThemeTemplate entity by its id.
func (c *ThemeTemplateClient) Get(ctx context.Context, id uint64) (*ThemeTemplate, error) {
	return c.Query().Where(themetemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ThemeTemplateClient) GetX(ctx context.Context, id uint64) *ThemeTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryShop queries the shop edge of a ThemeTemplate.
func (c *ThemeTemplateClient) QueryShop(tt *ThemeTemplate) *ShopQuery {
	query := &ShopQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(themetemplate.Table, themetemplate.FieldID, id),
			sqlgraph.To(shop.Table, shop.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, themetemplate.ShopTable, themetemplate.ShopColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTheme queries the theme edge of a ThemeTemplate.
func (c *ThemeTemplateClient) QueryTheme(tt *ThemeTemplate) *ThemeQuery {
	query := &ThemeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(themetemplate.Table, themetemplate.FieldID, id),
			sqlgraph.To(theme.Table, theme.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, themetemplate.ThemeTable, themetemplate.ThemeColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ThemeTemplateClient) Hooks() []Hook {
	return c.hooks.ThemeTemplate
}

// TodoClient is a client for the Todo schema.
type TodoClient struct {
	config
}

// NewTodoClient returns a client for the Todo from the given config.
func NewTodoClient(c config) *TodoClient {
	return &TodoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `todo.Hooks(f(g(h())))`.
func (c *TodoClient) Use(hooks ...Hook) {
	c.hooks.Todo = append(c.hooks.Todo, hooks...)
}

// Create returns a create builder for Todo.
func (c *TodoClient) Create() *TodoCreate {
	mutation := newTodoMutation(c.config, OpCreate)
	return &TodoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Todo entities.
func (c *TodoClient) CreateBulk(builders ...*TodoCreate) *TodoCreateBulk {
	return &TodoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Todo.
func (c *TodoClient) Update() *TodoUpdate {
	mutation := newTodoMutation(c.config, OpUpdate)
	return &TodoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TodoClient) UpdateOne(t *Todo) *TodoUpdateOne {
	mutation := newTodoMutation(c.config, OpUpdateOne, withTodo(t))
	return &TodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TodoClient) UpdateOneID(id uint64) *TodoUpdateOne {
	mutation := newTodoMutation(c.config, OpUpdateOne, withTodoID(id))
	return &TodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Todo.
func (c *TodoClient) Delete() *TodoDelete {
	mutation := newTodoMutation(c.config, OpDelete)
	return &TodoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TodoClient) DeleteOne(t *Todo) *TodoDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TodoClient) DeleteOneID(id uint64) *TodoDeleteOne {
	builder := c.Delete().Where(todo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TodoDeleteOne{builder}
}

// Query returns a query builder for Todo.
func (c *TodoClient) Query() *TodoQuery {
	return &TodoQuery{
		config: c.config,
	}
}

// Get returns a Todo entity by its id.
func (c *TodoClient) Get(ctx context.Context, id uint64) (*Todo, error) {
	return c.Query().Where(todo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TodoClient) GetX(ctx context.Context, id uint64) *Todo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChildren queries the children edge of a Todo.
func (c *TodoClient) QueryChildren(t *Todo) *TodoQuery {
	query := &TodoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(todo.Table, todo.FieldID, id),
			sqlgraph.To(todo.Table, todo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, todo.ChildrenTable, todo.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Todo.
func (c *TodoClient) QueryParent(t *Todo) *TodoQuery {
	query := &TodoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(todo.Table, todo.FieldID, id),
			sqlgraph.To(todo.Table, todo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, todo.ParentTable, todo.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TodoClient) Hooks() []Hook {
	return c.hooks.Todo
}
