// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (bts *BkTemplateSection) TemplateSection(ctx context.Context) (*TemplateSection, error) {
	result, err := bts.Edges.TemplateSectionOrErr()
	if IsNotLoaded(err) {
		result, err = bts.QueryTemplateSection().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (bts *BkTemplateSection) Version(ctx context.Context) (*TemplateSectionVersion, error) {
	result, err := bts.Edges.VersionOrErr()
	if IsNotLoaded(err) {
		result, err = bts.QueryVersion().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cp *ComponentProperty) Component(ctx context.Context) (*CustomComponent, error) {
	result, err := cp.Edges.ComponentOrErr()
	if IsNotLoaded(err) {
		result, err = cp.QueryComponent().Only(ctx)
	}
	return result, err
}

func (cc *CustomComponent) Props(ctx context.Context) ([]*ComponentProperty, error) {
	result, err := cc.Edges.PropsOrErr()
	if IsNotLoaded(err) {
		result, err = cc.QueryProps().All(ctx)
	}
	return result, err
}

func (s *Shop) Themes(ctx context.Context) ([]*Theme, error) {
	result, err := s.Edges.ThemesOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryThemes().All(ctx)
	}
	return result, err
}

func (s *Shop) ThemeTemplates(ctx context.Context) ([]*ThemeTemplate, error) {
	result, err := s.Edges.ThemeTemplatesOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryThemeTemplates().All(ctx)
	}
	return result, err
}

func (ts *TemplateSection) Revisions(ctx context.Context) ([]*BkTemplateSection, error) {
	result, err := ts.Edges.RevisionsOrErr()
	if IsNotLoaded(err) {
		result, err = ts.QueryRevisions().All(ctx)
	}
	return result, err
}

func (tsv *TemplateSectionVersion) BkTemplateSections(ctx context.Context) ([]*BkTemplateSection, error) {
	result, err := tsv.Edges.BkTemplateSectionsOrErr()
	if IsNotLoaded(err) {
		result, err = tsv.QueryBkTemplateSections().All(ctx)
	}
	return result, err
}

func (t *Theme) ThemeTemplates(ctx context.Context) ([]*ThemeTemplate, error) {
	result, err := t.Edges.ThemeTemplatesOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryThemeTemplates().All(ctx)
	}
	return result, err
}

func (t *Theme) Shop(ctx context.Context) (*Shop, error) {
	result, err := t.Edges.ShopOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryShop().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (tt *ThemeTemplate) Shop(ctx context.Context) (*Shop, error) {
	result, err := tt.Edges.ShopOrErr()
	if IsNotLoaded(err) {
		result, err = tt.QueryShop().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (tt *ThemeTemplate) Theme(ctx context.Context) (*Theme, error) {
	result, err := tt.Edges.ThemeOrErr()
	if IsNotLoaded(err) {
		result, err = tt.QueryTheme().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Todo) Children(ctx context.Context) ([]*Todo, error) {
	result, err := t.Edges.ChildrenOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryChildren().All(ctx)
	}
	return result, err
}

func (t *Todo) Parent(ctx context.Context) (*Todo, error) {
	result, err := t.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}
