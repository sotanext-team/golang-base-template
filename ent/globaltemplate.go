// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/globaltemplate"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// GlobalTemplate is the model entity for the GlobalTemplate schema.
type GlobalTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deletedAt"`
	// ShopID holds the value of the "shop_id" field.
	ShopID uint64 `json:"shopId"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ViewCount holds the value of the "view_count" field.
	ViewCount int `json:"viewCount"`
	// InstallCount holds the value of the "install_count" field.
	InstallCount int `json:"installCount"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GlobalTemplate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case globaltemplate.FieldID, globaltemplate.FieldShopID, globaltemplate.FieldViewCount, globaltemplate.FieldInstallCount:
			values[i] = new(sql.NullInt64)
		case globaltemplate.FieldName:
			values[i] = new(sql.NullString)
		case globaltemplate.FieldCreatedAt, globaltemplate.FieldUpdatedAt, globaltemplate.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GlobalTemplate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GlobalTemplate fields.
func (gt *GlobalTemplate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case globaltemplate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gt.ID = uint64(value.Int64)
		case globaltemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gt.CreatedAt = value.Time
			}
		case globaltemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gt.UpdatedAt = value.Time
			}
		case globaltemplate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gt.DeletedAt = new(time.Time)
				*gt.DeletedAt = value.Time
			}
		case globaltemplate.FieldShopID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shop_id", values[i])
			} else if value.Valid {
				gt.ShopID = uint64(value.Int64)
			}
		case globaltemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gt.Name = value.String
			}
		case globaltemplate.FieldViewCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field view_count", values[i])
			} else if value.Valid {
				gt.ViewCount = int(value.Int64)
			}
		case globaltemplate.FieldInstallCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field install_count", values[i])
			} else if value.Valid {
				gt.InstallCount = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GlobalTemplate.
// Note that you need to call GlobalTemplate.Unwrap() before calling this method if this GlobalTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (gt *GlobalTemplate) Update() *GlobalTemplateUpdateOne {
	return (&GlobalTemplateClient{config: gt.config}).UpdateOne(gt)
}

// Unwrap unwraps the GlobalTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gt *GlobalTemplate) Unwrap() *GlobalTemplate {
	tx, ok := gt.config.driver.(*txDriver)
	if !ok {
		panic("ent: GlobalTemplate is not a transactional entity")
	}
	gt.config.driver = tx.drv
	return gt
}

// String implements the fmt.Stringer.
func (gt *GlobalTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("GlobalTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v", gt.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(gt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(gt.UpdatedAt.Format(time.ANSIC))
	if v := gt.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", shop_id=")
	builder.WriteString(fmt.Sprintf("%v", gt.ShopID))
	builder.WriteString(", name=")
	builder.WriteString(gt.Name)
	builder.WriteString(", view_count=")
	builder.WriteString(fmt.Sprintf("%v", gt.ViewCount))
	builder.WriteString(", install_count=")
	builder.WriteString(fmt.Sprintf("%v", gt.InstallCount))
	builder.WriteByte(')')
	return builder.String()
}

// GlobalTemplates is a parsable slice of GlobalTemplate.
type GlobalTemplates []*GlobalTemplate

func (gt GlobalTemplates) config(cfg config) {
	for _i := range gt {
		gt[_i].config = cfg
	}
}
