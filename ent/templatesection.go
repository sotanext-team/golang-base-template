// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/templatesection"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TemplateSection is the model entity for the TemplateSection schema.
type TemplateSection struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deletedAt"`
	// ShopID holds the value of the "shop_id" field.
	ShopID uint64 `json:"shopId"`
	// GlobalSectionID holds the value of the "global_section_id" field.
	GlobalSectionID uint64 `json:"globalSectionId"`
	// ThemeTemplateID holds the value of the "theme_template_id" field.
	ThemeTemplateID uint64 `json:"themeTemplateId"`
	// CurrentVersionID holds the value of the "current_version_id" field.
	CurrentVersionID uint64 `json:"currentVersionId"`
	// Cid holds the value of the "cid" field.
	Cid string `json:"cid"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// Area holds the value of the "area" field.
	Area templatesection.Area `json:"area"`
	// Component holds the value of the "component" field.
	Component string `json:"component"`
	// Position holds the value of the "position" field.
	Position int `json:"position"`
	// Display holds the value of the "display" field.
	Display bool `json:"display"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TemplateSectionQuery when eager-loading is set.
	Edges TemplateSectionEdges `json:"edges"`
}

// TemplateSectionEdges holds the relations/edges for other nodes in the graph.
type TemplateSectionEdges struct {
	// Revisions holds the value of the revisions edge.
	Revisions []*BkTemplateSection `json:"revisions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RevisionsOrErr returns the Revisions value or an error if the edge
// was not loaded in eager-loading.
func (e TemplateSectionEdges) RevisionsOrErr() ([]*BkTemplateSection, error) {
	if e.loadedTypes[0] {
		return e.Revisions, nil
	}
	return nil, &NotLoadedError{edge: "revisions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TemplateSection) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case templatesection.FieldDisplay:
			values[i] = new(sql.NullBool)
		case templatesection.FieldID, templatesection.FieldShopID, templatesection.FieldGlobalSectionID, templatesection.FieldThemeTemplateID, templatesection.FieldCurrentVersionID, templatesection.FieldPosition:
			values[i] = new(sql.NullInt64)
		case templatesection.FieldCid, templatesection.FieldName, templatesection.FieldArea, templatesection.FieldComponent:
			values[i] = new(sql.NullString)
		case templatesection.FieldCreatedAt, templatesection.FieldUpdatedAt, templatesection.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TemplateSection", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TemplateSection fields.
func (ts *TemplateSection) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case templatesection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ts.ID = uint64(value.Int64)
		case templatesection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ts.CreatedAt = value.Time
			}
		case templatesection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ts.UpdatedAt = value.Time
			}
		case templatesection.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ts.DeletedAt = new(time.Time)
				*ts.DeletedAt = value.Time
			}
		case templatesection.FieldShopID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shop_id", values[i])
			} else if value.Valid {
				ts.ShopID = uint64(value.Int64)
			}
		case templatesection.FieldGlobalSectionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field global_section_id", values[i])
			} else if value.Valid {
				ts.GlobalSectionID = uint64(value.Int64)
			}
		case templatesection.FieldThemeTemplateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field theme_template_id", values[i])
			} else if value.Valid {
				ts.ThemeTemplateID = uint64(value.Int64)
			}
		case templatesection.FieldCurrentVersionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_version_id", values[i])
			} else if value.Valid {
				ts.CurrentVersionID = uint64(value.Int64)
			}
		case templatesection.FieldCid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cid", values[i])
			} else if value.Valid {
				ts.Cid = value.String
			}
		case templatesection.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ts.Name = value.String
			}
		case templatesection.FieldArea:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field area", values[i])
			} else if value.Valid {
				ts.Area = templatesection.Area(value.String)
			}
		case templatesection.FieldComponent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field component", values[i])
			} else if value.Valid {
				ts.Component = value.String
			}
		case templatesection.FieldPosition:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				ts.Position = int(value.Int64)
			}
		case templatesection.FieldDisplay:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field display", values[i])
			} else if value.Valid {
				ts.Display = value.Bool
			}
		}
	}
	return nil
}

// QueryRevisions queries the "revisions" edge of the TemplateSection entity.
func (ts *TemplateSection) QueryRevisions() *BkTemplateSectionQuery {
	return (&TemplateSectionClient{config: ts.config}).QueryRevisions(ts)
}

// Update returns a builder for updating this TemplateSection.
// Note that you need to call TemplateSection.Unwrap() before calling this method if this TemplateSection
// was returned from a transaction, and the transaction was committed or rolled back.
func (ts *TemplateSection) Update() *TemplateSectionUpdateOne {
	return (&TemplateSectionClient{config: ts.config}).UpdateOne(ts)
}

// Unwrap unwraps the TemplateSection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ts *TemplateSection) Unwrap() *TemplateSection {
	tx, ok := ts.config.driver.(*txDriver)
	if !ok {
		panic("ent: TemplateSection is not a transactional entity")
	}
	ts.config.driver = tx.drv
	return ts
}

// String implements the fmt.Stringer.
func (ts *TemplateSection) String() string {
	var builder strings.Builder
	builder.WriteString("TemplateSection(")
	builder.WriteString(fmt.Sprintf("id=%v", ts.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ts.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ts.UpdatedAt.Format(time.ANSIC))
	if v := ts.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", shop_id=")
	builder.WriteString(fmt.Sprintf("%v", ts.ShopID))
	builder.WriteString(", global_section_id=")
	builder.WriteString(fmt.Sprintf("%v", ts.GlobalSectionID))
	builder.WriteString(", theme_template_id=")
	builder.WriteString(fmt.Sprintf("%v", ts.ThemeTemplateID))
	builder.WriteString(", current_version_id=")
	builder.WriteString(fmt.Sprintf("%v", ts.CurrentVersionID))
	builder.WriteString(", cid=")
	builder.WriteString(ts.Cid)
	builder.WriteString(", name=")
	builder.WriteString(ts.Name)
	builder.WriteString(", area=")
	builder.WriteString(fmt.Sprintf("%v", ts.Area))
	builder.WriteString(", component=")
	builder.WriteString(ts.Component)
	builder.WriteString(", position=")
	builder.WriteString(fmt.Sprintf("%v", ts.Position))
	builder.WriteString(", display=")
	builder.WriteString(fmt.Sprintf("%v", ts.Display))
	builder.WriteByte(')')
	return builder.String()
}

// TemplateSections is a parsable slice of TemplateSection.
type TemplateSections []*TemplateSection

func (ts TemplateSections) config(cfg config) {
	for _i := range ts {
		ts[_i].config = cfg
	}
}
