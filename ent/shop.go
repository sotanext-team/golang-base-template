// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/shop"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Shop is the model entity for the Shop schema.
type Shop struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deletedAt"`
	// ShopName holds the value of the "shop_name" field.
	ShopName string `json:"shop_name,omitempty"`
	// DefaultDomain holds the value of the "default_domain" field.
	DefaultDomain string `json:"default_domain,omitempty"`
	// CustomDomain holds the value of the "custom_domain" field.
	CustomDomain string `json:"custom_domain,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShopQuery when eager-loading is set.
	Edges ShopEdges `json:"edges"`
}

// ShopEdges holds the relations/edges for other nodes in the graph.
type ShopEdges struct {
	// Themes holds the value of the themes edge.
	Themes []*Theme `json:"themes,omitempty"`
	// ThemeTemplates holds the value of the themeTemplates edge.
	ThemeTemplates []*ThemeTemplate `json:"themeTemplates,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ThemesOrErr returns the Themes value or an error if the edge
// was not loaded in eager-loading.
func (e ShopEdges) ThemesOrErr() ([]*Theme, error) {
	if e.loadedTypes[0] {
		return e.Themes, nil
	}
	return nil, &NotLoadedError{edge: "themes"}
}

// ThemeTemplatesOrErr returns the ThemeTemplates value or an error if the edge
// was not loaded in eager-loading.
func (e ShopEdges) ThemeTemplatesOrErr() ([]*ThemeTemplate, error) {
	if e.loadedTypes[1] {
		return e.ThemeTemplates, nil
	}
	return nil, &NotLoadedError{edge: "themeTemplates"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shop) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shop.FieldID:
			values[i] = new(sql.NullInt64)
		case shop.FieldShopName, shop.FieldDefaultDomain, shop.FieldCustomDomain:
			values[i] = new(sql.NullString)
		case shop.FieldCreatedAt, shop.FieldUpdatedAt, shop.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Shop", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shop fields.
func (s *Shop) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shop.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint64(value.Int64)
		case shop.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case shop.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case shop.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = new(time.Time)
				*s.DeletedAt = value.Time
			}
		case shop.FieldShopName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shop_name", values[i])
			} else if value.Valid {
				s.ShopName = value.String
			}
		case shop.FieldDefaultDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_domain", values[i])
			} else if value.Valid {
				s.DefaultDomain = value.String
			}
		case shop.FieldCustomDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field custom_domain", values[i])
			} else if value.Valid {
				s.CustomDomain = value.String
			}
		}
	}
	return nil
}

// QueryThemes queries the "themes" edge of the Shop entity.
func (s *Shop) QueryThemes() *ThemeQuery {
	return (&ShopClient{config: s.config}).QueryThemes(s)
}

// QueryThemeTemplates queries the "themeTemplates" edge of the Shop entity.
func (s *Shop) QueryThemeTemplates() *ThemeTemplateQuery {
	return (&ShopClient{config: s.config}).QueryThemeTemplates(s)
}

// Update returns a builder for updating this Shop.
// Note that you need to call Shop.Unwrap() before calling this method if this Shop
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shop) Update() *ShopUpdateOne {
	return (&ShopClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Shop entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Shop) Unwrap() *Shop {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shop is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shop) String() string {
	var builder strings.Builder
	builder.WriteString("Shop(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	if v := s.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", shop_name=")
	builder.WriteString(s.ShopName)
	builder.WriteString(", default_domain=")
	builder.WriteString(s.DefaultDomain)
	builder.WriteString(", custom_domain=")
	builder.WriteString(s.CustomDomain)
	builder.WriteByte(')')
	return builder.String()
}

// Shops is a parsable slice of Shop.
type Shops []*Shop

func (s Shops) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
