// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/shop"
	"app-api/ent/theme"
	"app-api/ent/themetemplate"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ThemeTemplate is the model entity for the ThemeTemplate schema.
type ThemeTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deletedAt"`
	// ShopID holds the value of the "shop_id" field.
	ShopID uint64 `json:"shopId"`
	// ThemeID holds the value of the "theme_id" field.
	ThemeID uint64 `json:"themeId"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// PageType holds the value of the "page_type" field.
	PageType themetemplate.PageType `json:"pageType"`
	// Default holds the value of the "default" field.
	Default bool `json:"default"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ThemeTemplateQuery when eager-loading is set.
	Edges ThemeTemplateEdges `json:"edges"`
}

// ThemeTemplateEdges holds the relations/edges for other nodes in the graph.
type ThemeTemplateEdges struct {
	// Shop holds the value of the shop edge.
	Shop *Shop `json:"shop,omitempty"`
	// Theme holds the value of the theme edge.
	Theme *Theme `json:"theme,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ShopOrErr returns the Shop value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThemeTemplateEdges) ShopOrErr() (*Shop, error) {
	if e.loadedTypes[0] {
		if e.Shop == nil {
			// The edge shop was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shop.Label}
		}
		return e.Shop, nil
	}
	return nil, &NotLoadedError{edge: "shop"}
}

// ThemeOrErr returns the Theme value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThemeTemplateEdges) ThemeOrErr() (*Theme, error) {
	if e.loadedTypes[1] {
		if e.Theme == nil {
			// The edge theme was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: theme.Label}
		}
		return e.Theme, nil
	}
	return nil, &NotLoadedError{edge: "theme"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ThemeTemplate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case themetemplate.FieldDefault:
			values[i] = new(sql.NullBool)
		case themetemplate.FieldID, themetemplate.FieldShopID, themetemplate.FieldThemeID:
			values[i] = new(sql.NullInt64)
		case themetemplate.FieldName, themetemplate.FieldPageType:
			values[i] = new(sql.NullString)
		case themetemplate.FieldCreatedAt, themetemplate.FieldUpdatedAt, themetemplate.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ThemeTemplate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ThemeTemplate fields.
func (tt *ThemeTemplate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case themetemplate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tt.ID = uint64(value.Int64)
		case themetemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tt.CreatedAt = value.Time
			}
		case themetemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tt.UpdatedAt = value.Time
			}
		case themetemplate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tt.DeletedAt = new(time.Time)
				*tt.DeletedAt = value.Time
			}
		case themetemplate.FieldShopID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shop_id", values[i])
			} else if value.Valid {
				tt.ShopID = uint64(value.Int64)
			}
		case themetemplate.FieldThemeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field theme_id", values[i])
			} else if value.Valid {
				tt.ThemeID = uint64(value.Int64)
			}
		case themetemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tt.Name = value.String
			}
		case themetemplate.FieldPageType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field page_type", values[i])
			} else if value.Valid {
				tt.PageType = themetemplate.PageType(value.String)
			}
		case themetemplate.FieldDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field default", values[i])
			} else if value.Valid {
				tt.Default = value.Bool
			}
		}
	}
	return nil
}

// QueryShop queries the "shop" edge of the ThemeTemplate entity.
func (tt *ThemeTemplate) QueryShop() *ShopQuery {
	return (&ThemeTemplateClient{config: tt.config}).QueryShop(tt)
}

// QueryTheme queries the "theme" edge of the ThemeTemplate entity.
func (tt *ThemeTemplate) QueryTheme() *ThemeQuery {
	return (&ThemeTemplateClient{config: tt.config}).QueryTheme(tt)
}

// Update returns a builder for updating this ThemeTemplate.
// Note that you need to call ThemeTemplate.Unwrap() before calling this method if this ThemeTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *ThemeTemplate) Update() *ThemeTemplateUpdateOne {
	return (&ThemeTemplateClient{config: tt.config}).UpdateOne(tt)
}

// Unwrap unwraps the ThemeTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *ThemeTemplate) Unwrap() *ThemeTemplate {
	tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ThemeTemplate is not a transactional entity")
	}
	tt.config.driver = tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *ThemeTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("ThemeTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v", tt.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(tt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(tt.UpdatedAt.Format(time.ANSIC))
	if v := tt.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", shop_id=")
	builder.WriteString(fmt.Sprintf("%v", tt.ShopID))
	builder.WriteString(", theme_id=")
	builder.WriteString(fmt.Sprintf("%v", tt.ThemeID))
	builder.WriteString(", name=")
	builder.WriteString(tt.Name)
	builder.WriteString(", page_type=")
	builder.WriteString(fmt.Sprintf("%v", tt.PageType))
	builder.WriteString(", default=")
	builder.WriteString(fmt.Sprintf("%v", tt.Default))
	builder.WriteByte(')')
	return builder.String()
}

// ThemeTemplates is a parsable slice of ThemeTemplate.
type ThemeTemplates []*ThemeTemplate

func (tt ThemeTemplates) config(cfg config) {
	for _i := range tt {
		tt[_i].config = cfg
	}
}
