// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/componentproperty"
	"app-api/ent/customcomponent"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomComponentCreate is the builder for creating a CustomComponent entity.
type CustomComponentCreate struct {
	config
	mutation *CustomComponentMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ccc *CustomComponentCreate) SetCreatedAt(t time.Time) *CustomComponentCreate {
	ccc.mutation.SetCreatedAt(t)
	return ccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccc *CustomComponentCreate) SetNillableCreatedAt(t *time.Time) *CustomComponentCreate {
	if t != nil {
		ccc.SetCreatedAt(*t)
	}
	return ccc
}

// SetUpdatedAt sets the "updated_at" field.
func (ccc *CustomComponentCreate) SetUpdatedAt(t time.Time) *CustomComponentCreate {
	ccc.mutation.SetUpdatedAt(t)
	return ccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccc *CustomComponentCreate) SetNillableUpdatedAt(t *time.Time) *CustomComponentCreate {
	if t != nil {
		ccc.SetUpdatedAt(*t)
	}
	return ccc
}

// SetShopID sets the "shop_id" field.
func (ccc *CustomComponentCreate) SetShopID(u uint64) *CustomComponentCreate {
	ccc.mutation.SetShopID(u)
	return ccc
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (ccc *CustomComponentCreate) SetNillableShopID(u *uint64) *CustomComponentCreate {
	if u != nil {
		ccc.SetShopID(*u)
	}
	return ccc
}

// SetCreatedBy sets the "created_by" field.
func (ccc *CustomComponentCreate) SetCreatedBy(u uint64) *CustomComponentCreate {
	ccc.mutation.SetCreatedBy(u)
	return ccc
}

// SetName sets the "name" field.
func (ccc *CustomComponentCreate) SetName(s string) *CustomComponentCreate {
	ccc.mutation.SetName(s)
	return ccc
}

// SetHandle sets the "handle" field.
func (ccc *CustomComponentCreate) SetHandle(s string) *CustomComponentCreate {
	ccc.mutation.SetHandle(s)
	return ccc
}

// SetContent sets the "content" field.
func (ccc *CustomComponentCreate) SetContent(s string) *CustomComponentCreate {
	ccc.mutation.SetContent(s)
	return ccc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ccc *CustomComponentCreate) SetNillableContent(s *string) *CustomComponentCreate {
	if s != nil {
		ccc.SetContent(*s)
	}
	return ccc
}

// SetDistURL sets the "dist_url" field.
func (ccc *CustomComponentCreate) SetDistURL(s string) *CustomComponentCreate {
	ccc.mutation.SetDistURL(s)
	return ccc
}

// SetNillableDistURL sets the "dist_url" field if the given value is not nil.
func (ccc *CustomComponentCreate) SetNillableDistURL(s *string) *CustomComponentCreate {
	if s != nil {
		ccc.SetDistURL(*s)
	}
	return ccc
}

// SetIsDraft sets the "is_draft" field.
func (ccc *CustomComponentCreate) SetIsDraft(b bool) *CustomComponentCreate {
	ccc.mutation.SetIsDraft(b)
	return ccc
}

// SetNillableIsDraft sets the "is_draft" field if the given value is not nil.
func (ccc *CustomComponentCreate) SetNillableIsDraft(b *bool) *CustomComponentCreate {
	if b != nil {
		ccc.SetIsDraft(*b)
	}
	return ccc
}

// SetEntryFileName sets the "entry_file_name" field.
func (ccc *CustomComponentCreate) SetEntryFileName(s string) *CustomComponentCreate {
	ccc.mutation.SetEntryFileName(s)
	return ccc
}

// SetNillableEntryFileName sets the "entry_file_name" field if the given value is not nil.
func (ccc *CustomComponentCreate) SetNillableEntryFileName(s *string) *CustomComponentCreate {
	if s != nil {
		ccc.SetEntryFileName(*s)
	}
	return ccc
}

// SetSessionID sets the "session_id" field.
func (ccc *CustomComponentCreate) SetSessionID(u uint64) *CustomComponentCreate {
	ccc.mutation.SetSessionID(u)
	return ccc
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (ccc *CustomComponentCreate) SetNillableSessionID(u *uint64) *CustomComponentCreate {
	if u != nil {
		ccc.SetSessionID(*u)
	}
	return ccc
}

// SetID sets the "id" field.
func (ccc *CustomComponentCreate) SetID(u uint64) *CustomComponentCreate {
	ccc.mutation.SetID(u)
	return ccc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ccc *CustomComponentCreate) SetNillableID(u *uint64) *CustomComponentCreate {
	if u != nil {
		ccc.SetID(*u)
	}
	return ccc
}

// AddPropIDs adds the "props" edge to the ComponentProperty entity by IDs.
func (ccc *CustomComponentCreate) AddPropIDs(ids ...uint64) *CustomComponentCreate {
	ccc.mutation.AddPropIDs(ids...)
	return ccc
}

// AddProps adds the "props" edges to the ComponentProperty entity.
func (ccc *CustomComponentCreate) AddProps(c ...*ComponentProperty) *CustomComponentCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccc.AddPropIDs(ids...)
}

// Mutation returns the CustomComponentMutation object of the builder.
func (ccc *CustomComponentCreate) Mutation() *CustomComponentMutation {
	return ccc.mutation
}

// Save creates the CustomComponent in the database.
func (ccc *CustomComponentCreate) Save(ctx context.Context) (*CustomComponent, error) {
	var (
		err  error
		node *CustomComponent
	)
	ccc.defaults()
	if len(ccc.hooks) == 0 {
		if err = ccc.check(); err != nil {
			return nil, err
		}
		node, err = ccc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomComponentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccc.check(); err != nil {
				return nil, err
			}
			ccc.mutation = mutation
			if node, err = ccc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ccc.hooks) - 1; i >= 0; i-- {
			if ccc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CustomComponentCreate) SaveX(ctx context.Context) *CustomComponent {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CustomComponentCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CustomComponentCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *CustomComponentCreate) defaults() {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		v := customcomponent.DefaultCreatedAt()
		ccc.mutation.SetCreatedAt(v)
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		v := customcomponent.DefaultUpdatedAt()
		ccc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ccc.mutation.IsDraft(); !ok {
		v := customcomponent.DefaultIsDraft
		ccc.mutation.SetIsDraft(v)
	}
	if _, ok := ccc.mutation.ID(); !ok {
		v := customcomponent.DefaultID()
		ccc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CustomComponentCreate) check() error {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := ccc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "created_by"`)}
	}
	if _, ok := ccc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := ccc.mutation.Handle(); !ok {
		return &ValidationError{Name: "handle", err: errors.New(`ent: missing required field "handle"`)}
	}
	return nil
}

func (ccc *CustomComponentCreate) sqlSave(ctx context.Context) (*CustomComponent, error) {
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (ccc *CustomComponentCreate) createSpec() (*CustomComponent, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomComponent{config: ccc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: customcomponent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: customcomponent.FieldID,
			},
		}
	)
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customcomponent.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ccc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customcomponent.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ccc.mutation.ShopID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: customcomponent.FieldShopID,
		})
		_node.ShopID = &value
	}
	if value, ok := ccc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: customcomponent.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := ccc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customcomponent.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ccc.mutation.Handle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customcomponent.FieldHandle,
		})
		_node.Handle = value
	}
	if value, ok := ccc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customcomponent.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := ccc.mutation.DistURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customcomponent.FieldDistURL,
		})
		_node.DistURL = &value
	}
	if value, ok := ccc.mutation.IsDraft(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: customcomponent.FieldIsDraft,
		})
		_node.IsDraft = value
	}
	if value, ok := ccc.mutation.EntryFileName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customcomponent.FieldEntryFileName,
		})
		_node.EntryFileName = value
	}
	if value, ok := ccc.mutation.SessionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: customcomponent.FieldSessionID,
		})
		_node.SessionID = &value
	}
	if nodes := ccc.mutation.PropsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customcomponent.PropsTable,
			Columns: []string{customcomponent.PropsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: componentproperty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CustomComponentCreateBulk is the builder for creating many CustomComponent entities in bulk.
type CustomComponentCreateBulk struct {
	config
	builders []*CustomComponentCreate
}

// Save creates the CustomComponent entities in the database.
func (cccb *CustomComponentCreateBulk) Save(ctx context.Context) ([]*CustomComponent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CustomComponent, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomComponentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CustomComponentCreateBulk) SaveX(ctx context.Context) []*CustomComponent {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CustomComponentCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CustomComponentCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}
