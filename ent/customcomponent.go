// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/customcomponent"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// CustomComponent is the model entity for the CustomComponent schema.
type CustomComponent struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// ShopID holds the value of the "shop_id" field.
	ShopID *uint64 `json:"shopID"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uint64 `json:"createdBy"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Handle holds the value of the "handle" field.
	Handle string `json:"handle,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// DistURL holds the value of the "dist_url" field.
	DistURL *string `json:"distURL"`
	// IsDraft holds the value of the "is_draft" field.
	IsDraft bool `json:"isDraft"`
	// EntryFileName holds the value of the "entry_file_name" field.
	EntryFileName string `json:"entryFileName"`
	// SessionID holds the value of the "session_id" field.
	SessionID *uint64 `json:"sessionID"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomComponentQuery when eager-loading is set.
	Edges CustomComponentEdges `json:"edges"`
}

// CustomComponentEdges holds the relations/edges for other nodes in the graph.
type CustomComponentEdges struct {
	// Props holds the value of the props edge.
	Props []*ComponentProperty `json:"props,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PropsOrErr returns the Props value or an error if the edge
// was not loaded in eager-loading.
func (e CustomComponentEdges) PropsOrErr() ([]*ComponentProperty, error) {
	if e.loadedTypes[0] {
		return e.Props, nil
	}
	return nil, &NotLoadedError{edge: "props"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomComponent) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case customcomponent.FieldIsDraft:
			values[i] = new(sql.NullBool)
		case customcomponent.FieldID, customcomponent.FieldShopID, customcomponent.FieldCreatedBy, customcomponent.FieldSessionID:
			values[i] = new(sql.NullInt64)
		case customcomponent.FieldName, customcomponent.FieldHandle, customcomponent.FieldContent, customcomponent.FieldDistURL, customcomponent.FieldEntryFileName:
			values[i] = new(sql.NullString)
		case customcomponent.FieldCreatedAt, customcomponent.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CustomComponent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomComponent fields.
func (cc *CustomComponent) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customcomponent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cc.ID = uint64(value.Int64)
		case customcomponent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cc.CreatedAt = value.Time
			}
		case customcomponent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cc.UpdatedAt = value.Time
			}
		case customcomponent.FieldShopID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shop_id", values[i])
			} else if value.Valid {
				cc.ShopID = new(uint64)
				*cc.ShopID = uint64(value.Int64)
			}
		case customcomponent.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				cc.CreatedBy = uint64(value.Int64)
			}
		case customcomponent.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cc.Name = value.String
			}
		case customcomponent.FieldHandle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handle", values[i])
			} else if value.Valid {
				cc.Handle = value.String
			}
		case customcomponent.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				cc.Content = value.String
			}
		case customcomponent.FieldDistURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dist_url", values[i])
			} else if value.Valid {
				cc.DistURL = new(string)
				*cc.DistURL = value.String
			}
		case customcomponent.FieldIsDraft:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_draft", values[i])
			} else if value.Valid {
				cc.IsDraft = value.Bool
			}
		case customcomponent.FieldEntryFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entry_file_name", values[i])
			} else if value.Valid {
				cc.EntryFileName = value.String
			}
		case customcomponent.FieldSessionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field session_id", values[i])
			} else if value.Valid {
				cc.SessionID = new(uint64)
				*cc.SessionID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryProps queries the "props" edge of the CustomComponent entity.
func (cc *CustomComponent) QueryProps() *ComponentPropertyQuery {
	return (&CustomComponentClient{config: cc.config}).QueryProps(cc)
}

// Update returns a builder for updating this CustomComponent.
// Note that you need to call CustomComponent.Unwrap() before calling this method if this CustomComponent
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *CustomComponent) Update() *CustomComponentUpdateOne {
	return (&CustomComponentClient{config: cc.config}).UpdateOne(cc)
}

// Unwrap unwraps the CustomComponent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *CustomComponent) Unwrap() *CustomComponent {
	tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomComponent is not a transactional entity")
	}
	cc.config.driver = tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *CustomComponent) String() string {
	var builder strings.Builder
	builder.WriteString("CustomComponent(")
	builder.WriteString(fmt.Sprintf("id=%v", cc.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(cc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(cc.UpdatedAt.Format(time.ANSIC))
	if v := cc.ShopID; v != nil {
		builder.WriteString(", shop_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", created_by=")
	builder.WriteString(fmt.Sprintf("%v", cc.CreatedBy))
	builder.WriteString(", name=")
	builder.WriteString(cc.Name)
	builder.WriteString(", handle=")
	builder.WriteString(cc.Handle)
	builder.WriteString(", content=")
	builder.WriteString(cc.Content)
	if v := cc.DistURL; v != nil {
		builder.WriteString(", dist_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", is_draft=")
	builder.WriteString(fmt.Sprintf("%v", cc.IsDraft))
	builder.WriteString(", entry_file_name=")
	builder.WriteString(cc.EntryFileName)
	if v := cc.SessionID; v != nil {
		builder.WriteString(", session_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// CustomComponents is a parsable slice of CustomComponent.
type CustomComponents []*CustomComponent

func (cc CustomComponents) config(cfg config) {
	for _i := range cc {
		cc[_i].config = cfg
	}
}
