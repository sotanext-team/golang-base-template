// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/shop"
	"app-api/ent/theme"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Theme is the model entity for the Theme schema.
type Theme struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deletedAt"`
	// ShopID holds the value of the "shop_id" field.
	ShopID uint64 `json:"shopId"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// Thumbnail holds the value of the "thumbnail" field.
	Thumbnail string `json:"thumbnail"`
	// Publish holds the value of the "publish" field.
	Publish bool `json:"publish"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ThemeQuery when eager-loading is set.
	Edges ThemeEdges `json:"edges"`
}

// ThemeEdges holds the relations/edges for other nodes in the graph.
type ThemeEdges struct {
	// ThemeTemplates holds the value of the themeTemplates edge.
	ThemeTemplates []*ThemeTemplate `json:"themeTemplates,omitempty"`
	// Shop holds the value of the shop edge.
	Shop *Shop `json:"shop,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ThemeTemplatesOrErr returns the ThemeTemplates value or an error if the edge
// was not loaded in eager-loading.
func (e ThemeEdges) ThemeTemplatesOrErr() ([]*ThemeTemplate, error) {
	if e.loadedTypes[0] {
		return e.ThemeTemplates, nil
	}
	return nil, &NotLoadedError{edge: "themeTemplates"}
}

// ShopOrErr returns the Shop value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThemeEdges) ShopOrErr() (*Shop, error) {
	if e.loadedTypes[1] {
		if e.Shop == nil {
			// The edge shop was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shop.Label}
		}
		return e.Shop, nil
	}
	return nil, &NotLoadedError{edge: "shop"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Theme) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case theme.FieldPublish:
			values[i] = new(sql.NullBool)
		case theme.FieldID, theme.FieldShopID:
			values[i] = new(sql.NullInt64)
		case theme.FieldName, theme.FieldThumbnail:
			values[i] = new(sql.NullString)
		case theme.FieldCreatedAt, theme.FieldUpdatedAt, theme.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Theme", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Theme fields.
func (t *Theme) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case theme.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = uint64(value.Int64)
		case theme.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case theme.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case theme.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				t.DeletedAt = new(time.Time)
				*t.DeletedAt = value.Time
			}
		case theme.FieldShopID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shop_id", values[i])
			} else if value.Valid {
				t.ShopID = uint64(value.Int64)
			}
		case theme.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case theme.FieldThumbnail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail", values[i])
			} else if value.Valid {
				t.Thumbnail = value.String
			}
		case theme.FieldPublish:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field publish", values[i])
			} else if value.Valid {
				t.Publish = value.Bool
			}
		}
	}
	return nil
}

// QueryThemeTemplates queries the "themeTemplates" edge of the Theme entity.
func (t *Theme) QueryThemeTemplates() *ThemeTemplateQuery {
	return (&ThemeClient{config: t.config}).QueryThemeTemplates(t)
}

// QueryShop queries the "shop" edge of the Theme entity.
func (t *Theme) QueryShop() *ShopQuery {
	return (&ThemeClient{config: t.config}).QueryShop(t)
}

// Update returns a builder for updating this Theme.
// Note that you need to call Theme.Unwrap() before calling this method if this Theme
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Theme) Update() *ThemeUpdateOne {
	return (&ThemeClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Theme entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Theme) Unwrap() *Theme {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Theme is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Theme) String() string {
	var builder strings.Builder
	builder.WriteString("Theme(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	if v := t.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", shop_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ShopID))
	builder.WriteString(", name=")
	builder.WriteString(t.Name)
	builder.WriteString(", thumbnail=")
	builder.WriteString(t.Thumbnail)
	builder.WriteString(", publish=")
	builder.WriteString(fmt.Sprintf("%v", t.Publish))
	builder.WriteByte(')')
	return builder.String()
}

// Themes is a parsable slice of Theme.
type Themes []*Theme

func (t Themes) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
