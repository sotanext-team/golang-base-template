// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/bktemplatesection"
	"app-api/ent/predicate"
	"app-api/ent/templatesection"
	"app-api/ent/templatesectionversion"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BkTemplateSectionUpdate is the builder for updating BkTemplateSection entities.
type BkTemplateSectionUpdate struct {
	config
	hooks    []Hook
	mutation *BkTemplateSectionMutation
}

// Where appends a list predicates to the BkTemplateSectionUpdate builder.
func (btsu *BkTemplateSectionUpdate) Where(ps ...predicate.BkTemplateSection) *BkTemplateSectionUpdate {
	btsu.mutation.Where(ps...)
	return btsu
}

// SetUpdatedAt sets the "updated_at" field.
func (btsu *BkTemplateSectionUpdate) SetUpdatedAt(t time.Time) *BkTemplateSectionUpdate {
	btsu.mutation.SetUpdatedAt(t)
	return btsu
}

// SetVersionID sets the "version_id" field.
func (btsu *BkTemplateSectionUpdate) SetVersionID(u uint64) *BkTemplateSectionUpdate {
	btsu.mutation.SetVersionID(u)
	return btsu
}

// SetNillableVersionID sets the "version_id" field if the given value is not nil.
func (btsu *BkTemplateSectionUpdate) SetNillableVersionID(u *uint64) *BkTemplateSectionUpdate {
	if u != nil {
		btsu.SetVersionID(*u)
	}
	return btsu
}

// ClearVersionID clears the value of the "version_id" field.
func (btsu *BkTemplateSectionUpdate) ClearVersionID() *BkTemplateSectionUpdate {
	btsu.mutation.ClearVersionID()
	return btsu
}

// SetThemeTemplateID sets the "theme_template_id" field.
func (btsu *BkTemplateSectionUpdate) SetThemeTemplateID(u uint64) *BkTemplateSectionUpdate {
	btsu.mutation.ResetThemeTemplateID()
	btsu.mutation.SetThemeTemplateID(u)
	return btsu
}

// SetNillableThemeTemplateID sets the "theme_template_id" field if the given value is not nil.
func (btsu *BkTemplateSectionUpdate) SetNillableThemeTemplateID(u *uint64) *BkTemplateSectionUpdate {
	if u != nil {
		btsu.SetThemeTemplateID(*u)
	}
	return btsu
}

// AddThemeTemplateID adds u to the "theme_template_id" field.
func (btsu *BkTemplateSectionUpdate) AddThemeTemplateID(u uint64) *BkTemplateSectionUpdate {
	btsu.mutation.AddThemeTemplateID(u)
	return btsu
}

// ClearThemeTemplateID clears the value of the "theme_template_id" field.
func (btsu *BkTemplateSectionUpdate) ClearThemeTemplateID() *BkTemplateSectionUpdate {
	btsu.mutation.ClearThemeTemplateID()
	return btsu
}

// SetTemplateSectionID sets the "template_section_id" field.
func (btsu *BkTemplateSectionUpdate) SetTemplateSectionID(u uint64) *BkTemplateSectionUpdate {
	btsu.mutation.SetTemplateSectionID(u)
	return btsu
}

// SetNillableTemplateSectionID sets the "template_section_id" field if the given value is not nil.
func (btsu *BkTemplateSectionUpdate) SetNillableTemplateSectionID(u *uint64) *BkTemplateSectionUpdate {
	if u != nil {
		btsu.SetTemplateSectionID(*u)
	}
	return btsu
}

// ClearTemplateSectionID clears the value of the "template_section_id" field.
func (btsu *BkTemplateSectionUpdate) ClearTemplateSectionID() *BkTemplateSectionUpdate {
	btsu.mutation.ClearTemplateSectionID()
	return btsu
}

// SetThemeID sets the "theme_id" field.
func (btsu *BkTemplateSectionUpdate) SetThemeID(u uint64) *BkTemplateSectionUpdate {
	btsu.mutation.ResetThemeID()
	btsu.mutation.SetThemeID(u)
	return btsu
}

// SetNillableThemeID sets the "theme_id" field if the given value is not nil.
func (btsu *BkTemplateSectionUpdate) SetNillableThemeID(u *uint64) *BkTemplateSectionUpdate {
	if u != nil {
		btsu.SetThemeID(*u)
	}
	return btsu
}

// AddThemeID adds u to the "theme_id" field.
func (btsu *BkTemplateSectionUpdate) AddThemeID(u uint64) *BkTemplateSectionUpdate {
	btsu.mutation.AddThemeID(u)
	return btsu
}

// ClearThemeID clears the value of the "theme_id" field.
func (btsu *BkTemplateSectionUpdate) ClearThemeID() *BkTemplateSectionUpdate {
	btsu.mutation.ClearThemeID()
	return btsu
}

// SetThemeLayoutID sets the "theme_layout_id" field.
func (btsu *BkTemplateSectionUpdate) SetThemeLayoutID(u uint64) *BkTemplateSectionUpdate {
	btsu.mutation.ResetThemeLayoutID()
	btsu.mutation.SetThemeLayoutID(u)
	return btsu
}

// SetNillableThemeLayoutID sets the "theme_layout_id" field if the given value is not nil.
func (btsu *BkTemplateSectionUpdate) SetNillableThemeLayoutID(u *uint64) *BkTemplateSectionUpdate {
	if u != nil {
		btsu.SetThemeLayoutID(*u)
	}
	return btsu
}

// AddThemeLayoutID adds u to the "theme_layout_id" field.
func (btsu *BkTemplateSectionUpdate) AddThemeLayoutID(u uint64) *BkTemplateSectionUpdate {
	btsu.mutation.AddThemeLayoutID(u)
	return btsu
}

// ClearThemeLayoutID clears the value of the "theme_layout_id" field.
func (btsu *BkTemplateSectionUpdate) ClearThemeLayoutID() *BkTemplateSectionUpdate {
	btsu.mutation.ClearThemeLayoutID()
	return btsu
}

// SetData sets the "data" field.
func (btsu *BkTemplateSectionUpdate) SetData(s string) *BkTemplateSectionUpdate {
	btsu.mutation.SetData(s)
	return btsu
}

// SetTemplateSection sets the "templateSection" edge to the TemplateSection entity.
func (btsu *BkTemplateSectionUpdate) SetTemplateSection(t *TemplateSection) *BkTemplateSectionUpdate {
	return btsu.SetTemplateSectionID(t.ID)
}

// SetVersion sets the "version" edge to the TemplateSectionVersion entity.
func (btsu *BkTemplateSectionUpdate) SetVersion(t *TemplateSectionVersion) *BkTemplateSectionUpdate {
	return btsu.SetVersionID(t.ID)
}

// Mutation returns the BkTemplateSectionMutation object of the builder.
func (btsu *BkTemplateSectionUpdate) Mutation() *BkTemplateSectionMutation {
	return btsu.mutation
}

// ClearTemplateSection clears the "templateSection" edge to the TemplateSection entity.
func (btsu *BkTemplateSectionUpdate) ClearTemplateSection() *BkTemplateSectionUpdate {
	btsu.mutation.ClearTemplateSection()
	return btsu
}

// ClearVersion clears the "version" edge to the TemplateSectionVersion entity.
func (btsu *BkTemplateSectionUpdate) ClearVersion() *BkTemplateSectionUpdate {
	btsu.mutation.ClearVersion()
	return btsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (btsu *BkTemplateSectionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	btsu.defaults()
	if len(btsu.hooks) == 0 {
		affected, err = btsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BkTemplateSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			btsu.mutation = mutation
			affected, err = btsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(btsu.hooks) - 1; i >= 0; i-- {
			if btsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = btsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, btsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (btsu *BkTemplateSectionUpdate) SaveX(ctx context.Context) int {
	affected, err := btsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (btsu *BkTemplateSectionUpdate) Exec(ctx context.Context) error {
	_, err := btsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btsu *BkTemplateSectionUpdate) ExecX(ctx context.Context) {
	if err := btsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (btsu *BkTemplateSectionUpdate) defaults() {
	if _, ok := btsu.mutation.UpdatedAt(); !ok {
		v := bktemplatesection.UpdateDefaultUpdatedAt()
		btsu.mutation.SetUpdatedAt(v)
	}
}

func (btsu *BkTemplateSectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bktemplatesection.Table,
			Columns: bktemplatesection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: bktemplatesection.FieldID,
			},
		},
	}
	if ps := btsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := btsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bktemplatesection.FieldUpdatedAt,
		})
	}
	if value, ok := btsu.mutation.ThemeTemplateID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: bktemplatesection.FieldThemeTemplateID,
		})
	}
	if value, ok := btsu.mutation.AddedThemeTemplateID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: bktemplatesection.FieldThemeTemplateID,
		})
	}
	if btsu.mutation.ThemeTemplateIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: bktemplatesection.FieldThemeTemplateID,
		})
	}
	if value, ok := btsu.mutation.ThemeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: bktemplatesection.FieldThemeID,
		})
	}
	if value, ok := btsu.mutation.AddedThemeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: bktemplatesection.FieldThemeID,
		})
	}
	if btsu.mutation.ThemeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: bktemplatesection.FieldThemeID,
		})
	}
	if value, ok := btsu.mutation.ThemeLayoutID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: bktemplatesection.FieldThemeLayoutID,
		})
	}
	if value, ok := btsu.mutation.AddedThemeLayoutID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: bktemplatesection.FieldThemeLayoutID,
		})
	}
	if btsu.mutation.ThemeLayoutIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: bktemplatesection.FieldThemeLayoutID,
		})
	}
	if value, ok := btsu.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bktemplatesection.FieldData,
		})
	}
	if btsu.mutation.TemplateSectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bktemplatesection.TemplateSectionTable,
			Columns: []string{bktemplatesection.TemplateSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: templatesection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btsu.mutation.TemplateSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bktemplatesection.TemplateSectionTable,
			Columns: []string{bktemplatesection.TemplateSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: templatesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if btsu.mutation.VersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bktemplatesection.VersionTable,
			Columns: []string{bktemplatesection.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: templatesectionversion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btsu.mutation.VersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bktemplatesection.VersionTable,
			Columns: []string{bktemplatesection.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: templatesectionversion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, btsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bktemplatesection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// BkTemplateSectionUpdateOne is the builder for updating a single BkTemplateSection entity.
type BkTemplateSectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BkTemplateSectionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (btsuo *BkTemplateSectionUpdateOne) SetUpdatedAt(t time.Time) *BkTemplateSectionUpdateOne {
	btsuo.mutation.SetUpdatedAt(t)
	return btsuo
}

// SetVersionID sets the "version_id" field.
func (btsuo *BkTemplateSectionUpdateOne) SetVersionID(u uint64) *BkTemplateSectionUpdateOne {
	btsuo.mutation.SetVersionID(u)
	return btsuo
}

// SetNillableVersionID sets the "version_id" field if the given value is not nil.
func (btsuo *BkTemplateSectionUpdateOne) SetNillableVersionID(u *uint64) *BkTemplateSectionUpdateOne {
	if u != nil {
		btsuo.SetVersionID(*u)
	}
	return btsuo
}

// ClearVersionID clears the value of the "version_id" field.
func (btsuo *BkTemplateSectionUpdateOne) ClearVersionID() *BkTemplateSectionUpdateOne {
	btsuo.mutation.ClearVersionID()
	return btsuo
}

// SetThemeTemplateID sets the "theme_template_id" field.
func (btsuo *BkTemplateSectionUpdateOne) SetThemeTemplateID(u uint64) *BkTemplateSectionUpdateOne {
	btsuo.mutation.ResetThemeTemplateID()
	btsuo.mutation.SetThemeTemplateID(u)
	return btsuo
}

// SetNillableThemeTemplateID sets the "theme_template_id" field if the given value is not nil.
func (btsuo *BkTemplateSectionUpdateOne) SetNillableThemeTemplateID(u *uint64) *BkTemplateSectionUpdateOne {
	if u != nil {
		btsuo.SetThemeTemplateID(*u)
	}
	return btsuo
}

// AddThemeTemplateID adds u to the "theme_template_id" field.
func (btsuo *BkTemplateSectionUpdateOne) AddThemeTemplateID(u uint64) *BkTemplateSectionUpdateOne {
	btsuo.mutation.AddThemeTemplateID(u)
	return btsuo
}

// ClearThemeTemplateID clears the value of the "theme_template_id" field.
func (btsuo *BkTemplateSectionUpdateOne) ClearThemeTemplateID() *BkTemplateSectionUpdateOne {
	btsuo.mutation.ClearThemeTemplateID()
	return btsuo
}

// SetTemplateSectionID sets the "template_section_id" field.
func (btsuo *BkTemplateSectionUpdateOne) SetTemplateSectionID(u uint64) *BkTemplateSectionUpdateOne {
	btsuo.mutation.SetTemplateSectionID(u)
	return btsuo
}

// SetNillableTemplateSectionID sets the "template_section_id" field if the given value is not nil.
func (btsuo *BkTemplateSectionUpdateOne) SetNillableTemplateSectionID(u *uint64) *BkTemplateSectionUpdateOne {
	if u != nil {
		btsuo.SetTemplateSectionID(*u)
	}
	return btsuo
}

// ClearTemplateSectionID clears the value of the "template_section_id" field.
func (btsuo *BkTemplateSectionUpdateOne) ClearTemplateSectionID() *BkTemplateSectionUpdateOne {
	btsuo.mutation.ClearTemplateSectionID()
	return btsuo
}

// SetThemeID sets the "theme_id" field.
func (btsuo *BkTemplateSectionUpdateOne) SetThemeID(u uint64) *BkTemplateSectionUpdateOne {
	btsuo.mutation.ResetThemeID()
	btsuo.mutation.SetThemeID(u)
	return btsuo
}

// SetNillableThemeID sets the "theme_id" field if the given value is not nil.
func (btsuo *BkTemplateSectionUpdateOne) SetNillableThemeID(u *uint64) *BkTemplateSectionUpdateOne {
	if u != nil {
		btsuo.SetThemeID(*u)
	}
	return btsuo
}

// AddThemeID adds u to the "theme_id" field.
func (btsuo *BkTemplateSectionUpdateOne) AddThemeID(u uint64) *BkTemplateSectionUpdateOne {
	btsuo.mutation.AddThemeID(u)
	return btsuo
}

// ClearThemeID clears the value of the "theme_id" field.
func (btsuo *BkTemplateSectionUpdateOne) ClearThemeID() *BkTemplateSectionUpdateOne {
	btsuo.mutation.ClearThemeID()
	return btsuo
}

// SetThemeLayoutID sets the "theme_layout_id" field.
func (btsuo *BkTemplateSectionUpdateOne) SetThemeLayoutID(u uint64) *BkTemplateSectionUpdateOne {
	btsuo.mutation.ResetThemeLayoutID()
	btsuo.mutation.SetThemeLayoutID(u)
	return btsuo
}

// SetNillableThemeLayoutID sets the "theme_layout_id" field if the given value is not nil.
func (btsuo *BkTemplateSectionUpdateOne) SetNillableThemeLayoutID(u *uint64) *BkTemplateSectionUpdateOne {
	if u != nil {
		btsuo.SetThemeLayoutID(*u)
	}
	return btsuo
}

// AddThemeLayoutID adds u to the "theme_layout_id" field.
func (btsuo *BkTemplateSectionUpdateOne) AddThemeLayoutID(u uint64) *BkTemplateSectionUpdateOne {
	btsuo.mutation.AddThemeLayoutID(u)
	return btsuo
}

// ClearThemeLayoutID clears the value of the "theme_layout_id" field.
func (btsuo *BkTemplateSectionUpdateOne) ClearThemeLayoutID() *BkTemplateSectionUpdateOne {
	btsuo.mutation.ClearThemeLayoutID()
	return btsuo
}

// SetData sets the "data" field.
func (btsuo *BkTemplateSectionUpdateOne) SetData(s string) *BkTemplateSectionUpdateOne {
	btsuo.mutation.SetData(s)
	return btsuo
}

// SetTemplateSection sets the "templateSection" edge to the TemplateSection entity.
func (btsuo *BkTemplateSectionUpdateOne) SetTemplateSection(t *TemplateSection) *BkTemplateSectionUpdateOne {
	return btsuo.SetTemplateSectionID(t.ID)
}

// SetVersion sets the "version" edge to the TemplateSectionVersion entity.
func (btsuo *BkTemplateSectionUpdateOne) SetVersion(t *TemplateSectionVersion) *BkTemplateSectionUpdateOne {
	return btsuo.SetVersionID(t.ID)
}

// Mutation returns the BkTemplateSectionMutation object of the builder.
func (btsuo *BkTemplateSectionUpdateOne) Mutation() *BkTemplateSectionMutation {
	return btsuo.mutation
}

// ClearTemplateSection clears the "templateSection" edge to the TemplateSection entity.
func (btsuo *BkTemplateSectionUpdateOne) ClearTemplateSection() *BkTemplateSectionUpdateOne {
	btsuo.mutation.ClearTemplateSection()
	return btsuo
}

// ClearVersion clears the "version" edge to the TemplateSectionVersion entity.
func (btsuo *BkTemplateSectionUpdateOne) ClearVersion() *BkTemplateSectionUpdateOne {
	btsuo.mutation.ClearVersion()
	return btsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (btsuo *BkTemplateSectionUpdateOne) Select(field string, fields ...string) *BkTemplateSectionUpdateOne {
	btsuo.fields = append([]string{field}, fields...)
	return btsuo
}

// Save executes the query and returns the updated BkTemplateSection entity.
func (btsuo *BkTemplateSectionUpdateOne) Save(ctx context.Context) (*BkTemplateSection, error) {
	var (
		err  error
		node *BkTemplateSection
	)
	btsuo.defaults()
	if len(btsuo.hooks) == 0 {
		node, err = btsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BkTemplateSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			btsuo.mutation = mutation
			node, err = btsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(btsuo.hooks) - 1; i >= 0; i-- {
			if btsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = btsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, btsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (btsuo *BkTemplateSectionUpdateOne) SaveX(ctx context.Context) *BkTemplateSection {
	node, err := btsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (btsuo *BkTemplateSectionUpdateOne) Exec(ctx context.Context) error {
	_, err := btsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btsuo *BkTemplateSectionUpdateOne) ExecX(ctx context.Context) {
	if err := btsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (btsuo *BkTemplateSectionUpdateOne) defaults() {
	if _, ok := btsuo.mutation.UpdatedAt(); !ok {
		v := bktemplatesection.UpdateDefaultUpdatedAt()
		btsuo.mutation.SetUpdatedAt(v)
	}
}

func (btsuo *BkTemplateSectionUpdateOne) sqlSave(ctx context.Context) (_node *BkTemplateSection, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bktemplatesection.Table,
			Columns: bktemplatesection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: bktemplatesection.FieldID,
			},
		},
	}
	id, ok := btsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BkTemplateSection.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := btsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bktemplatesection.FieldID)
		for _, f := range fields {
			if !bktemplatesection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bktemplatesection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := btsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := btsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bktemplatesection.FieldUpdatedAt,
		})
	}
	if value, ok := btsuo.mutation.ThemeTemplateID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: bktemplatesection.FieldThemeTemplateID,
		})
	}
	if value, ok := btsuo.mutation.AddedThemeTemplateID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: bktemplatesection.FieldThemeTemplateID,
		})
	}
	if btsuo.mutation.ThemeTemplateIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: bktemplatesection.FieldThemeTemplateID,
		})
	}
	if value, ok := btsuo.mutation.ThemeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: bktemplatesection.FieldThemeID,
		})
	}
	if value, ok := btsuo.mutation.AddedThemeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: bktemplatesection.FieldThemeID,
		})
	}
	if btsuo.mutation.ThemeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: bktemplatesection.FieldThemeID,
		})
	}
	if value, ok := btsuo.mutation.ThemeLayoutID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: bktemplatesection.FieldThemeLayoutID,
		})
	}
	if value, ok := btsuo.mutation.AddedThemeLayoutID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: bktemplatesection.FieldThemeLayoutID,
		})
	}
	if btsuo.mutation.ThemeLayoutIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: bktemplatesection.FieldThemeLayoutID,
		})
	}
	if value, ok := btsuo.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bktemplatesection.FieldData,
		})
	}
	if btsuo.mutation.TemplateSectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bktemplatesection.TemplateSectionTable,
			Columns: []string{bktemplatesection.TemplateSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: templatesection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btsuo.mutation.TemplateSectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bktemplatesection.TemplateSectionTable,
			Columns: []string{bktemplatesection.TemplateSectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: templatesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if btsuo.mutation.VersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bktemplatesection.VersionTable,
			Columns: []string{bktemplatesection.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: templatesectionversion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btsuo.mutation.VersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bktemplatesection.VersionTable,
			Columns: []string{bktemplatesection.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: templatesectionversion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BkTemplateSection{config: btsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, btsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bktemplatesection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
