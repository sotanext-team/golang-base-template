// Code generated by entc, DO NOT EDIT.

package templatesection

import (
	"app-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// ShopID applies equality check predicate on the "shop_id" field. It's identical to ShopIDEQ.
func ShopID(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopID), v))
	})
}

// GlobalSectionID applies equality check predicate on the "global_section_id" field. It's identical to GlobalSectionIDEQ.
func GlobalSectionID(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGlobalSectionID), v))
	})
}

// ThemeTemplateID applies equality check predicate on the "theme_template_id" field. It's identical to ThemeTemplateIDEQ.
func ThemeTemplateID(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeTemplateID), v))
	})
}

// CurrentVersionID applies equality check predicate on the "current_version_id" field. It's identical to CurrentVersionIDEQ.
func CurrentVersionID(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentVersionID), v))
	})
}

// Cid applies equality check predicate on the "cid" field. It's identical to CidEQ.
func Cid(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCid), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Component applies equality check predicate on the "component" field. It's identical to ComponentEQ.
func Component(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComponent), v))
	})
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v int) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPosition), v))
	})
}

// Display applies equality check predicate on the "display" field. It's identical to DisplayEQ.
func Display(v bool) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplay), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// ShopIDEQ applies the EQ predicate on the "shop_id" field.
func ShopIDEQ(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopID), v))
	})
}

// ShopIDNEQ applies the NEQ predicate on the "shop_id" field.
func ShopIDNEQ(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShopID), v))
	})
}

// ShopIDIn applies the In predicate on the "shop_id" field.
func ShopIDIn(vs ...uint64) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShopID), v...))
	})
}

// ShopIDNotIn applies the NotIn predicate on the "shop_id" field.
func ShopIDNotIn(vs ...uint64) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShopID), v...))
	})
}

// ShopIDGT applies the GT predicate on the "shop_id" field.
func ShopIDGT(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShopID), v))
	})
}

// ShopIDGTE applies the GTE predicate on the "shop_id" field.
func ShopIDGTE(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShopID), v))
	})
}

// ShopIDLT applies the LT predicate on the "shop_id" field.
func ShopIDLT(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShopID), v))
	})
}

// ShopIDLTE applies the LTE predicate on the "shop_id" field.
func ShopIDLTE(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShopID), v))
	})
}

// ShopIDIsNil applies the IsNil predicate on the "shop_id" field.
func ShopIDIsNil() predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShopID)))
	})
}

// ShopIDNotNil applies the NotNil predicate on the "shop_id" field.
func ShopIDNotNil() predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShopID)))
	})
}

// GlobalSectionIDEQ applies the EQ predicate on the "global_section_id" field.
func GlobalSectionIDEQ(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGlobalSectionID), v))
	})
}

// GlobalSectionIDNEQ applies the NEQ predicate on the "global_section_id" field.
func GlobalSectionIDNEQ(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGlobalSectionID), v))
	})
}

// GlobalSectionIDIn applies the In predicate on the "global_section_id" field.
func GlobalSectionIDIn(vs ...uint64) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGlobalSectionID), v...))
	})
}

// GlobalSectionIDNotIn applies the NotIn predicate on the "global_section_id" field.
func GlobalSectionIDNotIn(vs ...uint64) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGlobalSectionID), v...))
	})
}

// GlobalSectionIDGT applies the GT predicate on the "global_section_id" field.
func GlobalSectionIDGT(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGlobalSectionID), v))
	})
}

// GlobalSectionIDGTE applies the GTE predicate on the "global_section_id" field.
func GlobalSectionIDGTE(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGlobalSectionID), v))
	})
}

// GlobalSectionIDLT applies the LT predicate on the "global_section_id" field.
func GlobalSectionIDLT(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGlobalSectionID), v))
	})
}

// GlobalSectionIDLTE applies the LTE predicate on the "global_section_id" field.
func GlobalSectionIDLTE(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGlobalSectionID), v))
	})
}

// GlobalSectionIDIsNil applies the IsNil predicate on the "global_section_id" field.
func GlobalSectionIDIsNil() predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGlobalSectionID)))
	})
}

// GlobalSectionIDNotNil applies the NotNil predicate on the "global_section_id" field.
func GlobalSectionIDNotNil() predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGlobalSectionID)))
	})
}

// ThemeTemplateIDEQ applies the EQ predicate on the "theme_template_id" field.
func ThemeTemplateIDEQ(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDNEQ applies the NEQ predicate on the "theme_template_id" field.
func ThemeTemplateIDNEQ(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDIn applies the In predicate on the "theme_template_id" field.
func ThemeTemplateIDIn(vs ...uint64) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThemeTemplateID), v...))
	})
}

// ThemeTemplateIDNotIn applies the NotIn predicate on the "theme_template_id" field.
func ThemeTemplateIDNotIn(vs ...uint64) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThemeTemplateID), v...))
	})
}

// ThemeTemplateIDGT applies the GT predicate on the "theme_template_id" field.
func ThemeTemplateIDGT(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDGTE applies the GTE predicate on the "theme_template_id" field.
func ThemeTemplateIDGTE(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDLT applies the LT predicate on the "theme_template_id" field.
func ThemeTemplateIDLT(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDLTE applies the LTE predicate on the "theme_template_id" field.
func ThemeTemplateIDLTE(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDIsNil applies the IsNil predicate on the "theme_template_id" field.
func ThemeTemplateIDIsNil() predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThemeTemplateID)))
	})
}

// ThemeTemplateIDNotNil applies the NotNil predicate on the "theme_template_id" field.
func ThemeTemplateIDNotNil() predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThemeTemplateID)))
	})
}

// CurrentVersionIDEQ applies the EQ predicate on the "current_version_id" field.
func CurrentVersionIDEQ(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentVersionID), v))
	})
}

// CurrentVersionIDNEQ applies the NEQ predicate on the "current_version_id" field.
func CurrentVersionIDNEQ(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrentVersionID), v))
	})
}

// CurrentVersionIDIn applies the In predicate on the "current_version_id" field.
func CurrentVersionIDIn(vs ...uint64) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCurrentVersionID), v...))
	})
}

// CurrentVersionIDNotIn applies the NotIn predicate on the "current_version_id" field.
func CurrentVersionIDNotIn(vs ...uint64) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCurrentVersionID), v...))
	})
}

// CurrentVersionIDGT applies the GT predicate on the "current_version_id" field.
func CurrentVersionIDGT(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrentVersionID), v))
	})
}

// CurrentVersionIDGTE applies the GTE predicate on the "current_version_id" field.
func CurrentVersionIDGTE(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrentVersionID), v))
	})
}

// CurrentVersionIDLT applies the LT predicate on the "current_version_id" field.
func CurrentVersionIDLT(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrentVersionID), v))
	})
}

// CurrentVersionIDLTE applies the LTE predicate on the "current_version_id" field.
func CurrentVersionIDLTE(v uint64) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrentVersionID), v))
	})
}

// CurrentVersionIDIsNil applies the IsNil predicate on the "current_version_id" field.
func CurrentVersionIDIsNil() predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrentVersionID)))
	})
}

// CurrentVersionIDNotNil applies the NotNil predicate on the "current_version_id" field.
func CurrentVersionIDNotNil() predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrentVersionID)))
	})
}

// CidEQ applies the EQ predicate on the "cid" field.
func CidEQ(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCid), v))
	})
}

// CidNEQ applies the NEQ predicate on the "cid" field.
func CidNEQ(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCid), v))
	})
}

// CidIn applies the In predicate on the "cid" field.
func CidIn(vs ...string) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCid), v...))
	})
}

// CidNotIn applies the NotIn predicate on the "cid" field.
func CidNotIn(vs ...string) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCid), v...))
	})
}

// CidGT applies the GT predicate on the "cid" field.
func CidGT(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCid), v))
	})
}

// CidGTE applies the GTE predicate on the "cid" field.
func CidGTE(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCid), v))
	})
}

// CidLT applies the LT predicate on the "cid" field.
func CidLT(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCid), v))
	})
}

// CidLTE applies the LTE predicate on the "cid" field.
func CidLTE(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCid), v))
	})
}

// CidContains applies the Contains predicate on the "cid" field.
func CidContains(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCid), v))
	})
}

// CidHasPrefix applies the HasPrefix predicate on the "cid" field.
func CidHasPrefix(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCid), v))
	})
}

// CidHasSuffix applies the HasSuffix predicate on the "cid" field.
func CidHasSuffix(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCid), v))
	})
}

// CidEqualFold applies the EqualFold predicate on the "cid" field.
func CidEqualFold(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCid), v))
	})
}

// CidContainsFold applies the ContainsFold predicate on the "cid" field.
func CidContainsFold(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCid), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// AreaEQ applies the EQ predicate on the "area" field.
func AreaEQ(v Area) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArea), v))
	})
}

// AreaNEQ applies the NEQ predicate on the "area" field.
func AreaNEQ(v Area) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArea), v))
	})
}

// AreaIn applies the In predicate on the "area" field.
func AreaIn(vs ...Area) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldArea), v...))
	})
}

// AreaNotIn applies the NotIn predicate on the "area" field.
func AreaNotIn(vs ...Area) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldArea), v...))
	})
}

// ComponentEQ applies the EQ predicate on the "component" field.
func ComponentEQ(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComponent), v))
	})
}

// ComponentNEQ applies the NEQ predicate on the "component" field.
func ComponentNEQ(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComponent), v))
	})
}

// ComponentIn applies the In predicate on the "component" field.
func ComponentIn(vs ...string) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComponent), v...))
	})
}

// ComponentNotIn applies the NotIn predicate on the "component" field.
func ComponentNotIn(vs ...string) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComponent), v...))
	})
}

// ComponentGT applies the GT predicate on the "component" field.
func ComponentGT(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComponent), v))
	})
}

// ComponentGTE applies the GTE predicate on the "component" field.
func ComponentGTE(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComponent), v))
	})
}

// ComponentLT applies the LT predicate on the "component" field.
func ComponentLT(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComponent), v))
	})
}

// ComponentLTE applies the LTE predicate on the "component" field.
func ComponentLTE(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComponent), v))
	})
}

// ComponentContains applies the Contains predicate on the "component" field.
func ComponentContains(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComponent), v))
	})
}

// ComponentHasPrefix applies the HasPrefix predicate on the "component" field.
func ComponentHasPrefix(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComponent), v))
	})
}

// ComponentHasSuffix applies the HasSuffix predicate on the "component" field.
func ComponentHasSuffix(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComponent), v))
	})
}

// ComponentEqualFold applies the EqualFold predicate on the "component" field.
func ComponentEqualFold(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComponent), v))
	})
}

// ComponentContainsFold applies the ContainsFold predicate on the "component" field.
func ComponentContainsFold(v string) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComponent), v))
	})
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v int) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPosition), v))
	})
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v int) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPosition), v))
	})
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...int) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPosition), v...))
	})
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...int) predicate.TemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPosition), v...))
	})
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v int) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPosition), v))
	})
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v int) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPosition), v))
	})
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v int) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPosition), v))
	})
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v int) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPosition), v))
	})
}

// DisplayEQ applies the EQ predicate on the "display" field.
func DisplayEQ(v bool) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplay), v))
	})
}

// DisplayNEQ applies the NEQ predicate on the "display" field.
func DisplayNEQ(v bool) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisplay), v))
	})
}

// HasRevisions applies the HasEdge predicate on the "revisions" edge.
func HasRevisions() predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RevisionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RevisionsTable, RevisionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRevisionsWith applies the HasEdge predicate on the "revisions" edge with a given conditions (other predicates).
func HasRevisionsWith(preds ...predicate.BkTemplateSection) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RevisionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RevisionsTable, RevisionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TemplateSection) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TemplateSection) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TemplateSection) predicate.TemplateSection {
	return predicate.TemplateSection(func(s *sql.Selector) {
		p(s.Not())
	})
}
