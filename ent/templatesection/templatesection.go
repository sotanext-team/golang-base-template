// Code generated by entc, DO NOT EDIT.

package templatesection

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the templatesection type in the database.
	Label = "template_section"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldShopID holds the string denoting the shop_id field in the database.
	FieldShopID = "shop_id"
	// FieldGlobalSectionID holds the string denoting the global_section_id field in the database.
	FieldGlobalSectionID = "global_section_id"
	// FieldThemeTemplateID holds the string denoting the theme_template_id field in the database.
	FieldThemeTemplateID = "theme_template_id"
	// FieldCurrentVersionID holds the string denoting the current_version_id field in the database.
	FieldCurrentVersionID = "current_version_id"
	// FieldCid holds the string denoting the cid field in the database.
	FieldCid = "cid"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldArea holds the string denoting the area field in the database.
	FieldArea = "area"
	// FieldComponent holds the string denoting the component field in the database.
	FieldComponent = "component"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldDisplay holds the string denoting the display field in the database.
	FieldDisplay = "display"
	// EdgeRevisions holds the string denoting the revisions edge name in mutations.
	EdgeRevisions = "revisions"
	// Table holds the table name of the templatesection in the database.
	Table = "template_sections"
	// RevisionsTable is the table that holds the revisions relation/edge.
	RevisionsTable = "bk_template_sections"
	// RevisionsInverseTable is the table name for the BkTemplateSection entity.
	// It exists in this package in order to avoid circular dependency with the "bktemplatesection" package.
	RevisionsInverseTable = "bk_template_sections"
	// RevisionsColumn is the table column denoting the revisions relation/edge.
	RevisionsColumn = "template_section_id"
)

// Columns holds all SQL columns for templatesection fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldShopID,
	FieldGlobalSectionID,
	FieldThemeTemplateID,
	FieldCurrentVersionID,
	FieldCid,
	FieldName,
	FieldArea,
	FieldComponent,
	FieldPosition,
	FieldDisplay,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// CidValidator is a validator for the "cid" field. It is called by the builders before save.
	CidValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultPosition holds the default value on creation for the "position" field.
	DefaultPosition int
	// DefaultDisplay holds the default value on creation for the "display" field.
	DefaultDisplay bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uint64
)

// Area defines the type for the "area" enum field.
type Area string

// AreaMain is the default value of the Area enum.
const DefaultArea = AreaMain

// Area values.
const (
	AreaHeader Area = "HEADER"
	AreaMain   Area = "MAIN"
	AreaFooter Area = "FOOTER"
)

func (a Area) String() string {
	return string(a)
}

// AreaValidator is a validator for the "area" field enum values. It is called by the builders before save.
func AreaValidator(a Area) error {
	switch a {
	case AreaHeader, AreaMain, AreaFooter:
		return nil
	default:
		return fmt.Errorf("templatesection: invalid enum value for area field: %q", a)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (a Area) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(a.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (a *Area) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*a = Area(str)
	if err := AreaValidator(*a); err != nil {
		return fmt.Errorf("%s is not a valid Area", str)
	}
	return nil
}
