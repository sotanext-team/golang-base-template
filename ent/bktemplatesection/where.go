// Code generated by entc, DO NOT EDIT.

package bktemplatesection

import (
	"app-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// VersionID applies equality check predicate on the "version_id" field. It's identical to VersionIDEQ.
func VersionID(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersionID), v))
	})
}

// ThemeTemplateID applies equality check predicate on the "theme_template_id" field. It's identical to ThemeTemplateIDEQ.
func ThemeTemplateID(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeTemplateID), v))
	})
}

// TemplateSectionID applies equality check predicate on the "template_section_id" field. It's identical to TemplateSectionIDEQ.
func TemplateSectionID(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemplateSectionID), v))
	})
}

// ThemeID applies equality check predicate on the "theme_id" field. It's identical to ThemeIDEQ.
func ThemeID(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeID), v))
	})
}

// ThemeLayoutID applies equality check predicate on the "theme_layout_id" field. It's identical to ThemeLayoutIDEQ.
func ThemeLayoutID(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeLayoutID), v))
	})
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v string) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldData), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BkTemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BkTemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BkTemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BkTemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// VersionIDEQ applies the EQ predicate on the "version_id" field.
func VersionIDEQ(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersionID), v))
	})
}

// VersionIDNEQ applies the NEQ predicate on the "version_id" field.
func VersionIDNEQ(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersionID), v))
	})
}

// VersionIDIn applies the In predicate on the "version_id" field.
func VersionIDIn(vs ...uint64) predicate.BkTemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVersionID), v...))
	})
}

// VersionIDNotIn applies the NotIn predicate on the "version_id" field.
func VersionIDNotIn(vs ...uint64) predicate.BkTemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVersionID), v...))
	})
}

// VersionIDIsNil applies the IsNil predicate on the "version_id" field.
func VersionIDIsNil() predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVersionID)))
	})
}

// VersionIDNotNil applies the NotNil predicate on the "version_id" field.
func VersionIDNotNil() predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVersionID)))
	})
}

// ThemeTemplateIDEQ applies the EQ predicate on the "theme_template_id" field.
func ThemeTemplateIDEQ(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDNEQ applies the NEQ predicate on the "theme_template_id" field.
func ThemeTemplateIDNEQ(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDIn applies the In predicate on the "theme_template_id" field.
func ThemeTemplateIDIn(vs ...uint64) predicate.BkTemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThemeTemplateID), v...))
	})
}

// ThemeTemplateIDNotIn applies the NotIn predicate on the "theme_template_id" field.
func ThemeTemplateIDNotIn(vs ...uint64) predicate.BkTemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThemeTemplateID), v...))
	})
}

// ThemeTemplateIDGT applies the GT predicate on the "theme_template_id" field.
func ThemeTemplateIDGT(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDGTE applies the GTE predicate on the "theme_template_id" field.
func ThemeTemplateIDGTE(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDLT applies the LT predicate on the "theme_template_id" field.
func ThemeTemplateIDLT(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDLTE applies the LTE predicate on the "theme_template_id" field.
func ThemeTemplateIDLTE(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDIsNil applies the IsNil predicate on the "theme_template_id" field.
func ThemeTemplateIDIsNil() predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThemeTemplateID)))
	})
}

// ThemeTemplateIDNotNil applies the NotNil predicate on the "theme_template_id" field.
func ThemeTemplateIDNotNil() predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThemeTemplateID)))
	})
}

// TemplateSectionIDEQ applies the EQ predicate on the "template_section_id" field.
func TemplateSectionIDEQ(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemplateSectionID), v))
	})
}

// TemplateSectionIDNEQ applies the NEQ predicate on the "template_section_id" field.
func TemplateSectionIDNEQ(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTemplateSectionID), v))
	})
}

// TemplateSectionIDIn applies the In predicate on the "template_section_id" field.
func TemplateSectionIDIn(vs ...uint64) predicate.BkTemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTemplateSectionID), v...))
	})
}

// TemplateSectionIDNotIn applies the NotIn predicate on the "template_section_id" field.
func TemplateSectionIDNotIn(vs ...uint64) predicate.BkTemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTemplateSectionID), v...))
	})
}

// TemplateSectionIDIsNil applies the IsNil predicate on the "template_section_id" field.
func TemplateSectionIDIsNil() predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTemplateSectionID)))
	})
}

// TemplateSectionIDNotNil applies the NotNil predicate on the "template_section_id" field.
func TemplateSectionIDNotNil() predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTemplateSectionID)))
	})
}

// ThemeIDEQ applies the EQ predicate on the "theme_id" field.
func ThemeIDEQ(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeID), v))
	})
}

// ThemeIDNEQ applies the NEQ predicate on the "theme_id" field.
func ThemeIDNEQ(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThemeID), v))
	})
}

// ThemeIDIn applies the In predicate on the "theme_id" field.
func ThemeIDIn(vs ...uint64) predicate.BkTemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThemeID), v...))
	})
}

// ThemeIDNotIn applies the NotIn predicate on the "theme_id" field.
func ThemeIDNotIn(vs ...uint64) predicate.BkTemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThemeID), v...))
	})
}

// ThemeIDGT applies the GT predicate on the "theme_id" field.
func ThemeIDGT(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThemeID), v))
	})
}

// ThemeIDGTE applies the GTE predicate on the "theme_id" field.
func ThemeIDGTE(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThemeID), v))
	})
}

// ThemeIDLT applies the LT predicate on the "theme_id" field.
func ThemeIDLT(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThemeID), v))
	})
}

// ThemeIDLTE applies the LTE predicate on the "theme_id" field.
func ThemeIDLTE(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThemeID), v))
	})
}

// ThemeIDIsNil applies the IsNil predicate on the "theme_id" field.
func ThemeIDIsNil() predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThemeID)))
	})
}

// ThemeIDNotNil applies the NotNil predicate on the "theme_id" field.
func ThemeIDNotNil() predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThemeID)))
	})
}

// ThemeLayoutIDEQ applies the EQ predicate on the "theme_layout_id" field.
func ThemeLayoutIDEQ(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeLayoutID), v))
	})
}

// ThemeLayoutIDNEQ applies the NEQ predicate on the "theme_layout_id" field.
func ThemeLayoutIDNEQ(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThemeLayoutID), v))
	})
}

// ThemeLayoutIDIn applies the In predicate on the "theme_layout_id" field.
func ThemeLayoutIDIn(vs ...uint64) predicate.BkTemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThemeLayoutID), v...))
	})
}

// ThemeLayoutIDNotIn applies the NotIn predicate on the "theme_layout_id" field.
func ThemeLayoutIDNotIn(vs ...uint64) predicate.BkTemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThemeLayoutID), v...))
	})
}

// ThemeLayoutIDGT applies the GT predicate on the "theme_layout_id" field.
func ThemeLayoutIDGT(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThemeLayoutID), v))
	})
}

// ThemeLayoutIDGTE applies the GTE predicate on the "theme_layout_id" field.
func ThemeLayoutIDGTE(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThemeLayoutID), v))
	})
}

// ThemeLayoutIDLT applies the LT predicate on the "theme_layout_id" field.
func ThemeLayoutIDLT(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThemeLayoutID), v))
	})
}

// ThemeLayoutIDLTE applies the LTE predicate on the "theme_layout_id" field.
func ThemeLayoutIDLTE(v uint64) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThemeLayoutID), v))
	})
}

// ThemeLayoutIDIsNil applies the IsNil predicate on the "theme_layout_id" field.
func ThemeLayoutIDIsNil() predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThemeLayoutID)))
	})
}

// ThemeLayoutIDNotNil applies the NotNil predicate on the "theme_layout_id" field.
func ThemeLayoutIDNotNil() predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThemeLayoutID)))
	})
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v string) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldData), v))
	})
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v string) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldData), v))
	})
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...string) predicate.BkTemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldData), v...))
	})
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...string) predicate.BkTemplateSection {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldData), v...))
	})
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v string) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldData), v))
	})
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v string) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldData), v))
	})
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v string) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldData), v))
	})
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v string) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldData), v))
	})
}

// DataContains applies the Contains predicate on the "data" field.
func DataContains(v string) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldData), v))
	})
}

// DataHasPrefix applies the HasPrefix predicate on the "data" field.
func DataHasPrefix(v string) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldData), v))
	})
}

// DataHasSuffix applies the HasSuffix predicate on the "data" field.
func DataHasSuffix(v string) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldData), v))
	})
}

// DataEqualFold applies the EqualFold predicate on the "data" field.
func DataEqualFold(v string) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldData), v))
	})
}

// DataContainsFold applies the ContainsFold predicate on the "data" field.
func DataContainsFold(v string) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldData), v))
	})
}

// HasTemplateSection applies the HasEdge predicate on the "templateSection" edge.
func HasTemplateSection() predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TemplateSectionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TemplateSectionTable, TemplateSectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTemplateSectionWith applies the HasEdge predicate on the "templateSection" edge with a given conditions (other predicates).
func HasTemplateSectionWith(preds ...predicate.TemplateSection) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TemplateSectionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TemplateSectionTable, TemplateSectionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVersion applies the HasEdge predicate on the "version" edge.
func HasVersion() predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VersionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VersionTable, VersionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVersionWith applies the HasEdge predicate on the "version" edge with a given conditions (other predicates).
func HasVersionWith(preds ...predicate.TemplateSectionVersion) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VersionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VersionTable, VersionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BkTemplateSection) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BkTemplateSection) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BkTemplateSection) predicate.BkTemplateSection {
	return predicate.BkTemplateSection(func(s *sql.Selector) {
		p(s.Not())
	})
}
