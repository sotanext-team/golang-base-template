// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/predicate"
	"app-api/ent/shop"
	"app-api/ent/theme"
	"app-api/ent/themetemplate"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShopUpdate is the builder for updating Shop entities.
type ShopUpdate struct {
	config
	hooks    []Hook
	mutation *ShopMutation
}

// Where appends a list predicates to the ShopUpdate builder.
func (su *ShopUpdate) Where(ps ...predicate.Shop) *ShopUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ShopUpdate) SetUpdatedAt(t time.Time) *ShopUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *ShopUpdate) SetDeletedAt(t time.Time) *ShopUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *ShopUpdate) SetNillableDeletedAt(t *time.Time) *ShopUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *ShopUpdate) ClearDeletedAt() *ShopUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetShopName sets the "shop_name" field.
func (su *ShopUpdate) SetShopName(s string) *ShopUpdate {
	su.mutation.SetShopName(s)
	return su
}

// SetNillableShopName sets the "shop_name" field if the given value is not nil.
func (su *ShopUpdate) SetNillableShopName(s *string) *ShopUpdate {
	if s != nil {
		su.SetShopName(*s)
	}
	return su
}

// SetDefaultDomain sets the "default_domain" field.
func (su *ShopUpdate) SetDefaultDomain(s string) *ShopUpdate {
	su.mutation.SetDefaultDomain(s)
	return su
}

// SetCustomDomain sets the "custom_domain" field.
func (su *ShopUpdate) SetCustomDomain(s string) *ShopUpdate {
	su.mutation.SetCustomDomain(s)
	return su
}

// AddThemeIDs adds the "themes" edge to the Theme entity by IDs.
func (su *ShopUpdate) AddThemeIDs(ids ...uint64) *ShopUpdate {
	su.mutation.AddThemeIDs(ids...)
	return su
}

// AddThemes adds the "themes" edges to the Theme entity.
func (su *ShopUpdate) AddThemes(t ...*Theme) *ShopUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddThemeIDs(ids...)
}

// AddThemeTemplateIDs adds the "themeTemplates" edge to the ThemeTemplate entity by IDs.
func (su *ShopUpdate) AddThemeTemplateIDs(ids ...uint64) *ShopUpdate {
	su.mutation.AddThemeTemplateIDs(ids...)
	return su
}

// AddThemeTemplates adds the "themeTemplates" edges to the ThemeTemplate entity.
func (su *ShopUpdate) AddThemeTemplates(t ...*ThemeTemplate) *ShopUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddThemeTemplateIDs(ids...)
}

// Mutation returns the ShopMutation object of the builder.
func (su *ShopUpdate) Mutation() *ShopMutation {
	return su.mutation
}

// ClearThemes clears all "themes" edges to the Theme entity.
func (su *ShopUpdate) ClearThemes() *ShopUpdate {
	su.mutation.ClearThemes()
	return su
}

// RemoveThemeIDs removes the "themes" edge to Theme entities by IDs.
func (su *ShopUpdate) RemoveThemeIDs(ids ...uint64) *ShopUpdate {
	su.mutation.RemoveThemeIDs(ids...)
	return su
}

// RemoveThemes removes "themes" edges to Theme entities.
func (su *ShopUpdate) RemoveThemes(t ...*Theme) *ShopUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveThemeIDs(ids...)
}

// ClearThemeTemplates clears all "themeTemplates" edges to the ThemeTemplate entity.
func (su *ShopUpdate) ClearThemeTemplates() *ShopUpdate {
	su.mutation.ClearThemeTemplates()
	return su
}

// RemoveThemeTemplateIDs removes the "themeTemplates" edge to ThemeTemplate entities by IDs.
func (su *ShopUpdate) RemoveThemeTemplateIDs(ids ...uint64) *ShopUpdate {
	su.mutation.RemoveThemeTemplateIDs(ids...)
	return su
}

// RemoveThemeTemplates removes "themeTemplates" edges to ThemeTemplate entities.
func (su *ShopUpdate) RemoveThemeTemplates(t ...*ThemeTemplate) *ShopUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveThemeTemplateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShopUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShopMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShopUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShopUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShopUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ShopUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := shop.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ShopUpdate) check() error {
	if v, ok := su.mutation.ShopName(); ok {
		if err := shop.ShopNameValidator(v); err != nil {
			return &ValidationError{Name: "shop_name", err: fmt.Errorf("ent: validator failed for field \"shop_name\": %w", err)}
		}
	}
	if v, ok := su.mutation.DefaultDomain(); ok {
		if err := shop.DefaultDomainValidator(v); err != nil {
			return &ValidationError{Name: "default_domain", err: fmt.Errorf("ent: validator failed for field \"default_domain\": %w", err)}
		}
	}
	if v, ok := su.mutation.CustomDomain(); ok {
		if err := shop.CustomDomainValidator(v); err != nil {
			return &ValidationError{Name: "custom_domain", err: fmt.Errorf("ent: validator failed for field \"custom_domain\": %w", err)}
		}
	}
	return nil
}

func (su *ShopUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shop.Table,
			Columns: shop.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: shop.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shop.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shop.FieldDeletedAt,
		})
	}
	if su.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shop.FieldDeletedAt,
		})
	}
	if value, ok := su.mutation.ShopName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shop.FieldShopName,
		})
	}
	if value, ok := su.mutation.DefaultDomain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shop.FieldDefaultDomain,
		})
	}
	if value, ok := su.mutation.CustomDomain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shop.FieldCustomDomain,
		})
	}
	if su.mutation.ThemesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ThemesTable,
			Columns: []string{shop.ThemesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: theme.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedThemesIDs(); len(nodes) > 0 && !su.mutation.ThemesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ThemesTable,
			Columns: []string{shop.ThemesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: theme.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ThemesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ThemesTable,
			Columns: []string{shop.ThemesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: theme.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ThemeTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ThemeTemplatesTable,
			Columns: []string{shop.ThemeTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: themetemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedThemeTemplatesIDs(); len(nodes) > 0 && !su.mutation.ThemeTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ThemeTemplatesTable,
			Columns: []string{shop.ThemeTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: themetemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ThemeTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ThemeTemplatesTable,
			Columns: []string{shop.ThemeTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: themetemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shop.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ShopUpdateOne is the builder for updating a single Shop entity.
type ShopUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShopMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ShopUpdateOne) SetUpdatedAt(t time.Time) *ShopUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *ShopUpdateOne) SetDeletedAt(t time.Time) *ShopUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *ShopUpdateOne) SetNillableDeletedAt(t *time.Time) *ShopUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *ShopUpdateOne) ClearDeletedAt() *ShopUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetShopName sets the "shop_name" field.
func (suo *ShopUpdateOne) SetShopName(s string) *ShopUpdateOne {
	suo.mutation.SetShopName(s)
	return suo
}

// SetNillableShopName sets the "shop_name" field if the given value is not nil.
func (suo *ShopUpdateOne) SetNillableShopName(s *string) *ShopUpdateOne {
	if s != nil {
		suo.SetShopName(*s)
	}
	return suo
}

// SetDefaultDomain sets the "default_domain" field.
func (suo *ShopUpdateOne) SetDefaultDomain(s string) *ShopUpdateOne {
	suo.mutation.SetDefaultDomain(s)
	return suo
}

// SetCustomDomain sets the "custom_domain" field.
func (suo *ShopUpdateOne) SetCustomDomain(s string) *ShopUpdateOne {
	suo.mutation.SetCustomDomain(s)
	return suo
}

// AddThemeIDs adds the "themes" edge to the Theme entity by IDs.
func (suo *ShopUpdateOne) AddThemeIDs(ids ...uint64) *ShopUpdateOne {
	suo.mutation.AddThemeIDs(ids...)
	return suo
}

// AddThemes adds the "themes" edges to the Theme entity.
func (suo *ShopUpdateOne) AddThemes(t ...*Theme) *ShopUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddThemeIDs(ids...)
}

// AddThemeTemplateIDs adds the "themeTemplates" edge to the ThemeTemplate entity by IDs.
func (suo *ShopUpdateOne) AddThemeTemplateIDs(ids ...uint64) *ShopUpdateOne {
	suo.mutation.AddThemeTemplateIDs(ids...)
	return suo
}

// AddThemeTemplates adds the "themeTemplates" edges to the ThemeTemplate entity.
func (suo *ShopUpdateOne) AddThemeTemplates(t ...*ThemeTemplate) *ShopUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddThemeTemplateIDs(ids...)
}

// Mutation returns the ShopMutation object of the builder.
func (suo *ShopUpdateOne) Mutation() *ShopMutation {
	return suo.mutation
}

// ClearThemes clears all "themes" edges to the Theme entity.
func (suo *ShopUpdateOne) ClearThemes() *ShopUpdateOne {
	suo.mutation.ClearThemes()
	return suo
}

// RemoveThemeIDs removes the "themes" edge to Theme entities by IDs.
func (suo *ShopUpdateOne) RemoveThemeIDs(ids ...uint64) *ShopUpdateOne {
	suo.mutation.RemoveThemeIDs(ids...)
	return suo
}

// RemoveThemes removes "themes" edges to Theme entities.
func (suo *ShopUpdateOne) RemoveThemes(t ...*Theme) *ShopUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveThemeIDs(ids...)
}

// ClearThemeTemplates clears all "themeTemplates" edges to the ThemeTemplate entity.
func (suo *ShopUpdateOne) ClearThemeTemplates() *ShopUpdateOne {
	suo.mutation.ClearThemeTemplates()
	return suo
}

// RemoveThemeTemplateIDs removes the "themeTemplates" edge to ThemeTemplate entities by IDs.
func (suo *ShopUpdateOne) RemoveThemeTemplateIDs(ids ...uint64) *ShopUpdateOne {
	suo.mutation.RemoveThemeTemplateIDs(ids...)
	return suo
}

// RemoveThemeTemplates removes "themeTemplates" edges to ThemeTemplate entities.
func (suo *ShopUpdateOne) RemoveThemeTemplates(t ...*ThemeTemplate) *ShopUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveThemeTemplateIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShopUpdateOne) Select(field string, fields ...string) *ShopUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shop entity.
func (suo *ShopUpdateOne) Save(ctx context.Context) (*Shop, error) {
	var (
		err  error
		node *Shop
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShopMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShopUpdateOne) SaveX(ctx context.Context) *Shop {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShopUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShopUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ShopUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := shop.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ShopUpdateOne) check() error {
	if v, ok := suo.mutation.ShopName(); ok {
		if err := shop.ShopNameValidator(v); err != nil {
			return &ValidationError{Name: "shop_name", err: fmt.Errorf("ent: validator failed for field \"shop_name\": %w", err)}
		}
	}
	if v, ok := suo.mutation.DefaultDomain(); ok {
		if err := shop.DefaultDomainValidator(v); err != nil {
			return &ValidationError{Name: "default_domain", err: fmt.Errorf("ent: validator failed for field \"default_domain\": %w", err)}
		}
	}
	if v, ok := suo.mutation.CustomDomain(); ok {
		if err := shop.CustomDomainValidator(v); err != nil {
			return &ValidationError{Name: "custom_domain", err: fmt.Errorf("ent: validator failed for field \"custom_domain\": %w", err)}
		}
	}
	return nil
}

func (suo *ShopUpdateOne) sqlSave(ctx context.Context) (_node *Shop, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shop.Table,
			Columns: shop.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: shop.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Shop.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shop.FieldID)
		for _, f := range fields {
			if !shop.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shop.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shop.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shop.FieldDeletedAt,
		})
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: shop.FieldDeletedAt,
		})
	}
	if value, ok := suo.mutation.ShopName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shop.FieldShopName,
		})
	}
	if value, ok := suo.mutation.DefaultDomain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shop.FieldDefaultDomain,
		})
	}
	if value, ok := suo.mutation.CustomDomain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shop.FieldCustomDomain,
		})
	}
	if suo.mutation.ThemesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ThemesTable,
			Columns: []string{shop.ThemesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: theme.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedThemesIDs(); len(nodes) > 0 && !suo.mutation.ThemesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ThemesTable,
			Columns: []string{shop.ThemesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: theme.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ThemesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ThemesTable,
			Columns: []string{shop.ThemesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: theme.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ThemeTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ThemeTemplatesTable,
			Columns: []string{shop.ThemeTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: themetemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedThemeTemplatesIDs(); len(nodes) > 0 && !suo.mutation.ThemeTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ThemeTemplatesTable,
			Columns: []string{shop.ThemeTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: themetemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ThemeTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shop.ThemeTemplatesTable,
			Columns: []string{shop.ThemeTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: themetemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Shop{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shop.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
