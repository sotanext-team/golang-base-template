// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/predicate"
	"app-api/ent/shop"
	"app-api/ent/theme"
	"app-api/ent/themetemplate"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThemeTemplateUpdate is the builder for updating ThemeTemplate entities.
type ThemeTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *ThemeTemplateMutation
}

// Where appends a list predicates to the ThemeTemplateUpdate builder.
func (ttu *ThemeTemplateUpdate) Where(ps ...predicate.ThemeTemplate) *ThemeTemplateUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetUpdatedAt sets the "updated_at" field.
func (ttu *ThemeTemplateUpdate) SetUpdatedAt(t time.Time) *ThemeTemplateUpdate {
	ttu.mutation.SetUpdatedAt(t)
	return ttu
}

// SetDeletedAt sets the "deleted_at" field.
func (ttu *ThemeTemplateUpdate) SetDeletedAt(t time.Time) *ThemeTemplateUpdate {
	ttu.mutation.SetDeletedAt(t)
	return ttu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ttu *ThemeTemplateUpdate) SetNillableDeletedAt(t *time.Time) *ThemeTemplateUpdate {
	if t != nil {
		ttu.SetDeletedAt(*t)
	}
	return ttu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ttu *ThemeTemplateUpdate) ClearDeletedAt() *ThemeTemplateUpdate {
	ttu.mutation.ClearDeletedAt()
	return ttu
}

// SetShopID sets the "shop_id" field.
func (ttu *ThemeTemplateUpdate) SetShopID(u uint64) *ThemeTemplateUpdate {
	ttu.mutation.SetShopID(u)
	return ttu
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (ttu *ThemeTemplateUpdate) SetNillableShopID(u *uint64) *ThemeTemplateUpdate {
	if u != nil {
		ttu.SetShopID(*u)
	}
	return ttu
}

// ClearShopID clears the value of the "shop_id" field.
func (ttu *ThemeTemplateUpdate) ClearShopID() *ThemeTemplateUpdate {
	ttu.mutation.ClearShopID()
	return ttu
}

// SetThemeID sets the "theme_id" field.
func (ttu *ThemeTemplateUpdate) SetThemeID(u uint64) *ThemeTemplateUpdate {
	ttu.mutation.SetThemeID(u)
	return ttu
}

// SetNillableThemeID sets the "theme_id" field if the given value is not nil.
func (ttu *ThemeTemplateUpdate) SetNillableThemeID(u *uint64) *ThemeTemplateUpdate {
	if u != nil {
		ttu.SetThemeID(*u)
	}
	return ttu
}

// ClearThemeID clears the value of the "theme_id" field.
func (ttu *ThemeTemplateUpdate) ClearThemeID() *ThemeTemplateUpdate {
	ttu.mutation.ClearThemeID()
	return ttu
}

// SetName sets the "name" field.
func (ttu *ThemeTemplateUpdate) SetName(s string) *ThemeTemplateUpdate {
	ttu.mutation.SetName(s)
	return ttu
}

// SetPageType sets the "page_type" field.
func (ttu *ThemeTemplateUpdate) SetPageType(tt themetemplate.PageType) *ThemeTemplateUpdate {
	ttu.mutation.SetPageType(tt)
	return ttu
}

// SetNillablePageType sets the "page_type" field if the given value is not nil.
func (ttu *ThemeTemplateUpdate) SetNillablePageType(tt *themetemplate.PageType) *ThemeTemplateUpdate {
	if tt != nil {
		ttu.SetPageType(*tt)
	}
	return ttu
}

// SetDefault sets the "default" field.
func (ttu *ThemeTemplateUpdate) SetDefault(b bool) *ThemeTemplateUpdate {
	ttu.mutation.SetDefault(b)
	return ttu
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (ttu *ThemeTemplateUpdate) SetNillableDefault(b *bool) *ThemeTemplateUpdate {
	if b != nil {
		ttu.SetDefault(*b)
	}
	return ttu
}

// SetShop sets the "shop" edge to the Shop entity.
func (ttu *ThemeTemplateUpdate) SetShop(s *Shop) *ThemeTemplateUpdate {
	return ttu.SetShopID(s.ID)
}

// SetTheme sets the "theme" edge to the Theme entity.
func (ttu *ThemeTemplateUpdate) SetTheme(t *Theme) *ThemeTemplateUpdate {
	return ttu.SetThemeID(t.ID)
}

// Mutation returns the ThemeTemplateMutation object of the builder.
func (ttu *ThemeTemplateUpdate) Mutation() *ThemeTemplateMutation {
	return ttu.mutation
}

// ClearShop clears the "shop" edge to the Shop entity.
func (ttu *ThemeTemplateUpdate) ClearShop() *ThemeTemplateUpdate {
	ttu.mutation.ClearShop()
	return ttu
}

// ClearTheme clears the "theme" edge to the Theme entity.
func (ttu *ThemeTemplateUpdate) ClearTheme() *ThemeTemplateUpdate {
	ttu.mutation.ClearTheme()
	return ttu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *ThemeTemplateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ttu.defaults()
	if len(ttu.hooks) == 0 {
		if err = ttu.check(); err != nil {
			return 0, err
		}
		affected, err = ttu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ThemeTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttu.check(); err != nil {
				return 0, err
			}
			ttu.mutation = mutation
			affected, err = ttu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ttu.hooks) - 1; i >= 0; i-- {
			if ttu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *ThemeTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *ThemeTemplateUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *ThemeTemplateUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttu *ThemeTemplateUpdate) defaults() {
	if _, ok := ttu.mutation.UpdatedAt(); !ok {
		v := themetemplate.UpdateDefaultUpdatedAt()
		ttu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *ThemeTemplateUpdate) check() error {
	if v, ok := ttu.mutation.Name(); ok {
		if err := themetemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := ttu.mutation.PageType(); ok {
		if err := themetemplate.PageTypeValidator(v); err != nil {
			return &ValidationError{Name: "page_type", err: fmt.Errorf("ent: validator failed for field \"page_type\": %w", err)}
		}
	}
	return nil
}

func (ttu *ThemeTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   themetemplate.Table,
			Columns: themetemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: themetemplate.FieldID,
			},
		},
	}
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: themetemplate.FieldUpdatedAt,
		})
	}
	if value, ok := ttu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: themetemplate.FieldDeletedAt,
		})
	}
	if ttu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: themetemplate.FieldDeletedAt,
		})
	}
	if value, ok := ttu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: themetemplate.FieldName,
		})
	}
	if value, ok := ttu.mutation.PageType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: themetemplate.FieldPageType,
		})
	}
	if value, ok := ttu.mutation.Default(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: themetemplate.FieldDefault,
		})
	}
	if ttu.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   themetemplate.ShopTable,
			Columns: []string{themetemplate.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: shop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   themetemplate.ShopTable,
			Columns: []string{themetemplate.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: shop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttu.mutation.ThemeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   themetemplate.ThemeTable,
			Columns: []string{themetemplate.ThemeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: theme.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.ThemeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   themetemplate.ThemeTable,
			Columns: []string{themetemplate.ThemeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: theme.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{themetemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ThemeTemplateUpdateOne is the builder for updating a single ThemeTemplate entity.
type ThemeTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ThemeTemplateMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ttuo *ThemeTemplateUpdateOne) SetUpdatedAt(t time.Time) *ThemeTemplateUpdateOne {
	ttuo.mutation.SetUpdatedAt(t)
	return ttuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ttuo *ThemeTemplateUpdateOne) SetDeletedAt(t time.Time) *ThemeTemplateUpdateOne {
	ttuo.mutation.SetDeletedAt(t)
	return ttuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ttuo *ThemeTemplateUpdateOne) SetNillableDeletedAt(t *time.Time) *ThemeTemplateUpdateOne {
	if t != nil {
		ttuo.SetDeletedAt(*t)
	}
	return ttuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ttuo *ThemeTemplateUpdateOne) ClearDeletedAt() *ThemeTemplateUpdateOne {
	ttuo.mutation.ClearDeletedAt()
	return ttuo
}

// SetShopID sets the "shop_id" field.
func (ttuo *ThemeTemplateUpdateOne) SetShopID(u uint64) *ThemeTemplateUpdateOne {
	ttuo.mutation.SetShopID(u)
	return ttuo
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (ttuo *ThemeTemplateUpdateOne) SetNillableShopID(u *uint64) *ThemeTemplateUpdateOne {
	if u != nil {
		ttuo.SetShopID(*u)
	}
	return ttuo
}

// ClearShopID clears the value of the "shop_id" field.
func (ttuo *ThemeTemplateUpdateOne) ClearShopID() *ThemeTemplateUpdateOne {
	ttuo.mutation.ClearShopID()
	return ttuo
}

// SetThemeID sets the "theme_id" field.
func (ttuo *ThemeTemplateUpdateOne) SetThemeID(u uint64) *ThemeTemplateUpdateOne {
	ttuo.mutation.SetThemeID(u)
	return ttuo
}

// SetNillableThemeID sets the "theme_id" field if the given value is not nil.
func (ttuo *ThemeTemplateUpdateOne) SetNillableThemeID(u *uint64) *ThemeTemplateUpdateOne {
	if u != nil {
		ttuo.SetThemeID(*u)
	}
	return ttuo
}

// ClearThemeID clears the value of the "theme_id" field.
func (ttuo *ThemeTemplateUpdateOne) ClearThemeID() *ThemeTemplateUpdateOne {
	ttuo.mutation.ClearThemeID()
	return ttuo
}

// SetName sets the "name" field.
func (ttuo *ThemeTemplateUpdateOne) SetName(s string) *ThemeTemplateUpdateOne {
	ttuo.mutation.SetName(s)
	return ttuo
}

// SetPageType sets the "page_type" field.
func (ttuo *ThemeTemplateUpdateOne) SetPageType(tt themetemplate.PageType) *ThemeTemplateUpdateOne {
	ttuo.mutation.SetPageType(tt)
	return ttuo
}

// SetNillablePageType sets the "page_type" field if the given value is not nil.
func (ttuo *ThemeTemplateUpdateOne) SetNillablePageType(tt *themetemplate.PageType) *ThemeTemplateUpdateOne {
	if tt != nil {
		ttuo.SetPageType(*tt)
	}
	return ttuo
}

// SetDefault sets the "default" field.
func (ttuo *ThemeTemplateUpdateOne) SetDefault(b bool) *ThemeTemplateUpdateOne {
	ttuo.mutation.SetDefault(b)
	return ttuo
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (ttuo *ThemeTemplateUpdateOne) SetNillableDefault(b *bool) *ThemeTemplateUpdateOne {
	if b != nil {
		ttuo.SetDefault(*b)
	}
	return ttuo
}

// SetShop sets the "shop" edge to the Shop entity.
func (ttuo *ThemeTemplateUpdateOne) SetShop(s *Shop) *ThemeTemplateUpdateOne {
	return ttuo.SetShopID(s.ID)
}

// SetTheme sets the "theme" edge to the Theme entity.
func (ttuo *ThemeTemplateUpdateOne) SetTheme(t *Theme) *ThemeTemplateUpdateOne {
	return ttuo.SetThemeID(t.ID)
}

// Mutation returns the ThemeTemplateMutation object of the builder.
func (ttuo *ThemeTemplateUpdateOne) Mutation() *ThemeTemplateMutation {
	return ttuo.mutation
}

// ClearShop clears the "shop" edge to the Shop entity.
func (ttuo *ThemeTemplateUpdateOne) ClearShop() *ThemeTemplateUpdateOne {
	ttuo.mutation.ClearShop()
	return ttuo
}

// ClearTheme clears the "theme" edge to the Theme entity.
func (ttuo *ThemeTemplateUpdateOne) ClearTheme() *ThemeTemplateUpdateOne {
	ttuo.mutation.ClearTheme()
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *ThemeTemplateUpdateOne) Select(field string, fields ...string) *ThemeTemplateUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated ThemeTemplate entity.
func (ttuo *ThemeTemplateUpdateOne) Save(ctx context.Context) (*ThemeTemplate, error) {
	var (
		err  error
		node *ThemeTemplate
	)
	ttuo.defaults()
	if len(ttuo.hooks) == 0 {
		if err = ttuo.check(); err != nil {
			return nil, err
		}
		node, err = ttuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ThemeTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttuo.check(); err != nil {
				return nil, err
			}
			ttuo.mutation = mutation
			node, err = ttuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ttuo.hooks) - 1; i >= 0; i-- {
			if ttuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *ThemeTemplateUpdateOne) SaveX(ctx context.Context) *ThemeTemplate {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *ThemeTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *ThemeTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttuo *ThemeTemplateUpdateOne) defaults() {
	if _, ok := ttuo.mutation.UpdatedAt(); !ok {
		v := themetemplate.UpdateDefaultUpdatedAt()
		ttuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *ThemeTemplateUpdateOne) check() error {
	if v, ok := ttuo.mutation.Name(); ok {
		if err := themetemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := ttuo.mutation.PageType(); ok {
		if err := themetemplate.PageTypeValidator(v); err != nil {
			return &ValidationError{Name: "page_type", err: fmt.Errorf("ent: validator failed for field \"page_type\": %w", err)}
		}
	}
	return nil
}

func (ttuo *ThemeTemplateUpdateOne) sqlSave(ctx context.Context) (_node *ThemeTemplate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   themetemplate.Table,
			Columns: themetemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: themetemplate.FieldID,
			},
		},
	}
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ThemeTemplate.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, themetemplate.FieldID)
		for _, f := range fields {
			if !themetemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != themetemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: themetemplate.FieldUpdatedAt,
		})
	}
	if value, ok := ttuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: themetemplate.FieldDeletedAt,
		})
	}
	if ttuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: themetemplate.FieldDeletedAt,
		})
	}
	if value, ok := ttuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: themetemplate.FieldName,
		})
	}
	if value, ok := ttuo.mutation.PageType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: themetemplate.FieldPageType,
		})
	}
	if value, ok := ttuo.mutation.Default(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: themetemplate.FieldDefault,
		})
	}
	if ttuo.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   themetemplate.ShopTable,
			Columns: []string{themetemplate.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: shop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   themetemplate.ShopTable,
			Columns: []string{themetemplate.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: shop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttuo.mutation.ThemeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   themetemplate.ThemeTable,
			Columns: []string{themetemplate.ThemeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: theme.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.ThemeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   themetemplate.ThemeTable,
			Columns: []string{themetemplate.ThemeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: theme.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ThemeTemplate{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{themetemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
