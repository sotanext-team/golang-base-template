// Code generated by entc, DO NOT EDIT.

package templatesectionversion

import (
	"app-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ThemeTemplateID applies equality check predicate on the "theme_template_id" field. It's identical to ThemeTemplateIDEQ.
func ThemeTemplateID(v uint64) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeTemplateID), v))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TemplateSectionVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TemplateSectionVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TemplateSectionVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TemplateSectionVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// ThemeTemplateIDEQ applies the EQ predicate on the "theme_template_id" field.
func ThemeTemplateIDEQ(v uint64) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDNEQ applies the NEQ predicate on the "theme_template_id" field.
func ThemeTemplateIDNEQ(v uint64) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDIn applies the In predicate on the "theme_template_id" field.
func ThemeTemplateIDIn(vs ...uint64) predicate.TemplateSectionVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThemeTemplateID), v...))
	})
}

// ThemeTemplateIDNotIn applies the NotIn predicate on the "theme_template_id" field.
func ThemeTemplateIDNotIn(vs ...uint64) predicate.TemplateSectionVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThemeTemplateID), v...))
	})
}

// ThemeTemplateIDGT applies the GT predicate on the "theme_template_id" field.
func ThemeTemplateIDGT(v uint64) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDGTE applies the GTE predicate on the "theme_template_id" field.
func ThemeTemplateIDGTE(v uint64) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDLT applies the LT predicate on the "theme_template_id" field.
func ThemeTemplateIDLT(v uint64) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDLTE applies the LTE predicate on the "theme_template_id" field.
func ThemeTemplateIDLTE(v uint64) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThemeTemplateID), v))
	})
}

// ThemeTemplateIDIsNil applies the IsNil predicate on the "theme_template_id" field.
func ThemeTemplateIDIsNil() predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThemeTemplateID)))
	})
}

// ThemeTemplateIDNotNil applies the NotNil predicate on the "theme_template_id" field.
func ThemeTemplateIDNotNil() predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThemeTemplateID)))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.TemplateSectionVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.TemplateSectionVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVersion), v))
	})
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVersion), v))
	})
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVersion), v))
	})
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVersion), v))
	})
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVersion), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TemplateSectionVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TemplateSectionVersion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// HasBkTemplateSections applies the HasEdge predicate on the "bkTemplateSections" edge.
func HasBkTemplateSections() predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BkTemplateSectionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BkTemplateSectionsTable, BkTemplateSectionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBkTemplateSectionsWith applies the HasEdge predicate on the "bkTemplateSections" edge with a given conditions (other predicates).
func HasBkTemplateSectionsWith(preds ...predicate.BkTemplateSection) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BkTemplateSectionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BkTemplateSectionsTable, BkTemplateSectionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TemplateSectionVersion) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TemplateSectionVersion) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TemplateSectionVersion) predicate.TemplateSectionVersion {
	return predicate.TemplateSectionVersion(func(s *sql.Selector) {
		p(s.Not())
	})
}
