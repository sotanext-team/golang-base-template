// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/templatesection"
	"app-api/ent/themetemplate"
	"app-api/ent/todo"
	"time"
)

// CreateBkTemplateSectionInput represents a mutation input for creating bktemplatesections.
type CreateBkTemplateSectionInput struct {
	CreatedAt         *time.Time
	UpdatedAt         *time.Time
	ThemeTemplateID   *uint64
	ThemeID           *uint64
	ThemeLayoutID     *uint64
	Data              string
	TemplateSectionID *uint64
	VersionID         *uint64
}

// Mutate applies the CreateBkTemplateSectionInput on the BkTemplateSectionCreate builder.
func (i *CreateBkTemplateSectionInput) Mutate(m *BkTemplateSectionCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.ThemeTemplateID; v != nil {
		m.SetThemeTemplateID(*v)
	}
	if v := i.ThemeID; v != nil {
		m.SetThemeID(*v)
	}
	if v := i.ThemeLayoutID; v != nil {
		m.SetThemeLayoutID(*v)
	}
	m.SetData(i.Data)
	if v := i.TemplateSectionID; v != nil {
		m.SetTemplateSectionID(*v)
	}
	if v := i.VersionID; v != nil {
		m.SetVersionID(*v)
	}
}

// SetInput applies the change-set in the CreateBkTemplateSectionInput on the create builder.
func (c *BkTemplateSectionCreate) SetInput(i CreateBkTemplateSectionInput) *BkTemplateSectionCreate {
	i.Mutate(c)
	return c
}

// UpdateBkTemplateSectionInput represents a mutation input for updating bktemplatesections.
type UpdateBkTemplateSectionInput struct {
	UpdatedAt            *time.Time
	ThemeTemplateID      *uint64
	ClearThemeTemplateID bool
	ThemeID              *uint64
	ClearThemeID         bool
	ThemeLayoutID        *uint64
	ClearThemeLayoutID   bool
	Data                 *string
	TemplateSectionID    *uint64
	ClearTemplateSection bool
	VersionID            *uint64
	ClearVersion         bool
}

// Mutate applies the UpdateBkTemplateSectionInput on the BkTemplateSectionMutation.
func (i *UpdateBkTemplateSectionInput) Mutate(m *BkTemplateSectionMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearThemeTemplateID {
		m.ClearThemeTemplateID()
	}
	if v := i.ThemeTemplateID; v != nil {
		m.SetThemeTemplateID(*v)
	}
	if i.ClearThemeID {
		m.ClearThemeID()
	}
	if v := i.ThemeID; v != nil {
		m.SetThemeID(*v)
	}
	if i.ClearThemeLayoutID {
		m.ClearThemeLayoutID()
	}
	if v := i.ThemeLayoutID; v != nil {
		m.SetThemeLayoutID(*v)
	}
	if v := i.Data; v != nil {
		m.SetData(*v)
	}
	if i.ClearTemplateSection {
		m.ClearTemplateSection()
	}
	if v := i.TemplateSectionID; v != nil {
		m.SetTemplateSectionID(*v)
	}
	if i.ClearVersion {
		m.ClearVersion()
	}
	if v := i.VersionID; v != nil {
		m.SetVersionID(*v)
	}
}

// SetInput applies the change-set in the UpdateBkTemplateSectionInput on the update builder.
func (u *BkTemplateSectionUpdate) SetInput(i UpdateBkTemplateSectionInput) *BkTemplateSectionUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateBkTemplateSectionInput on the update-one builder.
func (u *BkTemplateSectionUpdateOne) SetInput(i UpdateBkTemplateSectionInput) *BkTemplateSectionUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateComponentPropertyInput represents a mutation input for creating componentproperties.
type CreateComponentPropertyInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	Name        string
	Value       string
	ComponentID uint64
}

// Mutate applies the CreateComponentPropertyInput on the ComponentPropertyCreate builder.
func (i *CreateComponentPropertyInput) Mutate(m *ComponentPropertyCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetValue(i.Value)
	m.SetComponentID(i.ComponentID)
}

// SetInput applies the change-set in the CreateComponentPropertyInput on the create builder.
func (c *ComponentPropertyCreate) SetInput(i CreateComponentPropertyInput) *ComponentPropertyCreate {
	i.Mutate(c)
	return c
}

// UpdateComponentPropertyInput represents a mutation input for updating componentproperties.
type UpdateComponentPropertyInput struct {
	UpdatedAt      *time.Time
	Name           *string
	Value          *string
	ComponentID    *uint64
	ClearComponent bool
}

// Mutate applies the UpdateComponentPropertyInput on the ComponentPropertyMutation.
func (i *UpdateComponentPropertyInput) Mutate(m *ComponentPropertyMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Value; v != nil {
		m.SetValue(*v)
	}
	if i.ClearComponent {
		m.ClearComponent()
	}
	if v := i.ComponentID; v != nil {
		m.SetComponentID(*v)
	}
}

// SetInput applies the change-set in the UpdateComponentPropertyInput on the update builder.
func (u *ComponentPropertyUpdate) SetInput(i UpdateComponentPropertyInput) *ComponentPropertyUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateComponentPropertyInput on the update-one builder.
func (u *ComponentPropertyUpdateOne) SetInput(i UpdateComponentPropertyInput) *ComponentPropertyUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateCustomComponentInput represents a mutation input for creating customcomponents.
type CreateCustomComponentInput struct {
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	ShopID        *uint64
	CreatedBy     uint64
	Name          string
	Handle        string
	Content       *string
	DistURL       *string
	IsDraft       *bool
	EntryFileName *string
	SessionID     *uint64
	PropIDs       []uint64
}

// Mutate applies the CreateCustomComponentInput on the CustomComponentCreate builder.
func (i *CreateCustomComponentInput) Mutate(m *CustomComponentCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.ShopID; v != nil {
		m.SetShopID(*v)
	}
	m.SetCreatedBy(i.CreatedBy)
	m.SetName(i.Name)
	m.SetHandle(i.Handle)
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if v := i.DistURL; v != nil {
		m.SetDistURL(*v)
	}
	if v := i.IsDraft; v != nil {
		m.SetIsDraft(*v)
	}
	if v := i.EntryFileName; v != nil {
		m.SetEntryFileName(*v)
	}
	if v := i.SessionID; v != nil {
		m.SetSessionID(*v)
	}
	if ids := i.PropIDs; len(ids) > 0 {
		m.AddPropIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateCustomComponentInput on the create builder.
func (c *CustomComponentCreate) SetInput(i CreateCustomComponentInput) *CustomComponentCreate {
	i.Mutate(c)
	return c
}

// UpdateCustomComponentInput represents a mutation input for updating customcomponents.
type UpdateCustomComponentInput struct {
	UpdatedAt          *time.Time
	ShopID             *uint64
	ClearShopID        bool
	CreatedBy          *uint64
	Name               *string
	Handle             *string
	Content            *string
	ClearContent       bool
	DistURL            *string
	ClearDistURL       bool
	IsDraft            *bool
	ClearIsDraft       bool
	EntryFileName      *string
	ClearEntryFileName bool
	SessionID          *uint64
	ClearSessionID     bool
	AddPropIDs         []uint64
	RemovePropIDs      []uint64
}

// Mutate applies the UpdateCustomComponentInput on the CustomComponentMutation.
func (i *UpdateCustomComponentInput) Mutate(m *CustomComponentMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearShopID {
		m.ClearShopID()
	}
	if v := i.ShopID; v != nil {
		m.SetShopID(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Handle; v != nil {
		m.SetHandle(*v)
	}
	if i.ClearContent {
		m.ClearContent()
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if i.ClearDistURL {
		m.ClearDistURL()
	}
	if v := i.DistURL; v != nil {
		m.SetDistURL(*v)
	}
	if i.ClearIsDraft {
		m.ClearIsDraft()
	}
	if v := i.IsDraft; v != nil {
		m.SetIsDraft(*v)
	}
	if i.ClearEntryFileName {
		m.ClearEntryFileName()
	}
	if v := i.EntryFileName; v != nil {
		m.SetEntryFileName(*v)
	}
	if i.ClearSessionID {
		m.ClearSessionID()
	}
	if v := i.SessionID; v != nil {
		m.SetSessionID(*v)
	}
	if ids := i.AddPropIDs; len(ids) > 0 {
		m.AddPropIDs(ids...)
	}
	if ids := i.RemovePropIDs; len(ids) > 0 {
		m.RemovePropIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateCustomComponentInput on the update builder.
func (u *CustomComponentUpdate) SetInput(i UpdateCustomComponentInput) *CustomComponentUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateCustomComponentInput on the update-one builder.
func (u *CustomComponentUpdateOne) SetInput(i UpdateCustomComponentInput) *CustomComponentUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateGlobalTemplateInput represents a mutation input for creating globaltemplates.
type CreateGlobalTemplateInput struct {
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	DeletedAt    *time.Time
	ShopID       *uint64
	Name         string
	ViewCount    int
	InstallCount int
}

// Mutate applies the CreateGlobalTemplateInput on the GlobalTemplateCreate builder.
func (i *CreateGlobalTemplateInput) Mutate(m *GlobalTemplateCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.ShopID; v != nil {
		m.SetShopID(*v)
	}
	m.SetName(i.Name)
	m.SetViewCount(i.ViewCount)
	m.SetInstallCount(i.InstallCount)
}

// SetInput applies the change-set in the CreateGlobalTemplateInput on the create builder.
func (c *GlobalTemplateCreate) SetInput(i CreateGlobalTemplateInput) *GlobalTemplateCreate {
	i.Mutate(c)
	return c
}

// UpdateGlobalTemplateInput represents a mutation input for updating globaltemplates.
type UpdateGlobalTemplateInput struct {
	UpdatedAt      *time.Time
	DeletedAt      *time.Time
	ClearDeletedAt bool
	ShopID         *uint64
	ClearShopID    bool
	Name           *string
	ViewCount      *int
	InstallCount   *int
}

// Mutate applies the UpdateGlobalTemplateInput on the GlobalTemplateMutation.
func (i *UpdateGlobalTemplateInput) Mutate(m *GlobalTemplateMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearShopID {
		m.ClearShopID()
	}
	if v := i.ShopID; v != nil {
		m.SetShopID(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.ViewCount; v != nil {
		m.SetViewCount(*v)
	}
	if v := i.InstallCount; v != nil {
		m.SetInstallCount(*v)
	}
}

// SetInput applies the change-set in the UpdateGlobalTemplateInput on the update builder.
func (u *GlobalTemplateUpdate) SetInput(i UpdateGlobalTemplateInput) *GlobalTemplateUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateGlobalTemplateInput on the update-one builder.
func (u *GlobalTemplateUpdateOne) SetInput(i UpdateGlobalTemplateInput) *GlobalTemplateUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateShopInput represents a mutation input for creating shops.
type CreateShopInput struct {
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	DeletedAt        *time.Time
	ShopName         *string
	DefaultDomain    string
	CustomDomain     string
	ThemeIDs         []uint64
	ThemeTemplateIDs []uint64
}

// Mutate applies the CreateShopInput on the ShopCreate builder.
func (i *CreateShopInput) Mutate(m *ShopCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.ShopName; v != nil {
		m.SetShopName(*v)
	}
	m.SetDefaultDomain(i.DefaultDomain)
	m.SetCustomDomain(i.CustomDomain)
	if ids := i.ThemeIDs; len(ids) > 0 {
		m.AddThemeIDs(ids...)
	}
	if ids := i.ThemeTemplateIDs; len(ids) > 0 {
		m.AddThemeTemplateIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateShopInput on the create builder.
func (c *ShopCreate) SetInput(i CreateShopInput) *ShopCreate {
	i.Mutate(c)
	return c
}

// UpdateShopInput represents a mutation input for updating shops.
type UpdateShopInput struct {
	UpdatedAt              *time.Time
	DeletedAt              *time.Time
	ClearDeletedAt         bool
	ShopName               *string
	DefaultDomain          *string
	CustomDomain           *string
	AddThemeIDs            []uint64
	RemoveThemeIDs         []uint64
	AddThemeTemplateIDs    []uint64
	RemoveThemeTemplateIDs []uint64
}

// Mutate applies the UpdateShopInput on the ShopMutation.
func (i *UpdateShopInput) Mutate(m *ShopMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.ShopName; v != nil {
		m.SetShopName(*v)
	}
	if v := i.DefaultDomain; v != nil {
		m.SetDefaultDomain(*v)
	}
	if v := i.CustomDomain; v != nil {
		m.SetCustomDomain(*v)
	}
	if ids := i.AddThemeIDs; len(ids) > 0 {
		m.AddThemeIDs(ids...)
	}
	if ids := i.RemoveThemeIDs; len(ids) > 0 {
		m.RemoveThemeIDs(ids...)
	}
	if ids := i.AddThemeTemplateIDs; len(ids) > 0 {
		m.AddThemeTemplateIDs(ids...)
	}
	if ids := i.RemoveThemeTemplateIDs; len(ids) > 0 {
		m.RemoveThemeTemplateIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateShopInput on the update builder.
func (u *ShopUpdate) SetInput(i UpdateShopInput) *ShopUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateShopInput on the update-one builder.
func (u *ShopUpdateOne) SetInput(i UpdateShopInput) *ShopUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTemplateSectionInput represents a mutation input for creating templatesections.
type CreateTemplateSectionInput struct {
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	DeletedAt        *time.Time
	ShopID           *uint64
	GlobalSectionID  *uint64
	ThemeTemplateID  *uint64
	CurrentVersionID *uint64
	Cid              string
	Name             string
	Area             *templatesection.Area
	Component        string
	Position         *int
	Display          *bool
	RevisionIDs      []uint64
}

// Mutate applies the CreateTemplateSectionInput on the TemplateSectionCreate builder.
func (i *CreateTemplateSectionInput) Mutate(m *TemplateSectionCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.ShopID; v != nil {
		m.SetShopID(*v)
	}
	if v := i.GlobalSectionID; v != nil {
		m.SetGlobalSectionID(*v)
	}
	if v := i.ThemeTemplateID; v != nil {
		m.SetThemeTemplateID(*v)
	}
	if v := i.CurrentVersionID; v != nil {
		m.SetCurrentVersionID(*v)
	}
	m.SetCid(i.Cid)
	m.SetName(i.Name)
	if v := i.Area; v != nil {
		m.SetArea(*v)
	}
	m.SetComponent(i.Component)
	if v := i.Position; v != nil {
		m.SetPosition(*v)
	}
	if v := i.Display; v != nil {
		m.SetDisplay(*v)
	}
	if ids := i.RevisionIDs; len(ids) > 0 {
		m.AddRevisionIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTemplateSectionInput on the create builder.
func (c *TemplateSectionCreate) SetInput(i CreateTemplateSectionInput) *TemplateSectionCreate {
	i.Mutate(c)
	return c
}

// UpdateTemplateSectionInput represents a mutation input for updating templatesections.
type UpdateTemplateSectionInput struct {
	UpdatedAt             *time.Time
	DeletedAt             *time.Time
	ClearDeletedAt        bool
	ShopID                *uint64
	ClearShopID           bool
	GlobalSectionID       *uint64
	ClearGlobalSectionID  bool
	ThemeTemplateID       *uint64
	ClearThemeTemplateID  bool
	CurrentVersionID      *uint64
	ClearCurrentVersionID bool
	Cid                   *string
	Name                  *string
	Area                  *templatesection.Area
	Component             *string
	Position              *int
	Display               *bool
	AddRevisionIDs        []uint64
	RemoveRevisionIDs     []uint64
}

// Mutate applies the UpdateTemplateSectionInput on the TemplateSectionMutation.
func (i *UpdateTemplateSectionInput) Mutate(m *TemplateSectionMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearShopID {
		m.ClearShopID()
	}
	if v := i.ShopID; v != nil {
		m.SetShopID(*v)
	}
	if i.ClearGlobalSectionID {
		m.ClearGlobalSectionID()
	}
	if v := i.GlobalSectionID; v != nil {
		m.SetGlobalSectionID(*v)
	}
	if i.ClearThemeTemplateID {
		m.ClearThemeTemplateID()
	}
	if v := i.ThemeTemplateID; v != nil {
		m.SetThemeTemplateID(*v)
	}
	if i.ClearCurrentVersionID {
		m.ClearCurrentVersionID()
	}
	if v := i.CurrentVersionID; v != nil {
		m.SetCurrentVersionID(*v)
	}
	if v := i.Cid; v != nil {
		m.SetCid(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Area; v != nil {
		m.SetArea(*v)
	}
	if v := i.Component; v != nil {
		m.SetComponent(*v)
	}
	if v := i.Position; v != nil {
		m.SetPosition(*v)
	}
	if v := i.Display; v != nil {
		m.SetDisplay(*v)
	}
	if ids := i.AddRevisionIDs; len(ids) > 0 {
		m.AddRevisionIDs(ids...)
	}
	if ids := i.RemoveRevisionIDs; len(ids) > 0 {
		m.RemoveRevisionIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTemplateSectionInput on the update builder.
func (u *TemplateSectionUpdate) SetInput(i UpdateTemplateSectionInput) *TemplateSectionUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTemplateSectionInput on the update-one builder.
func (u *TemplateSectionUpdateOne) SetInput(i UpdateTemplateSectionInput) *TemplateSectionUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTemplateSectionVersionInput represents a mutation input for creating templatesectionversions.
type CreateTemplateSectionVersionInput struct {
	CreatedAt            *time.Time
	UpdatedAt            *time.Time
	ThemeTemplateID      *uint64
	Version              string
	Name                 string
	BkTemplateSectionIDs []uint64
}

// Mutate applies the CreateTemplateSectionVersionInput on the TemplateSectionVersionCreate builder.
func (i *CreateTemplateSectionVersionInput) Mutate(m *TemplateSectionVersionCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.ThemeTemplateID; v != nil {
		m.SetThemeTemplateID(*v)
	}
	m.SetVersion(i.Version)
	m.SetName(i.Name)
	if ids := i.BkTemplateSectionIDs; len(ids) > 0 {
		m.AddBkTemplateSectionIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTemplateSectionVersionInput on the create builder.
func (c *TemplateSectionVersionCreate) SetInput(i CreateTemplateSectionVersionInput) *TemplateSectionVersionCreate {
	i.Mutate(c)
	return c
}

// UpdateTemplateSectionVersionInput represents a mutation input for updating templatesectionversions.
type UpdateTemplateSectionVersionInput struct {
	UpdatedAt                  *time.Time
	ThemeTemplateID            *uint64
	ClearThemeTemplateID       bool
	Version                    *string
	Name                       *string
	AddBkTemplateSectionIDs    []uint64
	RemoveBkTemplateSectionIDs []uint64
}

// Mutate applies the UpdateTemplateSectionVersionInput on the TemplateSectionVersionMutation.
func (i *UpdateTemplateSectionVersionInput) Mutate(m *TemplateSectionVersionMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearThemeTemplateID {
		m.ClearThemeTemplateID()
	}
	if v := i.ThemeTemplateID; v != nil {
		m.SetThemeTemplateID(*v)
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if ids := i.AddBkTemplateSectionIDs; len(ids) > 0 {
		m.AddBkTemplateSectionIDs(ids...)
	}
	if ids := i.RemoveBkTemplateSectionIDs; len(ids) > 0 {
		m.RemoveBkTemplateSectionIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTemplateSectionVersionInput on the update builder.
func (u *TemplateSectionVersionUpdate) SetInput(i UpdateTemplateSectionVersionInput) *TemplateSectionVersionUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTemplateSectionVersionInput on the update-one builder.
func (u *TemplateSectionVersionUpdateOne) SetInput(i UpdateTemplateSectionVersionInput) *TemplateSectionVersionUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateThemeInput represents a mutation input for creating themes.
type CreateThemeInput struct {
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	DeletedAt        *time.Time
	Name             string
	Thumbnail        string
	Publish          *bool
	ThemeTemplateIDs []uint64
	ShopID           *uint64
}

// Mutate applies the CreateThemeInput on the ThemeCreate builder.
func (i *CreateThemeInput) Mutate(m *ThemeCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetName(i.Name)
	m.SetThumbnail(i.Thumbnail)
	if v := i.Publish; v != nil {
		m.SetPublish(*v)
	}
	if ids := i.ThemeTemplateIDs; len(ids) > 0 {
		m.AddThemeTemplateIDs(ids...)
	}
	if v := i.ShopID; v != nil {
		m.SetShopID(*v)
	}
}

// SetInput applies the change-set in the CreateThemeInput on the create builder.
func (c *ThemeCreate) SetInput(i CreateThemeInput) *ThemeCreate {
	i.Mutate(c)
	return c
}

// UpdateThemeInput represents a mutation input for updating themes.
type UpdateThemeInput struct {
	UpdatedAt              *time.Time
	DeletedAt              *time.Time
	ClearDeletedAt         bool
	Name                   *string
	Thumbnail              *string
	Publish                *bool
	AddThemeTemplateIDs    []uint64
	RemoveThemeTemplateIDs []uint64
	ShopID                 *uint64
	ClearShop              bool
}

// Mutate applies the UpdateThemeInput on the ThemeMutation.
func (i *UpdateThemeInput) Mutate(m *ThemeMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Thumbnail; v != nil {
		m.SetThumbnail(*v)
	}
	if v := i.Publish; v != nil {
		m.SetPublish(*v)
	}
	if ids := i.AddThemeTemplateIDs; len(ids) > 0 {
		m.AddThemeTemplateIDs(ids...)
	}
	if ids := i.RemoveThemeTemplateIDs; len(ids) > 0 {
		m.RemoveThemeTemplateIDs(ids...)
	}
	if i.ClearShop {
		m.ClearShop()
	}
	if v := i.ShopID; v != nil {
		m.SetShopID(*v)
	}
}

// SetInput applies the change-set in the UpdateThemeInput on the update builder.
func (u *ThemeUpdate) SetInput(i UpdateThemeInput) *ThemeUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateThemeInput on the update-one builder.
func (u *ThemeUpdateOne) SetInput(i UpdateThemeInput) *ThemeUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateThemeTemplateInput represents a mutation input for creating themetemplates.
type CreateThemeTemplateInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	Name      string
	PageType  *themetemplate.PageType
	Default   *bool
	ShopID    *uint64
	ThemeID   *uint64
}

// Mutate applies the CreateThemeTemplateInput on the ThemeTemplateCreate builder.
func (i *CreateThemeTemplateInput) Mutate(m *ThemeTemplateCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetName(i.Name)
	if v := i.PageType; v != nil {
		m.SetPageType(*v)
	}
	if v := i.Default; v != nil {
		m.SetDefault(*v)
	}
	if v := i.ShopID; v != nil {
		m.SetShopID(*v)
	}
	if v := i.ThemeID; v != nil {
		m.SetThemeID(*v)
	}
}

// SetInput applies the change-set in the CreateThemeTemplateInput on the create builder.
func (c *ThemeTemplateCreate) SetInput(i CreateThemeTemplateInput) *ThemeTemplateCreate {
	i.Mutate(c)
	return c
}

// UpdateThemeTemplateInput represents a mutation input for updating themetemplates.
type UpdateThemeTemplateInput struct {
	UpdatedAt      *time.Time
	DeletedAt      *time.Time
	ClearDeletedAt bool
	Name           *string
	PageType       *themetemplate.PageType
	Default        *bool
	ShopID         *uint64
	ClearShop      bool
	ThemeID        *uint64
	ClearTheme     bool
}

// Mutate applies the UpdateThemeTemplateInput on the ThemeTemplateMutation.
func (i *UpdateThemeTemplateInput) Mutate(m *ThemeTemplateMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.PageType; v != nil {
		m.SetPageType(*v)
	}
	if v := i.Default; v != nil {
		m.SetDefault(*v)
	}
	if i.ClearShop {
		m.ClearShop()
	}
	if v := i.ShopID; v != nil {
		m.SetShopID(*v)
	}
	if i.ClearTheme {
		m.ClearTheme()
	}
	if v := i.ThemeID; v != nil {
		m.SetThemeID(*v)
	}
}

// SetInput applies the change-set in the UpdateThemeTemplateInput on the update builder.
func (u *ThemeTemplateUpdate) SetInput(i UpdateThemeTemplateInput) *ThemeTemplateUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateThemeTemplateInput on the update-one builder.
func (u *ThemeTemplateUpdateOne) SetInput(i UpdateThemeTemplateInput) *ThemeTemplateUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTodoInput represents a mutation input for creating todos.
type CreateTodoInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	Text      string
	Status    *todo.Status
	Priority  *int
	ChildIDs  []uint64
	ParentID  *uint64
}

// Mutate applies the CreateTodoInput on the TodoCreate builder.
func (i *CreateTodoInput) Mutate(m *TodoCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetText(i.Text)
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	if ids := i.ChildIDs; len(ids) > 0 {
		m.AddChildIDs(ids...)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
}

// SetInput applies the change-set in the CreateTodoInput on the create builder.
func (c *TodoCreate) SetInput(i CreateTodoInput) *TodoCreate {
	i.Mutate(c)
	return c
}

// UpdateTodoInput represents a mutation input for updating todos.
type UpdateTodoInput struct {
	UpdatedAt      *time.Time
	DeletedAt      *time.Time
	ClearDeletedAt bool
	Text           *string
	Status         *todo.Status
	Priority       *int
	AddChildIDs    []uint64
	RemoveChildIDs []uint64
	ParentID       *uint64
	ClearParent    bool
}

// Mutate applies the UpdateTodoInput on the TodoMutation.
func (i *UpdateTodoInput) Mutate(m *TodoMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Text; v != nil {
		m.SetText(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	if ids := i.AddChildIDs; len(ids) > 0 {
		m.AddChildIDs(ids...)
	}
	if ids := i.RemoveChildIDs; len(ids) > 0 {
		m.RemoveChildIDs(ids...)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
}

// SetInput applies the change-set in the UpdateTodoInput on the update builder.
func (u *TodoUpdate) SetInput(i UpdateTodoInput) *TodoUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTodoInput on the update-one builder.
func (u *TodoUpdateOne) SetInput(i UpdateTodoInput) *TodoUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
