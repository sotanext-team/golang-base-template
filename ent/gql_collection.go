// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (bts *BkTemplateSectionQuery) CollectFields(ctx context.Context, satisfies ...string) *BkTemplateSectionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		bts = bts.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return bts
}

func (bts *BkTemplateSectionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *BkTemplateSectionQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "version":
			bts = bts.WithVersion(func(query *TemplateSectionVersionQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return bts
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (cp *ComponentPropertyQuery) CollectFields(ctx context.Context, satisfies ...string) *ComponentPropertyQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		cp = cp.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return cp
}

func (cp *ComponentPropertyQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ComponentPropertyQuery {
	return cp
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (cc *CustomComponentQuery) CollectFields(ctx context.Context, satisfies ...string) *CustomComponentQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		cc = cc.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return cc
}

func (cc *CustomComponentQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *CustomComponentQuery {
	return cc
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (gt *GlobalTemplateQuery) CollectFields(ctx context.Context, satisfies ...string) *GlobalTemplateQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		gt = gt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return gt
}

func (gt *GlobalTemplateQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *GlobalTemplateQuery {
	return gt
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *ShopQuery) CollectFields(ctx context.Context, satisfies ...string) *ShopQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *ShopQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ShopQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "themes":
			s = s.WithThemes(func(query *ThemeQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ts *TemplateSectionQuery) CollectFields(ctx context.Context, satisfies ...string) *TemplateSectionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ts = ts.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ts
}

func (ts *TemplateSectionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TemplateSectionQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "revisions":
			ts = ts.WithRevisions(func(query *BkTemplateSectionQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return ts
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tsv *TemplateSectionVersionQuery) CollectFields(ctx context.Context, satisfies ...string) *TemplateSectionVersionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tsv = tsv.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tsv
}

func (tsv *TemplateSectionVersionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TemplateSectionVersionQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "bkTemplateSections":
			tsv = tsv.WithBkTemplateSections(func(query *BkTemplateSectionQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return tsv
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *ThemeQuery) CollectFields(ctx context.Context, satisfies ...string) *ThemeQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return t
}

func (t *ThemeQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ThemeQuery {
	return t
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tt *ThemeTemplateQuery) CollectFields(ctx context.Context, satisfies ...string) *ThemeTemplateQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tt = tt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tt
}

func (tt *ThemeTemplateQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ThemeTemplateQuery {
	return tt
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TodoQuery) CollectFields(ctx context.Context, satisfies ...string) *TodoQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return t
}

func (t *TodoQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TodoQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "children":
			t = t.WithChildren(func(query *TodoQuery) {
				query.collectField(ctx, field)
			})
		case "parent":
			t = t.WithParent(func(query *TodoQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return t
}
