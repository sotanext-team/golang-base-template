// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/bktemplatesection"
	"app-api/ent/templatesectionversion"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TemplateSectionVersionCreate is the builder for creating a TemplateSectionVersion entity.
type TemplateSectionVersionCreate struct {
	config
	mutation *TemplateSectionVersionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tsvc *TemplateSectionVersionCreate) SetCreatedAt(t time.Time) *TemplateSectionVersionCreate {
	tsvc.mutation.SetCreatedAt(t)
	return tsvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsvc *TemplateSectionVersionCreate) SetNillableCreatedAt(t *time.Time) *TemplateSectionVersionCreate {
	if t != nil {
		tsvc.SetCreatedAt(*t)
	}
	return tsvc
}

// SetUpdatedAt sets the "updated_at" field.
func (tsvc *TemplateSectionVersionCreate) SetUpdatedAt(t time.Time) *TemplateSectionVersionCreate {
	tsvc.mutation.SetUpdatedAt(t)
	return tsvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tsvc *TemplateSectionVersionCreate) SetNillableUpdatedAt(t *time.Time) *TemplateSectionVersionCreate {
	if t != nil {
		tsvc.SetUpdatedAt(*t)
	}
	return tsvc
}

// SetThemeTemplateID sets the "theme_template_id" field.
func (tsvc *TemplateSectionVersionCreate) SetThemeTemplateID(u uint64) *TemplateSectionVersionCreate {
	tsvc.mutation.SetThemeTemplateID(u)
	return tsvc
}

// SetNillableThemeTemplateID sets the "theme_template_id" field if the given value is not nil.
func (tsvc *TemplateSectionVersionCreate) SetNillableThemeTemplateID(u *uint64) *TemplateSectionVersionCreate {
	if u != nil {
		tsvc.SetThemeTemplateID(*u)
	}
	return tsvc
}

// SetVersion sets the "version" field.
func (tsvc *TemplateSectionVersionCreate) SetVersion(s string) *TemplateSectionVersionCreate {
	tsvc.mutation.SetVersion(s)
	return tsvc
}

// SetName sets the "name" field.
func (tsvc *TemplateSectionVersionCreate) SetName(s string) *TemplateSectionVersionCreate {
	tsvc.mutation.SetName(s)
	return tsvc
}

// SetID sets the "id" field.
func (tsvc *TemplateSectionVersionCreate) SetID(u uint64) *TemplateSectionVersionCreate {
	tsvc.mutation.SetID(u)
	return tsvc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tsvc *TemplateSectionVersionCreate) SetNillableID(u *uint64) *TemplateSectionVersionCreate {
	if u != nil {
		tsvc.SetID(*u)
	}
	return tsvc
}

// AddBkTemplateSectionIDs adds the "bkTemplateSections" edge to the BkTemplateSection entity by IDs.
func (tsvc *TemplateSectionVersionCreate) AddBkTemplateSectionIDs(ids ...uint64) *TemplateSectionVersionCreate {
	tsvc.mutation.AddBkTemplateSectionIDs(ids...)
	return tsvc
}

// AddBkTemplateSections adds the "bkTemplateSections" edges to the BkTemplateSection entity.
func (tsvc *TemplateSectionVersionCreate) AddBkTemplateSections(b ...*BkTemplateSection) *TemplateSectionVersionCreate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tsvc.AddBkTemplateSectionIDs(ids...)
}

// Mutation returns the TemplateSectionVersionMutation object of the builder.
func (tsvc *TemplateSectionVersionCreate) Mutation() *TemplateSectionVersionMutation {
	return tsvc.mutation
}

// Save creates the TemplateSectionVersion in the database.
func (tsvc *TemplateSectionVersionCreate) Save(ctx context.Context) (*TemplateSectionVersion, error) {
	var (
		err  error
		node *TemplateSectionVersion
	)
	tsvc.defaults()
	if len(tsvc.hooks) == 0 {
		if err = tsvc.check(); err != nil {
			return nil, err
		}
		node, err = tsvc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TemplateSectionVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tsvc.check(); err != nil {
				return nil, err
			}
			tsvc.mutation = mutation
			if node, err = tsvc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tsvc.hooks) - 1; i >= 0; i-- {
			if tsvc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tsvc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsvc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tsvc *TemplateSectionVersionCreate) SaveX(ctx context.Context) *TemplateSectionVersion {
	v, err := tsvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsvc *TemplateSectionVersionCreate) Exec(ctx context.Context) error {
	_, err := tsvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsvc *TemplateSectionVersionCreate) ExecX(ctx context.Context) {
	if err := tsvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsvc *TemplateSectionVersionCreate) defaults() {
	if _, ok := tsvc.mutation.CreatedAt(); !ok {
		v := templatesectionversion.DefaultCreatedAt()
		tsvc.mutation.SetCreatedAt(v)
	}
	if _, ok := tsvc.mutation.UpdatedAt(); !ok {
		v := templatesectionversion.DefaultUpdatedAt()
		tsvc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tsvc.mutation.ID(); !ok {
		v := templatesectionversion.DefaultID()
		tsvc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsvc *TemplateSectionVersionCreate) check() error {
	if _, ok := tsvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := tsvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := tsvc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "version"`)}
	}
	if v, ok := tsvc.mutation.Version(); ok {
		if err := templatesectionversion.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "version": %w`, err)}
		}
	}
	if _, ok := tsvc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := tsvc.mutation.Name(); ok {
		if err := templatesectionversion.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	return nil
}

func (tsvc *TemplateSectionVersionCreate) sqlSave(ctx context.Context) (*TemplateSectionVersion, error) {
	_node, _spec := tsvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (tsvc *TemplateSectionVersionCreate) createSpec() (*TemplateSectionVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &TemplateSectionVersion{config: tsvc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: templatesectionversion.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: templatesectionversion.FieldID,
			},
		}
	)
	if id, ok := tsvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tsvc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: templatesectionversion.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tsvc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: templatesectionversion.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tsvc.mutation.ThemeTemplateID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesectionversion.FieldThemeTemplateID,
		})
		_node.ThemeTemplateID = value
	}
	if value, ok := tsvc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatesectionversion.FieldVersion,
		})
		_node.Version = value
	}
	if value, ok := tsvc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatesectionversion.FieldName,
		})
		_node.Name = value
	}
	if nodes := tsvc.mutation.BkTemplateSectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templatesectionversion.BkTemplateSectionsTable,
			Columns: []string{templatesectionversion.BkTemplateSectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bktemplatesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TemplateSectionVersionCreateBulk is the builder for creating many TemplateSectionVersion entities in bulk.
type TemplateSectionVersionCreateBulk struct {
	config
	builders []*TemplateSectionVersionCreate
}

// Save creates the TemplateSectionVersion entities in the database.
func (tsvcb *TemplateSectionVersionCreateBulk) Save(ctx context.Context) ([]*TemplateSectionVersion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tsvcb.builders))
	nodes := make([]*TemplateSectionVersion, len(tsvcb.builders))
	mutators := make([]Mutator, len(tsvcb.builders))
	for i := range tsvcb.builders {
		func(i int, root context.Context) {
			builder := tsvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TemplateSectionVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tsvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tsvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tsvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tsvcb *TemplateSectionVersionCreateBulk) SaveX(ctx context.Context) []*TemplateSectionVersion {
	v, err := tsvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsvcb *TemplateSectionVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := tsvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsvcb *TemplateSectionVersionCreateBulk) ExecX(ctx context.Context) {
	if err := tsvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
