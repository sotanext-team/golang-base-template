// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/globaltemplate"
	"app-api/ent/predicate"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GlobalTemplateUpdate is the builder for updating GlobalTemplate entities.
type GlobalTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *GlobalTemplateMutation
}

// Where appends a list predicates to the GlobalTemplateUpdate builder.
func (gtu *GlobalTemplateUpdate) Where(ps ...predicate.GlobalTemplate) *GlobalTemplateUpdate {
	gtu.mutation.Where(ps...)
	return gtu
}

// SetUpdatedAt sets the "updated_at" field.
func (gtu *GlobalTemplateUpdate) SetUpdatedAt(t time.Time) *GlobalTemplateUpdate {
	gtu.mutation.SetUpdatedAt(t)
	return gtu
}

// SetDeletedAt sets the "deleted_at" field.
func (gtu *GlobalTemplateUpdate) SetDeletedAt(t time.Time) *GlobalTemplateUpdate {
	gtu.mutation.SetDeletedAt(t)
	return gtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gtu *GlobalTemplateUpdate) SetNillableDeletedAt(t *time.Time) *GlobalTemplateUpdate {
	if t != nil {
		gtu.SetDeletedAt(*t)
	}
	return gtu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gtu *GlobalTemplateUpdate) ClearDeletedAt() *GlobalTemplateUpdate {
	gtu.mutation.ClearDeletedAt()
	return gtu
}

// SetShopID sets the "shop_id" field.
func (gtu *GlobalTemplateUpdate) SetShopID(u uint64) *GlobalTemplateUpdate {
	gtu.mutation.ResetShopID()
	gtu.mutation.SetShopID(u)
	return gtu
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (gtu *GlobalTemplateUpdate) SetNillableShopID(u *uint64) *GlobalTemplateUpdate {
	if u != nil {
		gtu.SetShopID(*u)
	}
	return gtu
}

// AddShopID adds u to the "shop_id" field.
func (gtu *GlobalTemplateUpdate) AddShopID(u uint64) *GlobalTemplateUpdate {
	gtu.mutation.AddShopID(u)
	return gtu
}

// ClearShopID clears the value of the "shop_id" field.
func (gtu *GlobalTemplateUpdate) ClearShopID() *GlobalTemplateUpdate {
	gtu.mutation.ClearShopID()
	return gtu
}

// SetName sets the "name" field.
func (gtu *GlobalTemplateUpdate) SetName(s string) *GlobalTemplateUpdate {
	gtu.mutation.SetName(s)
	return gtu
}

// SetViewCount sets the "view_count" field.
func (gtu *GlobalTemplateUpdate) SetViewCount(i int) *GlobalTemplateUpdate {
	gtu.mutation.ResetViewCount()
	gtu.mutation.SetViewCount(i)
	return gtu
}

// AddViewCount adds i to the "view_count" field.
func (gtu *GlobalTemplateUpdate) AddViewCount(i int) *GlobalTemplateUpdate {
	gtu.mutation.AddViewCount(i)
	return gtu
}

// SetInstallCount sets the "install_count" field.
func (gtu *GlobalTemplateUpdate) SetInstallCount(i int) *GlobalTemplateUpdate {
	gtu.mutation.ResetInstallCount()
	gtu.mutation.SetInstallCount(i)
	return gtu
}

// AddInstallCount adds i to the "install_count" field.
func (gtu *GlobalTemplateUpdate) AddInstallCount(i int) *GlobalTemplateUpdate {
	gtu.mutation.AddInstallCount(i)
	return gtu
}

// Mutation returns the GlobalTemplateMutation object of the builder.
func (gtu *GlobalTemplateUpdate) Mutation() *GlobalTemplateMutation {
	return gtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gtu *GlobalTemplateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gtu.defaults()
	if len(gtu.hooks) == 0 {
		if err = gtu.check(); err != nil {
			return 0, err
		}
		affected, err = gtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GlobalTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gtu.check(); err != nil {
				return 0, err
			}
			gtu.mutation = mutation
			affected, err = gtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gtu.hooks) - 1; i >= 0; i-- {
			if gtu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gtu *GlobalTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := gtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gtu *GlobalTemplateUpdate) Exec(ctx context.Context) error {
	_, err := gtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtu *GlobalTemplateUpdate) ExecX(ctx context.Context) {
	if err := gtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gtu *GlobalTemplateUpdate) defaults() {
	if _, ok := gtu.mutation.UpdatedAt(); !ok {
		v := globaltemplate.UpdateDefaultUpdatedAt()
		gtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gtu *GlobalTemplateUpdate) check() error {
	if v, ok := gtu.mutation.Name(); ok {
		if err := globaltemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (gtu *GlobalTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   globaltemplate.Table,
			Columns: globaltemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: globaltemplate.FieldID,
			},
		},
	}
	if ps := gtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gtu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: globaltemplate.FieldUpdatedAt,
		})
	}
	if value, ok := gtu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: globaltemplate.FieldDeletedAt,
		})
	}
	if gtu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: globaltemplate.FieldDeletedAt,
		})
	}
	if value, ok := gtu.mutation.ShopID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: globaltemplate.FieldShopID,
		})
	}
	if value, ok := gtu.mutation.AddedShopID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: globaltemplate.FieldShopID,
		})
	}
	if gtu.mutation.ShopIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: globaltemplate.FieldShopID,
		})
	}
	if value, ok := gtu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: globaltemplate.FieldName,
		})
	}
	if value, ok := gtu.mutation.ViewCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: globaltemplate.FieldViewCount,
		})
	}
	if value, ok := gtu.mutation.AddedViewCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: globaltemplate.FieldViewCount,
		})
	}
	if value, ok := gtu.mutation.InstallCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: globaltemplate.FieldInstallCount,
		})
	}
	if value, ok := gtu.mutation.AddedInstallCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: globaltemplate.FieldInstallCount,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{globaltemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GlobalTemplateUpdateOne is the builder for updating a single GlobalTemplate entity.
type GlobalTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GlobalTemplateMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (gtuo *GlobalTemplateUpdateOne) SetUpdatedAt(t time.Time) *GlobalTemplateUpdateOne {
	gtuo.mutation.SetUpdatedAt(t)
	return gtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (gtuo *GlobalTemplateUpdateOne) SetDeletedAt(t time.Time) *GlobalTemplateUpdateOne {
	gtuo.mutation.SetDeletedAt(t)
	return gtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gtuo *GlobalTemplateUpdateOne) SetNillableDeletedAt(t *time.Time) *GlobalTemplateUpdateOne {
	if t != nil {
		gtuo.SetDeletedAt(*t)
	}
	return gtuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gtuo *GlobalTemplateUpdateOne) ClearDeletedAt() *GlobalTemplateUpdateOne {
	gtuo.mutation.ClearDeletedAt()
	return gtuo
}

// SetShopID sets the "shop_id" field.
func (gtuo *GlobalTemplateUpdateOne) SetShopID(u uint64) *GlobalTemplateUpdateOne {
	gtuo.mutation.ResetShopID()
	gtuo.mutation.SetShopID(u)
	return gtuo
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (gtuo *GlobalTemplateUpdateOne) SetNillableShopID(u *uint64) *GlobalTemplateUpdateOne {
	if u != nil {
		gtuo.SetShopID(*u)
	}
	return gtuo
}

// AddShopID adds u to the "shop_id" field.
func (gtuo *GlobalTemplateUpdateOne) AddShopID(u uint64) *GlobalTemplateUpdateOne {
	gtuo.mutation.AddShopID(u)
	return gtuo
}

// ClearShopID clears the value of the "shop_id" field.
func (gtuo *GlobalTemplateUpdateOne) ClearShopID() *GlobalTemplateUpdateOne {
	gtuo.mutation.ClearShopID()
	return gtuo
}

// SetName sets the "name" field.
func (gtuo *GlobalTemplateUpdateOne) SetName(s string) *GlobalTemplateUpdateOne {
	gtuo.mutation.SetName(s)
	return gtuo
}

// SetViewCount sets the "view_count" field.
func (gtuo *GlobalTemplateUpdateOne) SetViewCount(i int) *GlobalTemplateUpdateOne {
	gtuo.mutation.ResetViewCount()
	gtuo.mutation.SetViewCount(i)
	return gtuo
}

// AddViewCount adds i to the "view_count" field.
func (gtuo *GlobalTemplateUpdateOne) AddViewCount(i int) *GlobalTemplateUpdateOne {
	gtuo.mutation.AddViewCount(i)
	return gtuo
}

// SetInstallCount sets the "install_count" field.
func (gtuo *GlobalTemplateUpdateOne) SetInstallCount(i int) *GlobalTemplateUpdateOne {
	gtuo.mutation.ResetInstallCount()
	gtuo.mutation.SetInstallCount(i)
	return gtuo
}

// AddInstallCount adds i to the "install_count" field.
func (gtuo *GlobalTemplateUpdateOne) AddInstallCount(i int) *GlobalTemplateUpdateOne {
	gtuo.mutation.AddInstallCount(i)
	return gtuo
}

// Mutation returns the GlobalTemplateMutation object of the builder.
func (gtuo *GlobalTemplateUpdateOne) Mutation() *GlobalTemplateMutation {
	return gtuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gtuo *GlobalTemplateUpdateOne) Select(field string, fields ...string) *GlobalTemplateUpdateOne {
	gtuo.fields = append([]string{field}, fields...)
	return gtuo
}

// Save executes the query and returns the updated GlobalTemplate entity.
func (gtuo *GlobalTemplateUpdateOne) Save(ctx context.Context) (*GlobalTemplate, error) {
	var (
		err  error
		node *GlobalTemplate
	)
	gtuo.defaults()
	if len(gtuo.hooks) == 0 {
		if err = gtuo.check(); err != nil {
			return nil, err
		}
		node, err = gtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GlobalTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gtuo.check(); err != nil {
				return nil, err
			}
			gtuo.mutation = mutation
			node, err = gtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gtuo.hooks) - 1; i >= 0; i-- {
			if gtuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gtuo *GlobalTemplateUpdateOne) SaveX(ctx context.Context) *GlobalTemplate {
	node, err := gtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gtuo *GlobalTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := gtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtuo *GlobalTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := gtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gtuo *GlobalTemplateUpdateOne) defaults() {
	if _, ok := gtuo.mutation.UpdatedAt(); !ok {
		v := globaltemplate.UpdateDefaultUpdatedAt()
		gtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gtuo *GlobalTemplateUpdateOne) check() error {
	if v, ok := gtuo.mutation.Name(); ok {
		if err := globaltemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (gtuo *GlobalTemplateUpdateOne) sqlSave(ctx context.Context) (_node *GlobalTemplate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   globaltemplate.Table,
			Columns: globaltemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: globaltemplate.FieldID,
			},
		},
	}
	id, ok := gtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GlobalTemplate.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := gtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, globaltemplate.FieldID)
		for _, f := range fields {
			if !globaltemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != globaltemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gtuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: globaltemplate.FieldUpdatedAt,
		})
	}
	if value, ok := gtuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: globaltemplate.FieldDeletedAt,
		})
	}
	if gtuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: globaltemplate.FieldDeletedAt,
		})
	}
	if value, ok := gtuo.mutation.ShopID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: globaltemplate.FieldShopID,
		})
	}
	if value, ok := gtuo.mutation.AddedShopID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: globaltemplate.FieldShopID,
		})
	}
	if gtuo.mutation.ShopIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: globaltemplate.FieldShopID,
		})
	}
	if value, ok := gtuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: globaltemplate.FieldName,
		})
	}
	if value, ok := gtuo.mutation.ViewCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: globaltemplate.FieldViewCount,
		})
	}
	if value, ok := gtuo.mutation.AddedViewCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: globaltemplate.FieldViewCount,
		})
	}
	if value, ok := gtuo.mutation.InstallCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: globaltemplate.FieldInstallCount,
		})
	}
	if value, ok := gtuo.mutation.AddedInstallCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: globaltemplate.FieldInstallCount,
		})
	}
	_node = &GlobalTemplate{config: gtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{globaltemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
