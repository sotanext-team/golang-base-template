// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/componentproperty"
	"app-api/ent/customcomponent"
	"app-api/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ComponentPropertyUpdate is the builder for updating ComponentProperty entities.
type ComponentPropertyUpdate struct {
	config
	hooks    []Hook
	mutation *ComponentPropertyMutation
}

// Where appends a list predicates to the ComponentPropertyUpdate builder.
func (cpu *ComponentPropertyUpdate) Where(ps ...predicate.ComponentProperty) *ComponentPropertyUpdate {
	cpu.mutation.Where(ps...)
	return cpu
}

// SetUpdatedAt sets the "updated_at" field.
func (cpu *ComponentPropertyUpdate) SetUpdatedAt(t time.Time) *ComponentPropertyUpdate {
	cpu.mutation.SetUpdatedAt(t)
	return cpu
}

// SetComponentID sets the "component_id" field.
func (cpu *ComponentPropertyUpdate) SetComponentID(u uint64) *ComponentPropertyUpdate {
	cpu.mutation.SetComponentID(u)
	return cpu
}

// SetName sets the "name" field.
func (cpu *ComponentPropertyUpdate) SetName(s string) *ComponentPropertyUpdate {
	cpu.mutation.SetName(s)
	return cpu
}

// SetValue sets the "value" field.
func (cpu *ComponentPropertyUpdate) SetValue(s string) *ComponentPropertyUpdate {
	cpu.mutation.SetValue(s)
	return cpu
}

// SetComponent sets the "component" edge to the CustomComponent entity.
func (cpu *ComponentPropertyUpdate) SetComponent(c *CustomComponent) *ComponentPropertyUpdate {
	return cpu.SetComponentID(c.ID)
}

// Mutation returns the ComponentPropertyMutation object of the builder.
func (cpu *ComponentPropertyUpdate) Mutation() *ComponentPropertyMutation {
	return cpu.mutation
}

// ClearComponent clears the "component" edge to the CustomComponent entity.
func (cpu *ComponentPropertyUpdate) ClearComponent() *ComponentPropertyUpdate {
	cpu.mutation.ClearComponent()
	return cpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *ComponentPropertyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cpu.defaults()
	if len(cpu.hooks) == 0 {
		if err = cpu.check(); err != nil {
			return 0, err
		}
		affected, err = cpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComponentPropertyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cpu.check(); err != nil {
				return 0, err
			}
			cpu.mutation = mutation
			affected, err = cpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cpu.hooks) - 1; i >= 0; i-- {
			if cpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *ComponentPropertyUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *ComponentPropertyUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *ComponentPropertyUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpu *ComponentPropertyUpdate) defaults() {
	if _, ok := cpu.mutation.UpdatedAt(); !ok {
		v := componentproperty.UpdateDefaultUpdatedAt()
		cpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpu *ComponentPropertyUpdate) check() error {
	if _, ok := cpu.mutation.ComponentID(); cpu.mutation.ComponentCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"component\"")
	}
	return nil
}

func (cpu *ComponentPropertyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   componentproperty.Table,
			Columns: componentproperty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: componentproperty.FieldID,
			},
		},
	}
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: componentproperty.FieldUpdatedAt,
		})
	}
	if value, ok := cpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: componentproperty.FieldName,
		})
	}
	if value, ok := cpu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: componentproperty.FieldValue,
		})
	}
	if cpu.mutation.ComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   componentproperty.ComponentTable,
			Columns: []string{componentproperty.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: customcomponent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   componentproperty.ComponentTable,
			Columns: []string{componentproperty.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: customcomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{componentproperty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ComponentPropertyUpdateOne is the builder for updating a single ComponentProperty entity.
type ComponentPropertyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ComponentPropertyMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cpuo *ComponentPropertyUpdateOne) SetUpdatedAt(t time.Time) *ComponentPropertyUpdateOne {
	cpuo.mutation.SetUpdatedAt(t)
	return cpuo
}

// SetComponentID sets the "component_id" field.
func (cpuo *ComponentPropertyUpdateOne) SetComponentID(u uint64) *ComponentPropertyUpdateOne {
	cpuo.mutation.SetComponentID(u)
	return cpuo
}

// SetName sets the "name" field.
func (cpuo *ComponentPropertyUpdateOne) SetName(s string) *ComponentPropertyUpdateOne {
	cpuo.mutation.SetName(s)
	return cpuo
}

// SetValue sets the "value" field.
func (cpuo *ComponentPropertyUpdateOne) SetValue(s string) *ComponentPropertyUpdateOne {
	cpuo.mutation.SetValue(s)
	return cpuo
}

// SetComponent sets the "component" edge to the CustomComponent entity.
func (cpuo *ComponentPropertyUpdateOne) SetComponent(c *CustomComponent) *ComponentPropertyUpdateOne {
	return cpuo.SetComponentID(c.ID)
}

// Mutation returns the ComponentPropertyMutation object of the builder.
func (cpuo *ComponentPropertyUpdateOne) Mutation() *ComponentPropertyMutation {
	return cpuo.mutation
}

// ClearComponent clears the "component" edge to the CustomComponent entity.
func (cpuo *ComponentPropertyUpdateOne) ClearComponent() *ComponentPropertyUpdateOne {
	cpuo.mutation.ClearComponent()
	return cpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuo *ComponentPropertyUpdateOne) Select(field string, fields ...string) *ComponentPropertyUpdateOne {
	cpuo.fields = append([]string{field}, fields...)
	return cpuo
}

// Save executes the query and returns the updated ComponentProperty entity.
func (cpuo *ComponentPropertyUpdateOne) Save(ctx context.Context) (*ComponentProperty, error) {
	var (
		err  error
		node *ComponentProperty
	)
	cpuo.defaults()
	if len(cpuo.hooks) == 0 {
		if err = cpuo.check(); err != nil {
			return nil, err
		}
		node, err = cpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComponentPropertyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cpuo.check(); err != nil {
				return nil, err
			}
			cpuo.mutation = mutation
			node, err = cpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cpuo.hooks) - 1; i >= 0; i-- {
			if cpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *ComponentPropertyUpdateOne) SaveX(ctx context.Context) *ComponentProperty {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *ComponentPropertyUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *ComponentPropertyUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpuo *ComponentPropertyUpdateOne) defaults() {
	if _, ok := cpuo.mutation.UpdatedAt(); !ok {
		v := componentproperty.UpdateDefaultUpdatedAt()
		cpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpuo *ComponentPropertyUpdateOne) check() error {
	if _, ok := cpuo.mutation.ComponentID(); cpuo.mutation.ComponentCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"component\"")
	}
	return nil
}

func (cpuo *ComponentPropertyUpdateOne) sqlSave(ctx context.Context) (_node *ComponentProperty, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   componentproperty.Table,
			Columns: componentproperty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: componentproperty.FieldID,
			},
		},
	}
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ComponentProperty.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, componentproperty.FieldID)
		for _, f := range fields {
			if !componentproperty.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != componentproperty.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: componentproperty.FieldUpdatedAt,
		})
	}
	if value, ok := cpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: componentproperty.FieldName,
		})
	}
	if value, ok := cpuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: componentproperty.FieldValue,
		})
	}
	if cpuo.mutation.ComponentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   componentproperty.ComponentTable,
			Columns: []string{componentproperty.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: customcomponent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   componentproperty.ComponentTable,
			Columns: []string{componentproperty.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: customcomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ComponentProperty{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{componentproperty.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
