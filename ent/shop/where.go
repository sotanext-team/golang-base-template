// Code generated by entc, DO NOT EDIT.

package shop

import (
	"app-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// ShopName applies equality check predicate on the "shop_name" field. It's identical to ShopNameEQ.
func ShopName(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopName), v))
	})
}

// DefaultDomain applies equality check predicate on the "default_domain" field. It's identical to DefaultDomainEQ.
func DefaultDomain(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultDomain), v))
	})
}

// CustomDomain applies equality check predicate on the "custom_domain" field. It's identical to CustomDomainEQ.
func CustomDomain(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomDomain), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// ShopNameEQ applies the EQ predicate on the "shop_name" field.
func ShopNameEQ(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopName), v))
	})
}

// ShopNameNEQ applies the NEQ predicate on the "shop_name" field.
func ShopNameNEQ(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShopName), v))
	})
}

// ShopNameIn applies the In predicate on the "shop_name" field.
func ShopNameIn(vs ...string) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShopName), v...))
	})
}

// ShopNameNotIn applies the NotIn predicate on the "shop_name" field.
func ShopNameNotIn(vs ...string) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShopName), v...))
	})
}

// ShopNameGT applies the GT predicate on the "shop_name" field.
func ShopNameGT(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShopName), v))
	})
}

// ShopNameGTE applies the GTE predicate on the "shop_name" field.
func ShopNameGTE(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShopName), v))
	})
}

// ShopNameLT applies the LT predicate on the "shop_name" field.
func ShopNameLT(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShopName), v))
	})
}

// ShopNameLTE applies the LTE predicate on the "shop_name" field.
func ShopNameLTE(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShopName), v))
	})
}

// ShopNameContains applies the Contains predicate on the "shop_name" field.
func ShopNameContains(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShopName), v))
	})
}

// ShopNameHasPrefix applies the HasPrefix predicate on the "shop_name" field.
func ShopNameHasPrefix(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShopName), v))
	})
}

// ShopNameHasSuffix applies the HasSuffix predicate on the "shop_name" field.
func ShopNameHasSuffix(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShopName), v))
	})
}

// ShopNameEqualFold applies the EqualFold predicate on the "shop_name" field.
func ShopNameEqualFold(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShopName), v))
	})
}

// ShopNameContainsFold applies the ContainsFold predicate on the "shop_name" field.
func ShopNameContainsFold(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShopName), v))
	})
}

// DefaultDomainEQ applies the EQ predicate on the "default_domain" field.
func DefaultDomainEQ(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultDomain), v))
	})
}

// DefaultDomainNEQ applies the NEQ predicate on the "default_domain" field.
func DefaultDomainNEQ(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultDomain), v))
	})
}

// DefaultDomainIn applies the In predicate on the "default_domain" field.
func DefaultDomainIn(vs ...string) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultDomain), v...))
	})
}

// DefaultDomainNotIn applies the NotIn predicate on the "default_domain" field.
func DefaultDomainNotIn(vs ...string) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultDomain), v...))
	})
}

// DefaultDomainGT applies the GT predicate on the "default_domain" field.
func DefaultDomainGT(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultDomain), v))
	})
}

// DefaultDomainGTE applies the GTE predicate on the "default_domain" field.
func DefaultDomainGTE(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultDomain), v))
	})
}

// DefaultDomainLT applies the LT predicate on the "default_domain" field.
func DefaultDomainLT(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultDomain), v))
	})
}

// DefaultDomainLTE applies the LTE predicate on the "default_domain" field.
func DefaultDomainLTE(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultDomain), v))
	})
}

// DefaultDomainContains applies the Contains predicate on the "default_domain" field.
func DefaultDomainContains(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDefaultDomain), v))
	})
}

// DefaultDomainHasPrefix applies the HasPrefix predicate on the "default_domain" field.
func DefaultDomainHasPrefix(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDefaultDomain), v))
	})
}

// DefaultDomainHasSuffix applies the HasSuffix predicate on the "default_domain" field.
func DefaultDomainHasSuffix(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDefaultDomain), v))
	})
}

// DefaultDomainEqualFold applies the EqualFold predicate on the "default_domain" field.
func DefaultDomainEqualFold(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDefaultDomain), v))
	})
}

// DefaultDomainContainsFold applies the ContainsFold predicate on the "default_domain" field.
func DefaultDomainContainsFold(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDefaultDomain), v))
	})
}

// CustomDomainEQ applies the EQ predicate on the "custom_domain" field.
func CustomDomainEQ(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomDomain), v))
	})
}

// CustomDomainNEQ applies the NEQ predicate on the "custom_domain" field.
func CustomDomainNEQ(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomDomain), v))
	})
}

// CustomDomainIn applies the In predicate on the "custom_domain" field.
func CustomDomainIn(vs ...string) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustomDomain), v...))
	})
}

// CustomDomainNotIn applies the NotIn predicate on the "custom_domain" field.
func CustomDomainNotIn(vs ...string) predicate.Shop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Shop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustomDomain), v...))
	})
}

// CustomDomainGT applies the GT predicate on the "custom_domain" field.
func CustomDomainGT(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomDomain), v))
	})
}

// CustomDomainGTE applies the GTE predicate on the "custom_domain" field.
func CustomDomainGTE(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomDomain), v))
	})
}

// CustomDomainLT applies the LT predicate on the "custom_domain" field.
func CustomDomainLT(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomDomain), v))
	})
}

// CustomDomainLTE applies the LTE predicate on the "custom_domain" field.
func CustomDomainLTE(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomDomain), v))
	})
}

// CustomDomainContains applies the Contains predicate on the "custom_domain" field.
func CustomDomainContains(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustomDomain), v))
	})
}

// CustomDomainHasPrefix applies the HasPrefix predicate on the "custom_domain" field.
func CustomDomainHasPrefix(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustomDomain), v))
	})
}

// CustomDomainHasSuffix applies the HasSuffix predicate on the "custom_domain" field.
func CustomDomainHasSuffix(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustomDomain), v))
	})
}

// CustomDomainEqualFold applies the EqualFold predicate on the "custom_domain" field.
func CustomDomainEqualFold(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustomDomain), v))
	})
}

// CustomDomainContainsFold applies the ContainsFold predicate on the "custom_domain" field.
func CustomDomainContainsFold(v string) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustomDomain), v))
	})
}

// HasThemes applies the HasEdge predicate on the "themes" edge.
func HasThemes() predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ThemesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ThemesTable, ThemesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasThemesWith applies the HasEdge predicate on the "themes" edge with a given conditions (other predicates).
func HasThemesWith(preds ...predicate.Theme) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ThemesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ThemesTable, ThemesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasThemeTemplates applies the HasEdge predicate on the "themeTemplates" edge.
func HasThemeTemplates() predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ThemeTemplatesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ThemeTemplatesTable, ThemeTemplatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasThemeTemplatesWith applies the HasEdge predicate on the "themeTemplates" edge with a given conditions (other predicates).
func HasThemeTemplatesWith(preds ...predicate.ThemeTemplate) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ThemeTemplatesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ThemeTemplatesTable, ThemeTemplatesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Shop) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Shop) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Shop) predicate.Shop {
	return predicate.Shop(func(s *sql.Selector) {
		p(s.Not())
	})
}
