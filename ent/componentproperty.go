// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/componentproperty"
	"app-api/ent/customcomponent"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ComponentProperty is the model entity for the ComponentProperty schema.
type ComponentProperty struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// ComponentID holds the value of the "component_id" field.
	ComponentID uint64 `json:"componentID"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ComponentPropertyQuery when eager-loading is set.
	Edges ComponentPropertyEdges `json:"edges"`
}

// ComponentPropertyEdges holds the relations/edges for other nodes in the graph.
type ComponentPropertyEdges struct {
	// Component holds the value of the component edge.
	Component *CustomComponent `json:"component,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ComponentOrErr returns the Component value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ComponentPropertyEdges) ComponentOrErr() (*CustomComponent, error) {
	if e.loadedTypes[0] {
		if e.Component == nil {
			// The edge component was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: customcomponent.Label}
		}
		return e.Component, nil
	}
	return nil, &NotLoadedError{edge: "component"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ComponentProperty) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case componentproperty.FieldID, componentproperty.FieldComponentID:
			values[i] = new(sql.NullInt64)
		case componentproperty.FieldName, componentproperty.FieldValue:
			values[i] = new(sql.NullString)
		case componentproperty.FieldCreatedAt, componentproperty.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ComponentProperty", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ComponentProperty fields.
func (cp *ComponentProperty) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case componentproperty.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cp.ID = uint64(value.Int64)
		case componentproperty.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cp.CreatedAt = value.Time
			}
		case componentproperty.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cp.UpdatedAt = value.Time
			}
		case componentproperty.FieldComponentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field component_id", values[i])
			} else if value.Valid {
				cp.ComponentID = uint64(value.Int64)
			}
		case componentproperty.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cp.Name = value.String
			}
		case componentproperty.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				cp.Value = value.String
			}
		}
	}
	return nil
}

// QueryComponent queries the "component" edge of the ComponentProperty entity.
func (cp *ComponentProperty) QueryComponent() *CustomComponentQuery {
	return (&ComponentPropertyClient{config: cp.config}).QueryComponent(cp)
}

// Update returns a builder for updating this ComponentProperty.
// Note that you need to call ComponentProperty.Unwrap() before calling this method if this ComponentProperty
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *ComponentProperty) Update() *ComponentPropertyUpdateOne {
	return (&ComponentPropertyClient{config: cp.config}).UpdateOne(cp)
}

// Unwrap unwraps the ComponentProperty entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *ComponentProperty) Unwrap() *ComponentProperty {
	tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ComponentProperty is not a transactional entity")
	}
	cp.config.driver = tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *ComponentProperty) String() string {
	var builder strings.Builder
	builder.WriteString("ComponentProperty(")
	builder.WriteString(fmt.Sprintf("id=%v", cp.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(cp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(cp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", component_id=")
	builder.WriteString(fmt.Sprintf("%v", cp.ComponentID))
	builder.WriteString(", name=")
	builder.WriteString(cp.Name)
	builder.WriteString(", value=")
	builder.WriteString(cp.Value)
	builder.WriteByte(')')
	return builder.String()
}

// ComponentProperties is a parsable slice of ComponentProperty.
type ComponentProperties []*ComponentProperty

func (cp ComponentProperties) config(cfg config) {
	for _i := range cp {
		cp[_i].config = cfg
	}
}
