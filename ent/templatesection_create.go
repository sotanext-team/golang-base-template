// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/bktemplatesection"
	"app-api/ent/templatesection"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TemplateSectionCreate is the builder for creating a TemplateSection entity.
type TemplateSectionCreate struct {
	config
	mutation *TemplateSectionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tsc *TemplateSectionCreate) SetCreatedAt(t time.Time) *TemplateSectionCreate {
	tsc.mutation.SetCreatedAt(t)
	return tsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsc *TemplateSectionCreate) SetNillableCreatedAt(t *time.Time) *TemplateSectionCreate {
	if t != nil {
		tsc.SetCreatedAt(*t)
	}
	return tsc
}

// SetUpdatedAt sets the "updated_at" field.
func (tsc *TemplateSectionCreate) SetUpdatedAt(t time.Time) *TemplateSectionCreate {
	tsc.mutation.SetUpdatedAt(t)
	return tsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tsc *TemplateSectionCreate) SetNillableUpdatedAt(t *time.Time) *TemplateSectionCreate {
	if t != nil {
		tsc.SetUpdatedAt(*t)
	}
	return tsc
}

// SetDeletedAt sets the "deleted_at" field.
func (tsc *TemplateSectionCreate) SetDeletedAt(t time.Time) *TemplateSectionCreate {
	tsc.mutation.SetDeletedAt(t)
	return tsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsc *TemplateSectionCreate) SetNillableDeletedAt(t *time.Time) *TemplateSectionCreate {
	if t != nil {
		tsc.SetDeletedAt(*t)
	}
	return tsc
}

// SetShopID sets the "shop_id" field.
func (tsc *TemplateSectionCreate) SetShopID(u uint64) *TemplateSectionCreate {
	tsc.mutation.SetShopID(u)
	return tsc
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (tsc *TemplateSectionCreate) SetNillableShopID(u *uint64) *TemplateSectionCreate {
	if u != nil {
		tsc.SetShopID(*u)
	}
	return tsc
}

// SetGlobalSectionID sets the "global_section_id" field.
func (tsc *TemplateSectionCreate) SetGlobalSectionID(u uint64) *TemplateSectionCreate {
	tsc.mutation.SetGlobalSectionID(u)
	return tsc
}

// SetNillableGlobalSectionID sets the "global_section_id" field if the given value is not nil.
func (tsc *TemplateSectionCreate) SetNillableGlobalSectionID(u *uint64) *TemplateSectionCreate {
	if u != nil {
		tsc.SetGlobalSectionID(*u)
	}
	return tsc
}

// SetThemeTemplateID sets the "theme_template_id" field.
func (tsc *TemplateSectionCreate) SetThemeTemplateID(u uint64) *TemplateSectionCreate {
	tsc.mutation.SetThemeTemplateID(u)
	return tsc
}

// SetNillableThemeTemplateID sets the "theme_template_id" field if the given value is not nil.
func (tsc *TemplateSectionCreate) SetNillableThemeTemplateID(u *uint64) *TemplateSectionCreate {
	if u != nil {
		tsc.SetThemeTemplateID(*u)
	}
	return tsc
}

// SetCurrentVersionID sets the "current_version_id" field.
func (tsc *TemplateSectionCreate) SetCurrentVersionID(u uint64) *TemplateSectionCreate {
	tsc.mutation.SetCurrentVersionID(u)
	return tsc
}

// SetNillableCurrentVersionID sets the "current_version_id" field if the given value is not nil.
func (tsc *TemplateSectionCreate) SetNillableCurrentVersionID(u *uint64) *TemplateSectionCreate {
	if u != nil {
		tsc.SetCurrentVersionID(*u)
	}
	return tsc
}

// SetCid sets the "cid" field.
func (tsc *TemplateSectionCreate) SetCid(s string) *TemplateSectionCreate {
	tsc.mutation.SetCid(s)
	return tsc
}

// SetName sets the "name" field.
func (tsc *TemplateSectionCreate) SetName(s string) *TemplateSectionCreate {
	tsc.mutation.SetName(s)
	return tsc
}

// SetArea sets the "area" field.
func (tsc *TemplateSectionCreate) SetArea(t templatesection.Area) *TemplateSectionCreate {
	tsc.mutation.SetArea(t)
	return tsc
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (tsc *TemplateSectionCreate) SetNillableArea(t *templatesection.Area) *TemplateSectionCreate {
	if t != nil {
		tsc.SetArea(*t)
	}
	return tsc
}

// SetComponent sets the "component" field.
func (tsc *TemplateSectionCreate) SetComponent(s string) *TemplateSectionCreate {
	tsc.mutation.SetComponent(s)
	return tsc
}

// SetPosition sets the "position" field.
func (tsc *TemplateSectionCreate) SetPosition(i int) *TemplateSectionCreate {
	tsc.mutation.SetPosition(i)
	return tsc
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (tsc *TemplateSectionCreate) SetNillablePosition(i *int) *TemplateSectionCreate {
	if i != nil {
		tsc.SetPosition(*i)
	}
	return tsc
}

// SetDisplay sets the "display" field.
func (tsc *TemplateSectionCreate) SetDisplay(b bool) *TemplateSectionCreate {
	tsc.mutation.SetDisplay(b)
	return tsc
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (tsc *TemplateSectionCreate) SetNillableDisplay(b *bool) *TemplateSectionCreate {
	if b != nil {
		tsc.SetDisplay(*b)
	}
	return tsc
}

// SetID sets the "id" field.
func (tsc *TemplateSectionCreate) SetID(u uint64) *TemplateSectionCreate {
	tsc.mutation.SetID(u)
	return tsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tsc *TemplateSectionCreate) SetNillableID(u *uint64) *TemplateSectionCreate {
	if u != nil {
		tsc.SetID(*u)
	}
	return tsc
}

// AddRevisionIDs adds the "revisions" edge to the BkTemplateSection entity by IDs.
func (tsc *TemplateSectionCreate) AddRevisionIDs(ids ...uint64) *TemplateSectionCreate {
	tsc.mutation.AddRevisionIDs(ids...)
	return tsc
}

// AddRevisions adds the "revisions" edges to the BkTemplateSection entity.
func (tsc *TemplateSectionCreate) AddRevisions(b ...*BkTemplateSection) *TemplateSectionCreate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tsc.AddRevisionIDs(ids...)
}

// Mutation returns the TemplateSectionMutation object of the builder.
func (tsc *TemplateSectionCreate) Mutation() *TemplateSectionMutation {
	return tsc.mutation
}

// Save creates the TemplateSection in the database.
func (tsc *TemplateSectionCreate) Save(ctx context.Context) (*TemplateSection, error) {
	var (
		err  error
		node *TemplateSection
	)
	tsc.defaults()
	if len(tsc.hooks) == 0 {
		if err = tsc.check(); err != nil {
			return nil, err
		}
		node, err = tsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TemplateSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tsc.check(); err != nil {
				return nil, err
			}
			tsc.mutation = mutation
			if node, err = tsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tsc.hooks) - 1; i >= 0; i-- {
			if tsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TemplateSectionCreate) SaveX(ctx context.Context) *TemplateSection {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *TemplateSectionCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *TemplateSectionCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsc *TemplateSectionCreate) defaults() {
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		v := templatesection.DefaultCreatedAt()
		tsc.mutation.SetCreatedAt(v)
	}
	if _, ok := tsc.mutation.UpdatedAt(); !ok {
		v := templatesection.DefaultUpdatedAt()
		tsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tsc.mutation.Area(); !ok {
		v := templatesection.DefaultArea
		tsc.mutation.SetArea(v)
	}
	if _, ok := tsc.mutation.Position(); !ok {
		v := templatesection.DefaultPosition
		tsc.mutation.SetPosition(v)
	}
	if _, ok := tsc.mutation.Display(); !ok {
		v := templatesection.DefaultDisplay
		tsc.mutation.SetDisplay(v)
	}
	if _, ok := tsc.mutation.ID(); !ok {
		v := templatesection.DefaultID()
		tsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TemplateSectionCreate) check() error {
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := tsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := tsc.mutation.Cid(); !ok {
		return &ValidationError{Name: "cid", err: errors.New(`ent: missing required field "cid"`)}
	}
	if v, ok := tsc.mutation.Cid(); ok {
		if err := templatesection.CidValidator(v); err != nil {
			return &ValidationError{Name: "cid", err: fmt.Errorf(`ent: validator failed for field "cid": %w`, err)}
		}
	}
	if _, ok := tsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := tsc.mutation.Name(); ok {
		if err := templatesection.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := tsc.mutation.Area(); !ok {
		return &ValidationError{Name: "area", err: errors.New(`ent: missing required field "area"`)}
	}
	if v, ok := tsc.mutation.Area(); ok {
		if err := templatesection.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf(`ent: validator failed for field "area": %w`, err)}
		}
	}
	if _, ok := tsc.mutation.Component(); !ok {
		return &ValidationError{Name: "component", err: errors.New(`ent: missing required field "component"`)}
	}
	if _, ok := tsc.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "position"`)}
	}
	if _, ok := tsc.mutation.Display(); !ok {
		return &ValidationError{Name: "display", err: errors.New(`ent: missing required field "display"`)}
	}
	return nil
}

func (tsc *TemplateSectionCreate) sqlSave(ctx context.Context) (*TemplateSection, error) {
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (tsc *TemplateSectionCreate) createSpec() (*TemplateSection, *sqlgraph.CreateSpec) {
	var (
		_node = &TemplateSection{config: tsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: templatesection.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: templatesection.FieldID,
			},
		}
	)
	if id, ok := tsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: templatesection.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: templatesection.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tsc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: templatesection.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := tsc.mutation.ShopID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldShopID,
		})
		_node.ShopID = value
	}
	if value, ok := tsc.mutation.GlobalSectionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldGlobalSectionID,
		})
		_node.GlobalSectionID = value
	}
	if value, ok := tsc.mutation.ThemeTemplateID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldThemeTemplateID,
		})
		_node.ThemeTemplateID = value
	}
	if value, ok := tsc.mutation.CurrentVersionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldCurrentVersionID,
		})
		_node.CurrentVersionID = value
	}
	if value, ok := tsc.mutation.Cid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatesection.FieldCid,
		})
		_node.Cid = value
	}
	if value, ok := tsc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatesection.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tsc.mutation.Area(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: templatesection.FieldArea,
		})
		_node.Area = value
	}
	if value, ok := tsc.mutation.Component(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatesection.FieldComponent,
		})
		_node.Component = value
	}
	if value, ok := tsc.mutation.Position(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: templatesection.FieldPosition,
		})
		_node.Position = value
	}
	if value, ok := tsc.mutation.Display(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: templatesection.FieldDisplay,
		})
		_node.Display = value
	}
	if nodes := tsc.mutation.RevisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templatesection.RevisionsTable,
			Columns: []string{templatesection.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bktemplatesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TemplateSectionCreateBulk is the builder for creating many TemplateSection entities in bulk.
type TemplateSectionCreateBulk struct {
	config
	builders []*TemplateSectionCreate
}

// Save creates the TemplateSection entities in the database.
func (tscb *TemplateSectionCreateBulk) Save(ctx context.Context) ([]*TemplateSection, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TemplateSection, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TemplateSectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TemplateSectionCreateBulk) SaveX(ctx context.Context) []*TemplateSection {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *TemplateSectionCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *TemplateSectionCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}
