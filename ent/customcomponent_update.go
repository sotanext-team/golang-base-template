// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/componentproperty"
	"app-api/ent/customcomponent"
	"app-api/ent/predicate"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomComponentUpdate is the builder for updating CustomComponent entities.
type CustomComponentUpdate struct {
	config
	hooks    []Hook
	mutation *CustomComponentMutation
}

// Where appends a list predicates to the CustomComponentUpdate builder.
func (ccu *CustomComponentUpdate) Where(ps ...predicate.CustomComponent) *CustomComponentUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetUpdatedAt sets the "updated_at" field.
func (ccu *CustomComponentUpdate) SetUpdatedAt(t time.Time) *CustomComponentUpdate {
	ccu.mutation.SetUpdatedAt(t)
	return ccu
}

// SetShopID sets the "shop_id" field.
func (ccu *CustomComponentUpdate) SetShopID(u uint64) *CustomComponentUpdate {
	ccu.mutation.ResetShopID()
	ccu.mutation.SetShopID(u)
	return ccu
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (ccu *CustomComponentUpdate) SetNillableShopID(u *uint64) *CustomComponentUpdate {
	if u != nil {
		ccu.SetShopID(*u)
	}
	return ccu
}

// AddShopID adds u to the "shop_id" field.
func (ccu *CustomComponentUpdate) AddShopID(u uint64) *CustomComponentUpdate {
	ccu.mutation.AddShopID(u)
	return ccu
}

// ClearShopID clears the value of the "shop_id" field.
func (ccu *CustomComponentUpdate) ClearShopID() *CustomComponentUpdate {
	ccu.mutation.ClearShopID()
	return ccu
}

// SetCreatedBy sets the "created_by" field.
func (ccu *CustomComponentUpdate) SetCreatedBy(u uint64) *CustomComponentUpdate {
	ccu.mutation.ResetCreatedBy()
	ccu.mutation.SetCreatedBy(u)
	return ccu
}

// AddCreatedBy adds u to the "created_by" field.
func (ccu *CustomComponentUpdate) AddCreatedBy(u uint64) *CustomComponentUpdate {
	ccu.mutation.AddCreatedBy(u)
	return ccu
}

// SetName sets the "name" field.
func (ccu *CustomComponentUpdate) SetName(s string) *CustomComponentUpdate {
	ccu.mutation.SetName(s)
	return ccu
}

// SetHandle sets the "handle" field.
func (ccu *CustomComponentUpdate) SetHandle(s string) *CustomComponentUpdate {
	ccu.mutation.SetHandle(s)
	return ccu
}

// SetContent sets the "content" field.
func (ccu *CustomComponentUpdate) SetContent(s string) *CustomComponentUpdate {
	ccu.mutation.SetContent(s)
	return ccu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ccu *CustomComponentUpdate) SetNillableContent(s *string) *CustomComponentUpdate {
	if s != nil {
		ccu.SetContent(*s)
	}
	return ccu
}

// ClearContent clears the value of the "content" field.
func (ccu *CustomComponentUpdate) ClearContent() *CustomComponentUpdate {
	ccu.mutation.ClearContent()
	return ccu
}

// SetDistURL sets the "dist_url" field.
func (ccu *CustomComponentUpdate) SetDistURL(s string) *CustomComponentUpdate {
	ccu.mutation.SetDistURL(s)
	return ccu
}

// SetNillableDistURL sets the "dist_url" field if the given value is not nil.
func (ccu *CustomComponentUpdate) SetNillableDistURL(s *string) *CustomComponentUpdate {
	if s != nil {
		ccu.SetDistURL(*s)
	}
	return ccu
}

// ClearDistURL clears the value of the "dist_url" field.
func (ccu *CustomComponentUpdate) ClearDistURL() *CustomComponentUpdate {
	ccu.mutation.ClearDistURL()
	return ccu
}

// SetIsDraft sets the "is_draft" field.
func (ccu *CustomComponentUpdate) SetIsDraft(b bool) *CustomComponentUpdate {
	ccu.mutation.SetIsDraft(b)
	return ccu
}

// SetNillableIsDraft sets the "is_draft" field if the given value is not nil.
func (ccu *CustomComponentUpdate) SetNillableIsDraft(b *bool) *CustomComponentUpdate {
	if b != nil {
		ccu.SetIsDraft(*b)
	}
	return ccu
}

// ClearIsDraft clears the value of the "is_draft" field.
func (ccu *CustomComponentUpdate) ClearIsDraft() *CustomComponentUpdate {
	ccu.mutation.ClearIsDraft()
	return ccu
}

// SetEntryFileName sets the "entry_file_name" field.
func (ccu *CustomComponentUpdate) SetEntryFileName(s string) *CustomComponentUpdate {
	ccu.mutation.SetEntryFileName(s)
	return ccu
}

// SetNillableEntryFileName sets the "entry_file_name" field if the given value is not nil.
func (ccu *CustomComponentUpdate) SetNillableEntryFileName(s *string) *CustomComponentUpdate {
	if s != nil {
		ccu.SetEntryFileName(*s)
	}
	return ccu
}

// ClearEntryFileName clears the value of the "entry_file_name" field.
func (ccu *CustomComponentUpdate) ClearEntryFileName() *CustomComponentUpdate {
	ccu.mutation.ClearEntryFileName()
	return ccu
}

// SetSessionID sets the "session_id" field.
func (ccu *CustomComponentUpdate) SetSessionID(u uint64) *CustomComponentUpdate {
	ccu.mutation.ResetSessionID()
	ccu.mutation.SetSessionID(u)
	return ccu
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (ccu *CustomComponentUpdate) SetNillableSessionID(u *uint64) *CustomComponentUpdate {
	if u != nil {
		ccu.SetSessionID(*u)
	}
	return ccu
}

// AddSessionID adds u to the "session_id" field.
func (ccu *CustomComponentUpdate) AddSessionID(u uint64) *CustomComponentUpdate {
	ccu.mutation.AddSessionID(u)
	return ccu
}

// ClearSessionID clears the value of the "session_id" field.
func (ccu *CustomComponentUpdate) ClearSessionID() *CustomComponentUpdate {
	ccu.mutation.ClearSessionID()
	return ccu
}

// AddPropIDs adds the "props" edge to the ComponentProperty entity by IDs.
func (ccu *CustomComponentUpdate) AddPropIDs(ids ...uint64) *CustomComponentUpdate {
	ccu.mutation.AddPropIDs(ids...)
	return ccu
}

// AddProps adds the "props" edges to the ComponentProperty entity.
func (ccu *CustomComponentUpdate) AddProps(c ...*ComponentProperty) *CustomComponentUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccu.AddPropIDs(ids...)
}

// Mutation returns the CustomComponentMutation object of the builder.
func (ccu *CustomComponentUpdate) Mutation() *CustomComponentMutation {
	return ccu.mutation
}

// ClearProps clears all "props" edges to the ComponentProperty entity.
func (ccu *CustomComponentUpdate) ClearProps() *CustomComponentUpdate {
	ccu.mutation.ClearProps()
	return ccu
}

// RemovePropIDs removes the "props" edge to ComponentProperty entities by IDs.
func (ccu *CustomComponentUpdate) RemovePropIDs(ids ...uint64) *CustomComponentUpdate {
	ccu.mutation.RemovePropIDs(ids...)
	return ccu
}

// RemoveProps removes "props" edges to ComponentProperty entities.
func (ccu *CustomComponentUpdate) RemoveProps(c ...*ComponentProperty) *CustomComponentUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccu.RemovePropIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *CustomComponentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ccu.defaults()
	if len(ccu.hooks) == 0 {
		affected, err = ccu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomComponentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ccu.mutation = mutation
			affected, err = ccu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ccu.hooks) - 1; i >= 0; i-- {
			if ccu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *CustomComponentUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *CustomComponentUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *CustomComponentUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccu *CustomComponentUpdate) defaults() {
	if _, ok := ccu.mutation.UpdatedAt(); !ok {
		v := customcomponent.UpdateDefaultUpdatedAt()
		ccu.mutation.SetUpdatedAt(v)
	}
}

func (ccu *CustomComponentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customcomponent.Table,
			Columns: customcomponent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: customcomponent.FieldID,
			},
		},
	}
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customcomponent.FieldUpdatedAt,
		})
	}
	if value, ok := ccu.mutation.ShopID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: customcomponent.FieldShopID,
		})
	}
	if value, ok := ccu.mutation.AddedShopID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: customcomponent.FieldShopID,
		})
	}
	if ccu.mutation.ShopIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: customcomponent.FieldShopID,
		})
	}
	if value, ok := ccu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: customcomponent.FieldCreatedBy,
		})
	}
	if value, ok := ccu.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: customcomponent.FieldCreatedBy,
		})
	}
	if value, ok := ccu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customcomponent.FieldName,
		})
	}
	if value, ok := ccu.mutation.Handle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customcomponent.FieldHandle,
		})
	}
	if value, ok := ccu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customcomponent.FieldContent,
		})
	}
	if ccu.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customcomponent.FieldContent,
		})
	}
	if value, ok := ccu.mutation.DistURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customcomponent.FieldDistURL,
		})
	}
	if ccu.mutation.DistURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customcomponent.FieldDistURL,
		})
	}
	if value, ok := ccu.mutation.IsDraft(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: customcomponent.FieldIsDraft,
		})
	}
	if ccu.mutation.IsDraftCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: customcomponent.FieldIsDraft,
		})
	}
	if value, ok := ccu.mutation.EntryFileName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customcomponent.FieldEntryFileName,
		})
	}
	if ccu.mutation.EntryFileNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customcomponent.FieldEntryFileName,
		})
	}
	if value, ok := ccu.mutation.SessionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: customcomponent.FieldSessionID,
		})
	}
	if value, ok := ccu.mutation.AddedSessionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: customcomponent.FieldSessionID,
		})
	}
	if ccu.mutation.SessionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: customcomponent.FieldSessionID,
		})
	}
	if ccu.mutation.PropsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customcomponent.PropsTable,
			Columns: []string{customcomponent.PropsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: componentproperty.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.RemovedPropsIDs(); len(nodes) > 0 && !ccu.mutation.PropsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customcomponent.PropsTable,
			Columns: []string{customcomponent.PropsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: componentproperty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.PropsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customcomponent.PropsTable,
			Columns: []string{customcomponent.PropsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: componentproperty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customcomponent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CustomComponentUpdateOne is the builder for updating a single CustomComponent entity.
type CustomComponentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomComponentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ccuo *CustomComponentUpdateOne) SetUpdatedAt(t time.Time) *CustomComponentUpdateOne {
	ccuo.mutation.SetUpdatedAt(t)
	return ccuo
}

// SetShopID sets the "shop_id" field.
func (ccuo *CustomComponentUpdateOne) SetShopID(u uint64) *CustomComponentUpdateOne {
	ccuo.mutation.ResetShopID()
	ccuo.mutation.SetShopID(u)
	return ccuo
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (ccuo *CustomComponentUpdateOne) SetNillableShopID(u *uint64) *CustomComponentUpdateOne {
	if u != nil {
		ccuo.SetShopID(*u)
	}
	return ccuo
}

// AddShopID adds u to the "shop_id" field.
func (ccuo *CustomComponentUpdateOne) AddShopID(u uint64) *CustomComponentUpdateOne {
	ccuo.mutation.AddShopID(u)
	return ccuo
}

// ClearShopID clears the value of the "shop_id" field.
func (ccuo *CustomComponentUpdateOne) ClearShopID() *CustomComponentUpdateOne {
	ccuo.mutation.ClearShopID()
	return ccuo
}

// SetCreatedBy sets the "created_by" field.
func (ccuo *CustomComponentUpdateOne) SetCreatedBy(u uint64) *CustomComponentUpdateOne {
	ccuo.mutation.ResetCreatedBy()
	ccuo.mutation.SetCreatedBy(u)
	return ccuo
}

// AddCreatedBy adds u to the "created_by" field.
func (ccuo *CustomComponentUpdateOne) AddCreatedBy(u uint64) *CustomComponentUpdateOne {
	ccuo.mutation.AddCreatedBy(u)
	return ccuo
}

// SetName sets the "name" field.
func (ccuo *CustomComponentUpdateOne) SetName(s string) *CustomComponentUpdateOne {
	ccuo.mutation.SetName(s)
	return ccuo
}

// SetHandle sets the "handle" field.
func (ccuo *CustomComponentUpdateOne) SetHandle(s string) *CustomComponentUpdateOne {
	ccuo.mutation.SetHandle(s)
	return ccuo
}

// SetContent sets the "content" field.
func (ccuo *CustomComponentUpdateOne) SetContent(s string) *CustomComponentUpdateOne {
	ccuo.mutation.SetContent(s)
	return ccuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ccuo *CustomComponentUpdateOne) SetNillableContent(s *string) *CustomComponentUpdateOne {
	if s != nil {
		ccuo.SetContent(*s)
	}
	return ccuo
}

// ClearContent clears the value of the "content" field.
func (ccuo *CustomComponentUpdateOne) ClearContent() *CustomComponentUpdateOne {
	ccuo.mutation.ClearContent()
	return ccuo
}

// SetDistURL sets the "dist_url" field.
func (ccuo *CustomComponentUpdateOne) SetDistURL(s string) *CustomComponentUpdateOne {
	ccuo.mutation.SetDistURL(s)
	return ccuo
}

// SetNillableDistURL sets the "dist_url" field if the given value is not nil.
func (ccuo *CustomComponentUpdateOne) SetNillableDistURL(s *string) *CustomComponentUpdateOne {
	if s != nil {
		ccuo.SetDistURL(*s)
	}
	return ccuo
}

// ClearDistURL clears the value of the "dist_url" field.
func (ccuo *CustomComponentUpdateOne) ClearDistURL() *CustomComponentUpdateOne {
	ccuo.mutation.ClearDistURL()
	return ccuo
}

// SetIsDraft sets the "is_draft" field.
func (ccuo *CustomComponentUpdateOne) SetIsDraft(b bool) *CustomComponentUpdateOne {
	ccuo.mutation.SetIsDraft(b)
	return ccuo
}

// SetNillableIsDraft sets the "is_draft" field if the given value is not nil.
func (ccuo *CustomComponentUpdateOne) SetNillableIsDraft(b *bool) *CustomComponentUpdateOne {
	if b != nil {
		ccuo.SetIsDraft(*b)
	}
	return ccuo
}

// ClearIsDraft clears the value of the "is_draft" field.
func (ccuo *CustomComponentUpdateOne) ClearIsDraft() *CustomComponentUpdateOne {
	ccuo.mutation.ClearIsDraft()
	return ccuo
}

// SetEntryFileName sets the "entry_file_name" field.
func (ccuo *CustomComponentUpdateOne) SetEntryFileName(s string) *CustomComponentUpdateOne {
	ccuo.mutation.SetEntryFileName(s)
	return ccuo
}

// SetNillableEntryFileName sets the "entry_file_name" field if the given value is not nil.
func (ccuo *CustomComponentUpdateOne) SetNillableEntryFileName(s *string) *CustomComponentUpdateOne {
	if s != nil {
		ccuo.SetEntryFileName(*s)
	}
	return ccuo
}

// ClearEntryFileName clears the value of the "entry_file_name" field.
func (ccuo *CustomComponentUpdateOne) ClearEntryFileName() *CustomComponentUpdateOne {
	ccuo.mutation.ClearEntryFileName()
	return ccuo
}

// SetSessionID sets the "session_id" field.
func (ccuo *CustomComponentUpdateOne) SetSessionID(u uint64) *CustomComponentUpdateOne {
	ccuo.mutation.ResetSessionID()
	ccuo.mutation.SetSessionID(u)
	return ccuo
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (ccuo *CustomComponentUpdateOne) SetNillableSessionID(u *uint64) *CustomComponentUpdateOne {
	if u != nil {
		ccuo.SetSessionID(*u)
	}
	return ccuo
}

// AddSessionID adds u to the "session_id" field.
func (ccuo *CustomComponentUpdateOne) AddSessionID(u uint64) *CustomComponentUpdateOne {
	ccuo.mutation.AddSessionID(u)
	return ccuo
}

// ClearSessionID clears the value of the "session_id" field.
func (ccuo *CustomComponentUpdateOne) ClearSessionID() *CustomComponentUpdateOne {
	ccuo.mutation.ClearSessionID()
	return ccuo
}

// AddPropIDs adds the "props" edge to the ComponentProperty entity by IDs.
func (ccuo *CustomComponentUpdateOne) AddPropIDs(ids ...uint64) *CustomComponentUpdateOne {
	ccuo.mutation.AddPropIDs(ids...)
	return ccuo
}

// AddProps adds the "props" edges to the ComponentProperty entity.
func (ccuo *CustomComponentUpdateOne) AddProps(c ...*ComponentProperty) *CustomComponentUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccuo.AddPropIDs(ids...)
}

// Mutation returns the CustomComponentMutation object of the builder.
func (ccuo *CustomComponentUpdateOne) Mutation() *CustomComponentMutation {
	return ccuo.mutation
}

// ClearProps clears all "props" edges to the ComponentProperty entity.
func (ccuo *CustomComponentUpdateOne) ClearProps() *CustomComponentUpdateOne {
	ccuo.mutation.ClearProps()
	return ccuo
}

// RemovePropIDs removes the "props" edge to ComponentProperty entities by IDs.
func (ccuo *CustomComponentUpdateOne) RemovePropIDs(ids ...uint64) *CustomComponentUpdateOne {
	ccuo.mutation.RemovePropIDs(ids...)
	return ccuo
}

// RemoveProps removes "props" edges to ComponentProperty entities.
func (ccuo *CustomComponentUpdateOne) RemoveProps(c ...*ComponentProperty) *CustomComponentUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccuo.RemovePropIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *CustomComponentUpdateOne) Select(field string, fields ...string) *CustomComponentUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated CustomComponent entity.
func (ccuo *CustomComponentUpdateOne) Save(ctx context.Context) (*CustomComponent, error) {
	var (
		err  error
		node *CustomComponent
	)
	ccuo.defaults()
	if len(ccuo.hooks) == 0 {
		node, err = ccuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomComponentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ccuo.mutation = mutation
			node, err = ccuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ccuo.hooks) - 1; i >= 0; i-- {
			if ccuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *CustomComponentUpdateOne) SaveX(ctx context.Context) *CustomComponent {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *CustomComponentUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *CustomComponentUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccuo *CustomComponentUpdateOne) defaults() {
	if _, ok := ccuo.mutation.UpdatedAt(); !ok {
		v := customcomponent.UpdateDefaultUpdatedAt()
		ccuo.mutation.SetUpdatedAt(v)
	}
}

func (ccuo *CustomComponentUpdateOne) sqlSave(ctx context.Context) (_node *CustomComponent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customcomponent.Table,
			Columns: customcomponent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: customcomponent.FieldID,
			},
		},
	}
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CustomComponent.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customcomponent.FieldID)
		for _, f := range fields {
			if !customcomponent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customcomponent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customcomponent.FieldUpdatedAt,
		})
	}
	if value, ok := ccuo.mutation.ShopID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: customcomponent.FieldShopID,
		})
	}
	if value, ok := ccuo.mutation.AddedShopID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: customcomponent.FieldShopID,
		})
	}
	if ccuo.mutation.ShopIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: customcomponent.FieldShopID,
		})
	}
	if value, ok := ccuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: customcomponent.FieldCreatedBy,
		})
	}
	if value, ok := ccuo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: customcomponent.FieldCreatedBy,
		})
	}
	if value, ok := ccuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customcomponent.FieldName,
		})
	}
	if value, ok := ccuo.mutation.Handle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customcomponent.FieldHandle,
		})
	}
	if value, ok := ccuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customcomponent.FieldContent,
		})
	}
	if ccuo.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customcomponent.FieldContent,
		})
	}
	if value, ok := ccuo.mutation.DistURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customcomponent.FieldDistURL,
		})
	}
	if ccuo.mutation.DistURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customcomponent.FieldDistURL,
		})
	}
	if value, ok := ccuo.mutation.IsDraft(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: customcomponent.FieldIsDraft,
		})
	}
	if ccuo.mutation.IsDraftCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: customcomponent.FieldIsDraft,
		})
	}
	if value, ok := ccuo.mutation.EntryFileName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customcomponent.FieldEntryFileName,
		})
	}
	if ccuo.mutation.EntryFileNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customcomponent.FieldEntryFileName,
		})
	}
	if value, ok := ccuo.mutation.SessionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: customcomponent.FieldSessionID,
		})
	}
	if value, ok := ccuo.mutation.AddedSessionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: customcomponent.FieldSessionID,
		})
	}
	if ccuo.mutation.SessionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: customcomponent.FieldSessionID,
		})
	}
	if ccuo.mutation.PropsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customcomponent.PropsTable,
			Columns: []string{customcomponent.PropsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: componentproperty.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.RemovedPropsIDs(); len(nodes) > 0 && !ccuo.mutation.PropsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customcomponent.PropsTable,
			Columns: []string{customcomponent.PropsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: componentproperty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.PropsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customcomponent.PropsTable,
			Columns: []string{customcomponent.PropsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: componentproperty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CustomComponent{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customcomponent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
