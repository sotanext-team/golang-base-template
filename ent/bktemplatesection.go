// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/bktemplatesection"
	"app-api/ent/templatesection"
	"app-api/ent/templatesectionversion"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// BkTemplateSection is the model entity for the BkTemplateSection schema.
type BkTemplateSection struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// VersionID holds the value of the "version_id" field.
	VersionID uint64 `json:"versionId"`
	// ThemeTemplateID holds the value of the "theme_template_id" field.
	ThemeTemplateID uint64 `json:"themeTemplateId"`
	// TemplateSectionID holds the value of the "template_section_id" field.
	TemplateSectionID uint64 `json:"templateSectionId"`
	// ThemeID holds the value of the "theme_id" field.
	ThemeID uint64 `json:"themeId"`
	// ThemeLayoutID holds the value of the "theme_layout_id" field.
	ThemeLayoutID uint64 `json:"themeLayoutId"`
	// Data holds the value of the "data" field.
	Data string `json:"data"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BkTemplateSectionQuery when eager-loading is set.
	Edges BkTemplateSectionEdges `json:"edges"`
}

// BkTemplateSectionEdges holds the relations/edges for other nodes in the graph.
type BkTemplateSectionEdges struct {
	// TemplateSection holds the value of the templateSection edge.
	TemplateSection *TemplateSection `json:"templateSection,omitempty"`
	// Version holds the value of the version edge.
	Version *TemplateSectionVersion `json:"version,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TemplateSectionOrErr returns the TemplateSection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BkTemplateSectionEdges) TemplateSectionOrErr() (*TemplateSection, error) {
	if e.loadedTypes[0] {
		if e.TemplateSection == nil {
			// The edge templateSection was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: templatesection.Label}
		}
		return e.TemplateSection, nil
	}
	return nil, &NotLoadedError{edge: "templateSection"}
}

// VersionOrErr returns the Version value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BkTemplateSectionEdges) VersionOrErr() (*TemplateSectionVersion, error) {
	if e.loadedTypes[1] {
		if e.Version == nil {
			// The edge version was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: templatesectionversion.Label}
		}
		return e.Version, nil
	}
	return nil, &NotLoadedError{edge: "version"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BkTemplateSection) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bktemplatesection.FieldID, bktemplatesection.FieldVersionID, bktemplatesection.FieldThemeTemplateID, bktemplatesection.FieldTemplateSectionID, bktemplatesection.FieldThemeID, bktemplatesection.FieldThemeLayoutID:
			values[i] = new(sql.NullInt64)
		case bktemplatesection.FieldData:
			values[i] = new(sql.NullString)
		case bktemplatesection.FieldCreatedAt, bktemplatesection.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BkTemplateSection", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BkTemplateSection fields.
func (bts *BkTemplateSection) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bktemplatesection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bts.ID = uint64(value.Int64)
		case bktemplatesection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bts.CreatedAt = value.Time
			}
		case bktemplatesection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bts.UpdatedAt = value.Time
			}
		case bktemplatesection.FieldVersionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version_id", values[i])
			} else if value.Valid {
				bts.VersionID = uint64(value.Int64)
			}
		case bktemplatesection.FieldThemeTemplateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field theme_template_id", values[i])
			} else if value.Valid {
				bts.ThemeTemplateID = uint64(value.Int64)
			}
		case bktemplatesection.FieldTemplateSectionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field template_section_id", values[i])
			} else if value.Valid {
				bts.TemplateSectionID = uint64(value.Int64)
			}
		case bktemplatesection.FieldThemeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field theme_id", values[i])
			} else if value.Valid {
				bts.ThemeID = uint64(value.Int64)
			}
		case bktemplatesection.FieldThemeLayoutID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field theme_layout_id", values[i])
			} else if value.Valid {
				bts.ThemeLayoutID = uint64(value.Int64)
			}
		case bktemplatesection.FieldData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value.Valid {
				bts.Data = value.String
			}
		}
	}
	return nil
}

// QueryTemplateSection queries the "templateSection" edge of the BkTemplateSection entity.
func (bts *BkTemplateSection) QueryTemplateSection() *TemplateSectionQuery {
	return (&BkTemplateSectionClient{config: bts.config}).QueryTemplateSection(bts)
}

// QueryVersion queries the "version" edge of the BkTemplateSection entity.
func (bts *BkTemplateSection) QueryVersion() *TemplateSectionVersionQuery {
	return (&BkTemplateSectionClient{config: bts.config}).QueryVersion(bts)
}

// Update returns a builder for updating this BkTemplateSection.
// Note that you need to call BkTemplateSection.Unwrap() before calling this method if this BkTemplateSection
// was returned from a transaction, and the transaction was committed or rolled back.
func (bts *BkTemplateSection) Update() *BkTemplateSectionUpdateOne {
	return (&BkTemplateSectionClient{config: bts.config}).UpdateOne(bts)
}

// Unwrap unwraps the BkTemplateSection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bts *BkTemplateSection) Unwrap() *BkTemplateSection {
	tx, ok := bts.config.driver.(*txDriver)
	if !ok {
		panic("ent: BkTemplateSection is not a transactional entity")
	}
	bts.config.driver = tx.drv
	return bts
}

// String implements the fmt.Stringer.
func (bts *BkTemplateSection) String() string {
	var builder strings.Builder
	builder.WriteString("BkTemplateSection(")
	builder.WriteString(fmt.Sprintf("id=%v", bts.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(bts.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(bts.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", version_id=")
	builder.WriteString(fmt.Sprintf("%v", bts.VersionID))
	builder.WriteString(", theme_template_id=")
	builder.WriteString(fmt.Sprintf("%v", bts.ThemeTemplateID))
	builder.WriteString(", template_section_id=")
	builder.WriteString(fmt.Sprintf("%v", bts.TemplateSectionID))
	builder.WriteString(", theme_id=")
	builder.WriteString(fmt.Sprintf("%v", bts.ThemeID))
	builder.WriteString(", theme_layout_id=")
	builder.WriteString(fmt.Sprintf("%v", bts.ThemeLayoutID))
	builder.WriteString(", data=")
	builder.WriteString(bts.Data)
	builder.WriteByte(')')
	return builder.String()
}

// BkTemplateSections is a parsable slice of BkTemplateSection.
type BkTemplateSections []*BkTemplateSection

func (bts BkTemplateSections) config(cfg config) {
	for _i := range bts {
		bts[_i].config = cfg
	}
}
