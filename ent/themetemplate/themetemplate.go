// Code generated by entc, DO NOT EDIT.

package themetemplate

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the themetemplate type in the database.
	Label = "theme_template"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldShopID holds the string denoting the shop_id field in the database.
	FieldShopID = "shop_id"
	// FieldThemeID holds the string denoting the theme_id field in the database.
	FieldThemeID = "theme_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPageType holds the string denoting the page_type field in the database.
	FieldPageType = "page_type"
	// FieldDefault holds the string denoting the default field in the database.
	FieldDefault = "default"
	// EdgeShop holds the string denoting the shop edge name in mutations.
	EdgeShop = "shop"
	// EdgeTheme holds the string denoting the theme edge name in mutations.
	EdgeTheme = "theme"
	// Table holds the table name of the themetemplate in the database.
	Table = "theme_templates"
	// ShopTable is the table that holds the shop relation/edge.
	ShopTable = "theme_templates"
	// ShopInverseTable is the table name for the Shop entity.
	// It exists in this package in order to avoid circular dependency with the "shop" package.
	ShopInverseTable = "shops"
	// ShopColumn is the table column denoting the shop relation/edge.
	ShopColumn = "shop_id"
	// ThemeTable is the table that holds the theme relation/edge.
	ThemeTable = "theme_templates"
	// ThemeInverseTable is the table name for the Theme entity.
	// It exists in this package in order to avoid circular dependency with the "theme" package.
	ThemeInverseTable = "themes"
	// ThemeColumn is the table column denoting the theme relation/edge.
	ThemeColumn = "theme_id"
)

// Columns holds all SQL columns for themetemplate fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldShopID,
	FieldThemeID,
	FieldName,
	FieldPageType,
	FieldDefault,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultDefault holds the default value on creation for the "default" field.
	DefaultDefault bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uint64
)

// PageType defines the type for the "page_type" enum field.
type PageType string

// PageTypeIndex is the default value of the PageType enum.
const DefaultPageType = PageTypeIndex

// PageType values.
const (
	PageTypeIndex      PageType = "INDEX"
	PageTypeProduct    PageType = "PRODUCT"
	PageTypeCollection PageType = "COLLECTION"
	PageTypeArticle    PageType = "ARTICLE"
	PageTypePage       PageType = "PAGE"
)

func (pt PageType) String() string {
	return string(pt)
}

// PageTypeValidator is a validator for the "page_type" field enum values. It is called by the builders before save.
func PageTypeValidator(pt PageType) error {
	switch pt {
	case PageTypeIndex, PageTypeProduct, PageTypeCollection, PageTypeArticle, PageTypePage:
		return nil
	default:
		return fmt.Errorf("themetemplate: invalid enum value for page_type field: %q", pt)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (pt PageType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(pt.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (pt *PageType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*pt = PageType(str)
	if err := PageTypeValidator(*pt); err != nil {
		return fmt.Errorf("%s is not a valid PageType", str)
	}
	return nil
}
