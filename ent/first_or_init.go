// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
)

// FirstOrInit returns the first BkTemplateSection entity from the query.
// Returns an empty object when no BkTemplateSection was found.
func (q *BkTemplateSectionQuery) FirstOrInit(ctx context.Context) (*BkTemplateSection, error) {
	nodes, err := q.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return &BkTemplateSection{config: q.config}, nil
	}
	return nodes[0], nil
}

// FirstOrInitX is like FirstOrInit, but panics if an error occurs.
func (q *BkTemplateSectionQuery) FirstOrInitX(ctx context.Context) *BkTemplateSection {
	node, err := q.FirstOrInit(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// FirstOrInit returns the first ComponentProperty entity from the query.
// Returns an empty object when no ComponentProperty was found.
func (q *ComponentPropertyQuery) FirstOrInit(ctx context.Context) (*ComponentProperty, error) {
	nodes, err := q.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return &ComponentProperty{config: q.config}, nil
	}
	return nodes[0], nil
}

// FirstOrInitX is like FirstOrInit, but panics if an error occurs.
func (q *ComponentPropertyQuery) FirstOrInitX(ctx context.Context) *ComponentProperty {
	node, err := q.FirstOrInit(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// FirstOrInit returns the first CustomComponent entity from the query.
// Returns an empty object when no CustomComponent was found.
func (q *CustomComponentQuery) FirstOrInit(ctx context.Context) (*CustomComponent, error) {
	nodes, err := q.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return &CustomComponent{config: q.config}, nil
	}
	return nodes[0], nil
}

// FirstOrInitX is like FirstOrInit, but panics if an error occurs.
func (q *CustomComponentQuery) FirstOrInitX(ctx context.Context) *CustomComponent {
	node, err := q.FirstOrInit(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// FirstOrInit returns the first GlobalTemplate entity from the query.
// Returns an empty object when no GlobalTemplate was found.
func (q *GlobalTemplateQuery) FirstOrInit(ctx context.Context) (*GlobalTemplate, error) {
	nodes, err := q.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return &GlobalTemplate{config: q.config}, nil
	}
	return nodes[0], nil
}

// FirstOrInitX is like FirstOrInit, but panics if an error occurs.
func (q *GlobalTemplateQuery) FirstOrInitX(ctx context.Context) *GlobalTemplate {
	node, err := q.FirstOrInit(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// FirstOrInit returns the first Shop entity from the query.
// Returns an empty object when no Shop was found.
func (q *ShopQuery) FirstOrInit(ctx context.Context) (*Shop, error) {
	nodes, err := q.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return &Shop{config: q.config}, nil
	}
	return nodes[0], nil
}

// FirstOrInitX is like FirstOrInit, but panics if an error occurs.
func (q *ShopQuery) FirstOrInitX(ctx context.Context) *Shop {
	node, err := q.FirstOrInit(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// FirstOrInit returns the first TemplateSection entity from the query.
// Returns an empty object when no TemplateSection was found.
func (q *TemplateSectionQuery) FirstOrInit(ctx context.Context) (*TemplateSection, error) {
	nodes, err := q.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return &TemplateSection{config: q.config}, nil
	}
	return nodes[0], nil
}

// FirstOrInitX is like FirstOrInit, but panics if an error occurs.
func (q *TemplateSectionQuery) FirstOrInitX(ctx context.Context) *TemplateSection {
	node, err := q.FirstOrInit(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// FirstOrInit returns the first TemplateSectionVersion entity from the query.
// Returns an empty object when no TemplateSectionVersion was found.
func (q *TemplateSectionVersionQuery) FirstOrInit(ctx context.Context) (*TemplateSectionVersion, error) {
	nodes, err := q.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return &TemplateSectionVersion{config: q.config}, nil
	}
	return nodes[0], nil
}

// FirstOrInitX is like FirstOrInit, but panics if an error occurs.
func (q *TemplateSectionVersionQuery) FirstOrInitX(ctx context.Context) *TemplateSectionVersion {
	node, err := q.FirstOrInit(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// FirstOrInit returns the first Theme entity from the query.
// Returns an empty object when no Theme was found.
func (q *ThemeQuery) FirstOrInit(ctx context.Context) (*Theme, error) {
	nodes, err := q.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return &Theme{config: q.config}, nil
	}
	return nodes[0], nil
}

// FirstOrInitX is like FirstOrInit, but panics if an error occurs.
func (q *ThemeQuery) FirstOrInitX(ctx context.Context) *Theme {
	node, err := q.FirstOrInit(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// FirstOrInit returns the first ThemeTemplate entity from the query.
// Returns an empty object when no ThemeTemplate was found.
func (q *ThemeTemplateQuery) FirstOrInit(ctx context.Context) (*ThemeTemplate, error) {
	nodes, err := q.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return &ThemeTemplate{config: q.config}, nil
	}
	return nodes[0], nil
}

// FirstOrInitX is like FirstOrInit, but panics if an error occurs.
func (q *ThemeTemplateQuery) FirstOrInitX(ctx context.Context) *ThemeTemplate {
	node, err := q.FirstOrInit(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// FirstOrInit returns the first Todo entity from the query.
// Returns an empty object when no Todo was found.
func (q *TodoQuery) FirstOrInit(ctx context.Context) (*Todo, error) {
	nodes, err := q.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return &Todo{config: q.config}, nil
	}
	return nodes[0], nil
}

// FirstOrInitX is like FirstOrInit, but panics if an error occurs.
func (q *TodoQuery) FirstOrInitX(ctx context.Context) *Todo {
	node, err := q.FirstOrInit(ctx)
	if err != nil {
		panic(err)
	}
	return node
}
