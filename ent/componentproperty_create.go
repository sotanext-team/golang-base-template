// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/componentproperty"
	"app-api/ent/customcomponent"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ComponentPropertyCreate is the builder for creating a ComponentProperty entity.
type ComponentPropertyCreate struct {
	config
	mutation *ComponentPropertyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cpc *ComponentPropertyCreate) SetCreatedAt(t time.Time) *ComponentPropertyCreate {
	cpc.mutation.SetCreatedAt(t)
	return cpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cpc *ComponentPropertyCreate) SetNillableCreatedAt(t *time.Time) *ComponentPropertyCreate {
	if t != nil {
		cpc.SetCreatedAt(*t)
	}
	return cpc
}

// SetUpdatedAt sets the "updated_at" field.
func (cpc *ComponentPropertyCreate) SetUpdatedAt(t time.Time) *ComponentPropertyCreate {
	cpc.mutation.SetUpdatedAt(t)
	return cpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cpc *ComponentPropertyCreate) SetNillableUpdatedAt(t *time.Time) *ComponentPropertyCreate {
	if t != nil {
		cpc.SetUpdatedAt(*t)
	}
	return cpc
}

// SetComponentID sets the "component_id" field.
func (cpc *ComponentPropertyCreate) SetComponentID(u uint64) *ComponentPropertyCreate {
	cpc.mutation.SetComponentID(u)
	return cpc
}

// SetName sets the "name" field.
func (cpc *ComponentPropertyCreate) SetName(s string) *ComponentPropertyCreate {
	cpc.mutation.SetName(s)
	return cpc
}

// SetValue sets the "value" field.
func (cpc *ComponentPropertyCreate) SetValue(s string) *ComponentPropertyCreate {
	cpc.mutation.SetValue(s)
	return cpc
}

// SetID sets the "id" field.
func (cpc *ComponentPropertyCreate) SetID(u uint64) *ComponentPropertyCreate {
	cpc.mutation.SetID(u)
	return cpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cpc *ComponentPropertyCreate) SetNillableID(u *uint64) *ComponentPropertyCreate {
	if u != nil {
		cpc.SetID(*u)
	}
	return cpc
}

// SetComponent sets the "component" edge to the CustomComponent entity.
func (cpc *ComponentPropertyCreate) SetComponent(c *CustomComponent) *ComponentPropertyCreate {
	return cpc.SetComponentID(c.ID)
}

// Mutation returns the ComponentPropertyMutation object of the builder.
func (cpc *ComponentPropertyCreate) Mutation() *ComponentPropertyMutation {
	return cpc.mutation
}

// Save creates the ComponentProperty in the database.
func (cpc *ComponentPropertyCreate) Save(ctx context.Context) (*ComponentProperty, error) {
	var (
		err  error
		node *ComponentProperty
	)
	cpc.defaults()
	if len(cpc.hooks) == 0 {
		if err = cpc.check(); err != nil {
			return nil, err
		}
		node, err = cpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComponentPropertyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cpc.check(); err != nil {
				return nil, err
			}
			cpc.mutation = mutation
			if node, err = cpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cpc.hooks) - 1; i >= 0; i-- {
			if cpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *ComponentPropertyCreate) SaveX(ctx context.Context) *ComponentProperty {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *ComponentPropertyCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *ComponentPropertyCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpc *ComponentPropertyCreate) defaults() {
	if _, ok := cpc.mutation.CreatedAt(); !ok {
		v := componentproperty.DefaultCreatedAt()
		cpc.mutation.SetCreatedAt(v)
	}
	if _, ok := cpc.mutation.UpdatedAt(); !ok {
		v := componentproperty.DefaultUpdatedAt()
		cpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cpc.mutation.ID(); !ok {
		v := componentproperty.DefaultID()
		cpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *ComponentPropertyCreate) check() error {
	if _, ok := cpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := cpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := cpc.mutation.ComponentID(); !ok {
		return &ValidationError{Name: "component_id", err: errors.New(`ent: missing required field "component_id"`)}
	}
	if _, ok := cpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := cpc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "value"`)}
	}
	if _, ok := cpc.mutation.ComponentID(); !ok {
		return &ValidationError{Name: "component", err: errors.New("ent: missing required edge \"component\"")}
	}
	return nil
}

func (cpc *ComponentPropertyCreate) sqlSave(ctx context.Context) (*ComponentProperty, error) {
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (cpc *ComponentPropertyCreate) createSpec() (*ComponentProperty, *sqlgraph.CreateSpec) {
	var (
		_node = &ComponentProperty{config: cpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: componentproperty.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: componentproperty.FieldID,
			},
		}
	)
	if id, ok := cpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cpc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: componentproperty.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cpc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: componentproperty.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cpc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: componentproperty.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cpc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: componentproperty.FieldValue,
		})
		_node.Value = value
	}
	if nodes := cpc.mutation.ComponentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   componentproperty.ComponentTable,
			Columns: []string{componentproperty.ComponentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: customcomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ComponentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ComponentPropertyCreateBulk is the builder for creating many ComponentProperty entities in bulk.
type ComponentPropertyCreateBulk struct {
	config
	builders []*ComponentPropertyCreate
}

// Save creates the ComponentProperty entities in the database.
func (cpcb *ComponentPropertyCreateBulk) Save(ctx context.Context) ([]*ComponentProperty, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*ComponentProperty, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ComponentPropertyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *ComponentPropertyCreateBulk) SaveX(ctx context.Context) []*ComponentProperty {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *ComponentPropertyCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *ComponentPropertyCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
