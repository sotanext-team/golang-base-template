// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/shop"
	"app-api/ent/theme"
	"app-api/ent/themetemplate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThemeTemplateCreate is the builder for creating a ThemeTemplate entity.
type ThemeTemplateCreate struct {
	config
	mutation *ThemeTemplateMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ttc *ThemeTemplateCreate) SetCreatedAt(t time.Time) *ThemeTemplateCreate {
	ttc.mutation.SetCreatedAt(t)
	return ttc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ttc *ThemeTemplateCreate) SetNillableCreatedAt(t *time.Time) *ThemeTemplateCreate {
	if t != nil {
		ttc.SetCreatedAt(*t)
	}
	return ttc
}

// SetUpdatedAt sets the "updated_at" field.
func (ttc *ThemeTemplateCreate) SetUpdatedAt(t time.Time) *ThemeTemplateCreate {
	ttc.mutation.SetUpdatedAt(t)
	return ttc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ttc *ThemeTemplateCreate) SetNillableUpdatedAt(t *time.Time) *ThemeTemplateCreate {
	if t != nil {
		ttc.SetUpdatedAt(*t)
	}
	return ttc
}

// SetDeletedAt sets the "deleted_at" field.
func (ttc *ThemeTemplateCreate) SetDeletedAt(t time.Time) *ThemeTemplateCreate {
	ttc.mutation.SetDeletedAt(t)
	return ttc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ttc *ThemeTemplateCreate) SetNillableDeletedAt(t *time.Time) *ThemeTemplateCreate {
	if t != nil {
		ttc.SetDeletedAt(*t)
	}
	return ttc
}

// SetShopID sets the "shop_id" field.
func (ttc *ThemeTemplateCreate) SetShopID(u uint64) *ThemeTemplateCreate {
	ttc.mutation.SetShopID(u)
	return ttc
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (ttc *ThemeTemplateCreate) SetNillableShopID(u *uint64) *ThemeTemplateCreate {
	if u != nil {
		ttc.SetShopID(*u)
	}
	return ttc
}

// SetThemeID sets the "theme_id" field.
func (ttc *ThemeTemplateCreate) SetThemeID(u uint64) *ThemeTemplateCreate {
	ttc.mutation.SetThemeID(u)
	return ttc
}

// SetNillableThemeID sets the "theme_id" field if the given value is not nil.
func (ttc *ThemeTemplateCreate) SetNillableThemeID(u *uint64) *ThemeTemplateCreate {
	if u != nil {
		ttc.SetThemeID(*u)
	}
	return ttc
}

// SetName sets the "name" field.
func (ttc *ThemeTemplateCreate) SetName(s string) *ThemeTemplateCreate {
	ttc.mutation.SetName(s)
	return ttc
}

// SetPageType sets the "page_type" field.
func (ttc *ThemeTemplateCreate) SetPageType(tt themetemplate.PageType) *ThemeTemplateCreate {
	ttc.mutation.SetPageType(tt)
	return ttc
}

// SetNillablePageType sets the "page_type" field if the given value is not nil.
func (ttc *ThemeTemplateCreate) SetNillablePageType(tt *themetemplate.PageType) *ThemeTemplateCreate {
	if tt != nil {
		ttc.SetPageType(*tt)
	}
	return ttc
}

// SetDefault sets the "default" field.
func (ttc *ThemeTemplateCreate) SetDefault(b bool) *ThemeTemplateCreate {
	ttc.mutation.SetDefault(b)
	return ttc
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (ttc *ThemeTemplateCreate) SetNillableDefault(b *bool) *ThemeTemplateCreate {
	if b != nil {
		ttc.SetDefault(*b)
	}
	return ttc
}

// SetID sets the "id" field.
func (ttc *ThemeTemplateCreate) SetID(u uint64) *ThemeTemplateCreate {
	ttc.mutation.SetID(u)
	return ttc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ttc *ThemeTemplateCreate) SetNillableID(u *uint64) *ThemeTemplateCreate {
	if u != nil {
		ttc.SetID(*u)
	}
	return ttc
}

// SetShop sets the "shop" edge to the Shop entity.
func (ttc *ThemeTemplateCreate) SetShop(s *Shop) *ThemeTemplateCreate {
	return ttc.SetShopID(s.ID)
}

// SetTheme sets the "theme" edge to the Theme entity.
func (ttc *ThemeTemplateCreate) SetTheme(t *Theme) *ThemeTemplateCreate {
	return ttc.SetThemeID(t.ID)
}

// Mutation returns the ThemeTemplateMutation object of the builder.
func (ttc *ThemeTemplateCreate) Mutation() *ThemeTemplateMutation {
	return ttc.mutation
}

// Save creates the ThemeTemplate in the database.
func (ttc *ThemeTemplateCreate) Save(ctx context.Context) (*ThemeTemplate, error) {
	var (
		err  error
		node *ThemeTemplate
	)
	ttc.defaults()
	if len(ttc.hooks) == 0 {
		if err = ttc.check(); err != nil {
			return nil, err
		}
		node, err = ttc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ThemeTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttc.check(); err != nil {
				return nil, err
			}
			ttc.mutation = mutation
			if node, err = ttc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ttc.hooks) - 1; i >= 0; i-- {
			if ttc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *ThemeTemplateCreate) SaveX(ctx context.Context) *ThemeTemplate {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *ThemeTemplateCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *ThemeTemplateCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttc *ThemeTemplateCreate) defaults() {
	if _, ok := ttc.mutation.CreatedAt(); !ok {
		v := themetemplate.DefaultCreatedAt()
		ttc.mutation.SetCreatedAt(v)
	}
	if _, ok := ttc.mutation.UpdatedAt(); !ok {
		v := themetemplate.DefaultUpdatedAt()
		ttc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ttc.mutation.PageType(); !ok {
		v := themetemplate.DefaultPageType
		ttc.mutation.SetPageType(v)
	}
	if _, ok := ttc.mutation.Default(); !ok {
		v := themetemplate.DefaultDefault
		ttc.mutation.SetDefault(v)
	}
	if _, ok := ttc.mutation.ID(); !ok {
		v := themetemplate.DefaultID()
		ttc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *ThemeTemplateCreate) check() error {
	if _, ok := ttc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := ttc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := ttc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := ttc.mutation.Name(); ok {
		if err := themetemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := ttc.mutation.PageType(); !ok {
		return &ValidationError{Name: "page_type", err: errors.New(`ent: missing required field "page_type"`)}
	}
	if v, ok := ttc.mutation.PageType(); ok {
		if err := themetemplate.PageTypeValidator(v); err != nil {
			return &ValidationError{Name: "page_type", err: fmt.Errorf(`ent: validator failed for field "page_type": %w`, err)}
		}
	}
	if _, ok := ttc.mutation.Default(); !ok {
		return &ValidationError{Name: "default", err: errors.New(`ent: missing required field "default"`)}
	}
	return nil
}

func (ttc *ThemeTemplateCreate) sqlSave(ctx context.Context) (*ThemeTemplate, error) {
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (ttc *ThemeTemplateCreate) createSpec() (*ThemeTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &ThemeTemplate{config: ttc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: themetemplate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: themetemplate.FieldID,
			},
		}
	)
	if id, ok := ttc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ttc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: themetemplate.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ttc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: themetemplate.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ttc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: themetemplate.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := ttc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: themetemplate.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ttc.mutation.PageType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: themetemplate.FieldPageType,
		})
		_node.PageType = value
	}
	if value, ok := ttc.mutation.Default(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: themetemplate.FieldDefault,
		})
		_node.Default = value
	}
	if nodes := ttc.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   themetemplate.ShopTable,
			Columns: []string{themetemplate.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: shop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShopID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.ThemeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   themetemplate.ThemeTable,
			Columns: []string{themetemplate.ThemeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: theme.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ThemeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ThemeTemplateCreateBulk is the builder for creating many ThemeTemplate entities in bulk.
type ThemeTemplateCreateBulk struct {
	config
	builders []*ThemeTemplateCreate
}

// Save creates the ThemeTemplate entities in the database.
func (ttcb *ThemeTemplateCreateBulk) Save(ctx context.Context) ([]*ThemeTemplate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*ThemeTemplate, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ThemeTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *ThemeTemplateCreateBulk) SaveX(ctx context.Context) []*ThemeTemplate {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *ThemeTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *ThemeTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}
