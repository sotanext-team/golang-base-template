// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/shop"
	"app-api/ent/theme"
	"app-api/ent/themetemplate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThemeCreate is the builder for creating a Theme entity.
type ThemeCreate struct {
	config
	mutation *ThemeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tc *ThemeCreate) SetCreatedAt(t time.Time) *ThemeCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *ThemeCreate) SetNillableCreatedAt(t *time.Time) *ThemeCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *ThemeCreate) SetUpdatedAt(t time.Time) *ThemeCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *ThemeCreate) SetNillableUpdatedAt(t *time.Time) *ThemeCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *ThemeCreate) SetDeletedAt(t time.Time) *ThemeCreate {
	tc.mutation.SetDeletedAt(t)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *ThemeCreate) SetNillableDeletedAt(t *time.Time) *ThemeCreate {
	if t != nil {
		tc.SetDeletedAt(*t)
	}
	return tc
}

// SetShopID sets the "shop_id" field.
func (tc *ThemeCreate) SetShopID(u uint64) *ThemeCreate {
	tc.mutation.SetShopID(u)
	return tc
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (tc *ThemeCreate) SetNillableShopID(u *uint64) *ThemeCreate {
	if u != nil {
		tc.SetShopID(*u)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *ThemeCreate) SetName(s string) *ThemeCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetThumbnail sets the "thumbnail" field.
func (tc *ThemeCreate) SetThumbnail(s string) *ThemeCreate {
	tc.mutation.SetThumbnail(s)
	return tc
}

// SetPublish sets the "publish" field.
func (tc *ThemeCreate) SetPublish(b bool) *ThemeCreate {
	tc.mutation.SetPublish(b)
	return tc
}

// SetNillablePublish sets the "publish" field if the given value is not nil.
func (tc *ThemeCreate) SetNillablePublish(b *bool) *ThemeCreate {
	if b != nil {
		tc.SetPublish(*b)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *ThemeCreate) SetID(u uint64) *ThemeCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *ThemeCreate) SetNillableID(u *uint64) *ThemeCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// AddThemeTemplateIDs adds the "themeTemplates" edge to the ThemeTemplate entity by IDs.
func (tc *ThemeCreate) AddThemeTemplateIDs(ids ...uint64) *ThemeCreate {
	tc.mutation.AddThemeTemplateIDs(ids...)
	return tc
}

// AddThemeTemplates adds the "themeTemplates" edges to the ThemeTemplate entity.
func (tc *ThemeCreate) AddThemeTemplates(t ...*ThemeTemplate) *ThemeCreate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddThemeTemplateIDs(ids...)
}

// SetShop sets the "shop" edge to the Shop entity.
func (tc *ThemeCreate) SetShop(s *Shop) *ThemeCreate {
	return tc.SetShopID(s.ID)
}

// Mutation returns the ThemeMutation object of the builder.
func (tc *ThemeCreate) Mutation() *ThemeMutation {
	return tc.mutation
}

// Save creates the Theme in the database.
func (tc *ThemeCreate) Save(ctx context.Context) (*Theme, error) {
	var (
		err  error
		node *Theme
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ThemeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *ThemeCreate) SaveX(ctx context.Context) *Theme {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *ThemeCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *ThemeCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *ThemeCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := theme.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := theme.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Publish(); !ok {
		v := theme.DefaultPublish
		tc.mutation.SetPublish(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := theme.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *ThemeCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := theme.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Thumbnail(); !ok {
		return &ValidationError{Name: "thumbnail", err: errors.New(`ent: missing required field "thumbnail"`)}
	}
	if v, ok := tc.mutation.Thumbnail(); ok {
		if err := theme.ThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail", err: fmt.Errorf(`ent: validator failed for field "thumbnail": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Publish(); !ok {
		return &ValidationError{Name: "publish", err: errors.New(`ent: missing required field "publish"`)}
	}
	return nil
}

func (tc *ThemeCreate) sqlSave(ctx context.Context) (*Theme, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (tc *ThemeCreate) createSpec() (*Theme, *sqlgraph.CreateSpec) {
	var (
		_node = &Theme{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: theme.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: theme.FieldID,
			},
		}
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: theme.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: theme.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: theme.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tc.mutation.Thumbnail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: theme.FieldThumbnail,
		})
		_node.Thumbnail = value
	}
	if value, ok := tc.mutation.Publish(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: theme.FieldPublish,
		})
		_node.Publish = value
	}
	if nodes := tc.mutation.ThemeTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theme.ThemeTemplatesTable,
			Columns: []string{theme.ThemeTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: themetemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   theme.ShopTable,
			Columns: []string{theme.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: shop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShopID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ThemeCreateBulk is the builder for creating many Theme entities in bulk.
type ThemeCreateBulk struct {
	config
	builders []*ThemeCreate
}

// Save creates the Theme entities in the database.
func (tcb *ThemeCreateBulk) Save(ctx context.Context) ([]*Theme, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Theme, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ThemeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *ThemeCreateBulk) SaveX(ctx context.Context) []*Theme {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *ThemeCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *ThemeCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
