// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app-api/ent/bktemplatesection"
	"app-api/ent/predicate"
	"app-api/ent/templatesection"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TemplateSectionUpdate is the builder for updating TemplateSection entities.
type TemplateSectionUpdate struct {
	config
	hooks    []Hook
	mutation *TemplateSectionMutation
}

// Where appends a list predicates to the TemplateSectionUpdate builder.
func (tsu *TemplateSectionUpdate) Where(ps ...predicate.TemplateSection) *TemplateSectionUpdate {
	tsu.mutation.Where(ps...)
	return tsu
}

// SetUpdatedAt sets the "updated_at" field.
func (tsu *TemplateSectionUpdate) SetUpdatedAt(t time.Time) *TemplateSectionUpdate {
	tsu.mutation.SetUpdatedAt(t)
	return tsu
}

// SetDeletedAt sets the "deleted_at" field.
func (tsu *TemplateSectionUpdate) SetDeletedAt(t time.Time) *TemplateSectionUpdate {
	tsu.mutation.SetDeletedAt(t)
	return tsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsu *TemplateSectionUpdate) SetNillableDeletedAt(t *time.Time) *TemplateSectionUpdate {
	if t != nil {
		tsu.SetDeletedAt(*t)
	}
	return tsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tsu *TemplateSectionUpdate) ClearDeletedAt() *TemplateSectionUpdate {
	tsu.mutation.ClearDeletedAt()
	return tsu
}

// SetShopID sets the "shop_id" field.
func (tsu *TemplateSectionUpdate) SetShopID(u uint64) *TemplateSectionUpdate {
	tsu.mutation.ResetShopID()
	tsu.mutation.SetShopID(u)
	return tsu
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (tsu *TemplateSectionUpdate) SetNillableShopID(u *uint64) *TemplateSectionUpdate {
	if u != nil {
		tsu.SetShopID(*u)
	}
	return tsu
}

// AddShopID adds u to the "shop_id" field.
func (tsu *TemplateSectionUpdate) AddShopID(u uint64) *TemplateSectionUpdate {
	tsu.mutation.AddShopID(u)
	return tsu
}

// ClearShopID clears the value of the "shop_id" field.
func (tsu *TemplateSectionUpdate) ClearShopID() *TemplateSectionUpdate {
	tsu.mutation.ClearShopID()
	return tsu
}

// SetGlobalSectionID sets the "global_section_id" field.
func (tsu *TemplateSectionUpdate) SetGlobalSectionID(u uint64) *TemplateSectionUpdate {
	tsu.mutation.ResetGlobalSectionID()
	tsu.mutation.SetGlobalSectionID(u)
	return tsu
}

// SetNillableGlobalSectionID sets the "global_section_id" field if the given value is not nil.
func (tsu *TemplateSectionUpdate) SetNillableGlobalSectionID(u *uint64) *TemplateSectionUpdate {
	if u != nil {
		tsu.SetGlobalSectionID(*u)
	}
	return tsu
}

// AddGlobalSectionID adds u to the "global_section_id" field.
func (tsu *TemplateSectionUpdate) AddGlobalSectionID(u uint64) *TemplateSectionUpdate {
	tsu.mutation.AddGlobalSectionID(u)
	return tsu
}

// ClearGlobalSectionID clears the value of the "global_section_id" field.
func (tsu *TemplateSectionUpdate) ClearGlobalSectionID() *TemplateSectionUpdate {
	tsu.mutation.ClearGlobalSectionID()
	return tsu
}

// SetThemeTemplateID sets the "theme_template_id" field.
func (tsu *TemplateSectionUpdate) SetThemeTemplateID(u uint64) *TemplateSectionUpdate {
	tsu.mutation.ResetThemeTemplateID()
	tsu.mutation.SetThemeTemplateID(u)
	return tsu
}

// SetNillableThemeTemplateID sets the "theme_template_id" field if the given value is not nil.
func (tsu *TemplateSectionUpdate) SetNillableThemeTemplateID(u *uint64) *TemplateSectionUpdate {
	if u != nil {
		tsu.SetThemeTemplateID(*u)
	}
	return tsu
}

// AddThemeTemplateID adds u to the "theme_template_id" field.
func (tsu *TemplateSectionUpdate) AddThemeTemplateID(u uint64) *TemplateSectionUpdate {
	tsu.mutation.AddThemeTemplateID(u)
	return tsu
}

// ClearThemeTemplateID clears the value of the "theme_template_id" field.
func (tsu *TemplateSectionUpdate) ClearThemeTemplateID() *TemplateSectionUpdate {
	tsu.mutation.ClearThemeTemplateID()
	return tsu
}

// SetCurrentVersionID sets the "current_version_id" field.
func (tsu *TemplateSectionUpdate) SetCurrentVersionID(u uint64) *TemplateSectionUpdate {
	tsu.mutation.ResetCurrentVersionID()
	tsu.mutation.SetCurrentVersionID(u)
	return tsu
}

// SetNillableCurrentVersionID sets the "current_version_id" field if the given value is not nil.
func (tsu *TemplateSectionUpdate) SetNillableCurrentVersionID(u *uint64) *TemplateSectionUpdate {
	if u != nil {
		tsu.SetCurrentVersionID(*u)
	}
	return tsu
}

// AddCurrentVersionID adds u to the "current_version_id" field.
func (tsu *TemplateSectionUpdate) AddCurrentVersionID(u uint64) *TemplateSectionUpdate {
	tsu.mutation.AddCurrentVersionID(u)
	return tsu
}

// ClearCurrentVersionID clears the value of the "current_version_id" field.
func (tsu *TemplateSectionUpdate) ClearCurrentVersionID() *TemplateSectionUpdate {
	tsu.mutation.ClearCurrentVersionID()
	return tsu
}

// SetCid sets the "cid" field.
func (tsu *TemplateSectionUpdate) SetCid(s string) *TemplateSectionUpdate {
	tsu.mutation.SetCid(s)
	return tsu
}

// SetName sets the "name" field.
func (tsu *TemplateSectionUpdate) SetName(s string) *TemplateSectionUpdate {
	tsu.mutation.SetName(s)
	return tsu
}

// SetArea sets the "area" field.
func (tsu *TemplateSectionUpdate) SetArea(t templatesection.Area) *TemplateSectionUpdate {
	tsu.mutation.SetArea(t)
	return tsu
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (tsu *TemplateSectionUpdate) SetNillableArea(t *templatesection.Area) *TemplateSectionUpdate {
	if t != nil {
		tsu.SetArea(*t)
	}
	return tsu
}

// SetComponent sets the "component" field.
func (tsu *TemplateSectionUpdate) SetComponent(s string) *TemplateSectionUpdate {
	tsu.mutation.SetComponent(s)
	return tsu
}

// SetPosition sets the "position" field.
func (tsu *TemplateSectionUpdate) SetPosition(i int) *TemplateSectionUpdate {
	tsu.mutation.ResetPosition()
	tsu.mutation.SetPosition(i)
	return tsu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (tsu *TemplateSectionUpdate) SetNillablePosition(i *int) *TemplateSectionUpdate {
	if i != nil {
		tsu.SetPosition(*i)
	}
	return tsu
}

// AddPosition adds i to the "position" field.
func (tsu *TemplateSectionUpdate) AddPosition(i int) *TemplateSectionUpdate {
	tsu.mutation.AddPosition(i)
	return tsu
}

// SetDisplay sets the "display" field.
func (tsu *TemplateSectionUpdate) SetDisplay(b bool) *TemplateSectionUpdate {
	tsu.mutation.SetDisplay(b)
	return tsu
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (tsu *TemplateSectionUpdate) SetNillableDisplay(b *bool) *TemplateSectionUpdate {
	if b != nil {
		tsu.SetDisplay(*b)
	}
	return tsu
}

// AddRevisionIDs adds the "revisions" edge to the BkTemplateSection entity by IDs.
func (tsu *TemplateSectionUpdate) AddRevisionIDs(ids ...uint64) *TemplateSectionUpdate {
	tsu.mutation.AddRevisionIDs(ids...)
	return tsu
}

// AddRevisions adds the "revisions" edges to the BkTemplateSection entity.
func (tsu *TemplateSectionUpdate) AddRevisions(b ...*BkTemplateSection) *TemplateSectionUpdate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tsu.AddRevisionIDs(ids...)
}

// Mutation returns the TemplateSectionMutation object of the builder.
func (tsu *TemplateSectionUpdate) Mutation() *TemplateSectionMutation {
	return tsu.mutation
}

// ClearRevisions clears all "revisions" edges to the BkTemplateSection entity.
func (tsu *TemplateSectionUpdate) ClearRevisions() *TemplateSectionUpdate {
	tsu.mutation.ClearRevisions()
	return tsu
}

// RemoveRevisionIDs removes the "revisions" edge to BkTemplateSection entities by IDs.
func (tsu *TemplateSectionUpdate) RemoveRevisionIDs(ids ...uint64) *TemplateSectionUpdate {
	tsu.mutation.RemoveRevisionIDs(ids...)
	return tsu
}

// RemoveRevisions removes "revisions" edges to BkTemplateSection entities.
func (tsu *TemplateSectionUpdate) RemoveRevisions(b ...*BkTemplateSection) *TemplateSectionUpdate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tsu.RemoveRevisionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsu *TemplateSectionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tsu.defaults()
	if len(tsu.hooks) == 0 {
		if err = tsu.check(); err != nil {
			return 0, err
		}
		affected, err = tsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TemplateSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tsu.check(); err != nil {
				return 0, err
			}
			tsu.mutation = mutation
			affected, err = tsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tsu.hooks) - 1; i >= 0; i-- {
			if tsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *TemplateSectionUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *TemplateSectionUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *TemplateSectionUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsu *TemplateSectionUpdate) defaults() {
	if _, ok := tsu.mutation.UpdatedAt(); !ok {
		v := templatesection.UpdateDefaultUpdatedAt()
		tsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsu *TemplateSectionUpdate) check() error {
	if v, ok := tsu.mutation.Cid(); ok {
		if err := templatesection.CidValidator(v); err != nil {
			return &ValidationError{Name: "cid", err: fmt.Errorf("ent: validator failed for field \"cid\": %w", err)}
		}
	}
	if v, ok := tsu.mutation.Name(); ok {
		if err := templatesection.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := tsu.mutation.Area(); ok {
		if err := templatesection.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf("ent: validator failed for field \"area\": %w", err)}
		}
	}
	return nil
}

func (tsu *TemplateSectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   templatesection.Table,
			Columns: templatesection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: templatesection.FieldID,
			},
		},
	}
	if ps := tsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: templatesection.FieldUpdatedAt,
		})
	}
	if value, ok := tsu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: templatesection.FieldDeletedAt,
		})
	}
	if tsu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: templatesection.FieldDeletedAt,
		})
	}
	if value, ok := tsu.mutation.ShopID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldShopID,
		})
	}
	if value, ok := tsu.mutation.AddedShopID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldShopID,
		})
	}
	if tsu.mutation.ShopIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: templatesection.FieldShopID,
		})
	}
	if value, ok := tsu.mutation.GlobalSectionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldGlobalSectionID,
		})
	}
	if value, ok := tsu.mutation.AddedGlobalSectionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldGlobalSectionID,
		})
	}
	if tsu.mutation.GlobalSectionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: templatesection.FieldGlobalSectionID,
		})
	}
	if value, ok := tsu.mutation.ThemeTemplateID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldThemeTemplateID,
		})
	}
	if value, ok := tsu.mutation.AddedThemeTemplateID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldThemeTemplateID,
		})
	}
	if tsu.mutation.ThemeTemplateIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: templatesection.FieldThemeTemplateID,
		})
	}
	if value, ok := tsu.mutation.CurrentVersionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldCurrentVersionID,
		})
	}
	if value, ok := tsu.mutation.AddedCurrentVersionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldCurrentVersionID,
		})
	}
	if tsu.mutation.CurrentVersionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: templatesection.FieldCurrentVersionID,
		})
	}
	if value, ok := tsu.mutation.Cid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatesection.FieldCid,
		})
	}
	if value, ok := tsu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatesection.FieldName,
		})
	}
	if value, ok := tsu.mutation.Area(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: templatesection.FieldArea,
		})
	}
	if value, ok := tsu.mutation.Component(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatesection.FieldComponent,
		})
	}
	if value, ok := tsu.mutation.Position(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: templatesection.FieldPosition,
		})
	}
	if value, ok := tsu.mutation.AddedPosition(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: templatesection.FieldPosition,
		})
	}
	if value, ok := tsu.mutation.Display(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: templatesection.FieldDisplay,
		})
	}
	if tsu.mutation.RevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templatesection.RevisionsTable,
			Columns: []string{templatesection.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bktemplatesection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.RemovedRevisionsIDs(); len(nodes) > 0 && !tsu.mutation.RevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templatesection.RevisionsTable,
			Columns: []string{templatesection.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bktemplatesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.RevisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templatesection.RevisionsTable,
			Columns: []string{templatesection.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bktemplatesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{templatesection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TemplateSectionUpdateOne is the builder for updating a single TemplateSection entity.
type TemplateSectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TemplateSectionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tsuo *TemplateSectionUpdateOne) SetUpdatedAt(t time.Time) *TemplateSectionUpdateOne {
	tsuo.mutation.SetUpdatedAt(t)
	return tsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tsuo *TemplateSectionUpdateOne) SetDeletedAt(t time.Time) *TemplateSectionUpdateOne {
	tsuo.mutation.SetDeletedAt(t)
	return tsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsuo *TemplateSectionUpdateOne) SetNillableDeletedAt(t *time.Time) *TemplateSectionUpdateOne {
	if t != nil {
		tsuo.SetDeletedAt(*t)
	}
	return tsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tsuo *TemplateSectionUpdateOne) ClearDeletedAt() *TemplateSectionUpdateOne {
	tsuo.mutation.ClearDeletedAt()
	return tsuo
}

// SetShopID sets the "shop_id" field.
func (tsuo *TemplateSectionUpdateOne) SetShopID(u uint64) *TemplateSectionUpdateOne {
	tsuo.mutation.ResetShopID()
	tsuo.mutation.SetShopID(u)
	return tsuo
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (tsuo *TemplateSectionUpdateOne) SetNillableShopID(u *uint64) *TemplateSectionUpdateOne {
	if u != nil {
		tsuo.SetShopID(*u)
	}
	return tsuo
}

// AddShopID adds u to the "shop_id" field.
func (tsuo *TemplateSectionUpdateOne) AddShopID(u uint64) *TemplateSectionUpdateOne {
	tsuo.mutation.AddShopID(u)
	return tsuo
}

// ClearShopID clears the value of the "shop_id" field.
func (tsuo *TemplateSectionUpdateOne) ClearShopID() *TemplateSectionUpdateOne {
	tsuo.mutation.ClearShopID()
	return tsuo
}

// SetGlobalSectionID sets the "global_section_id" field.
func (tsuo *TemplateSectionUpdateOne) SetGlobalSectionID(u uint64) *TemplateSectionUpdateOne {
	tsuo.mutation.ResetGlobalSectionID()
	tsuo.mutation.SetGlobalSectionID(u)
	return tsuo
}

// SetNillableGlobalSectionID sets the "global_section_id" field if the given value is not nil.
func (tsuo *TemplateSectionUpdateOne) SetNillableGlobalSectionID(u *uint64) *TemplateSectionUpdateOne {
	if u != nil {
		tsuo.SetGlobalSectionID(*u)
	}
	return tsuo
}

// AddGlobalSectionID adds u to the "global_section_id" field.
func (tsuo *TemplateSectionUpdateOne) AddGlobalSectionID(u uint64) *TemplateSectionUpdateOne {
	tsuo.mutation.AddGlobalSectionID(u)
	return tsuo
}

// ClearGlobalSectionID clears the value of the "global_section_id" field.
func (tsuo *TemplateSectionUpdateOne) ClearGlobalSectionID() *TemplateSectionUpdateOne {
	tsuo.mutation.ClearGlobalSectionID()
	return tsuo
}

// SetThemeTemplateID sets the "theme_template_id" field.
func (tsuo *TemplateSectionUpdateOne) SetThemeTemplateID(u uint64) *TemplateSectionUpdateOne {
	tsuo.mutation.ResetThemeTemplateID()
	tsuo.mutation.SetThemeTemplateID(u)
	return tsuo
}

// SetNillableThemeTemplateID sets the "theme_template_id" field if the given value is not nil.
func (tsuo *TemplateSectionUpdateOne) SetNillableThemeTemplateID(u *uint64) *TemplateSectionUpdateOne {
	if u != nil {
		tsuo.SetThemeTemplateID(*u)
	}
	return tsuo
}

// AddThemeTemplateID adds u to the "theme_template_id" field.
func (tsuo *TemplateSectionUpdateOne) AddThemeTemplateID(u uint64) *TemplateSectionUpdateOne {
	tsuo.mutation.AddThemeTemplateID(u)
	return tsuo
}

// ClearThemeTemplateID clears the value of the "theme_template_id" field.
func (tsuo *TemplateSectionUpdateOne) ClearThemeTemplateID() *TemplateSectionUpdateOne {
	tsuo.mutation.ClearThemeTemplateID()
	return tsuo
}

// SetCurrentVersionID sets the "current_version_id" field.
func (tsuo *TemplateSectionUpdateOne) SetCurrentVersionID(u uint64) *TemplateSectionUpdateOne {
	tsuo.mutation.ResetCurrentVersionID()
	tsuo.mutation.SetCurrentVersionID(u)
	return tsuo
}

// SetNillableCurrentVersionID sets the "current_version_id" field if the given value is not nil.
func (tsuo *TemplateSectionUpdateOne) SetNillableCurrentVersionID(u *uint64) *TemplateSectionUpdateOne {
	if u != nil {
		tsuo.SetCurrentVersionID(*u)
	}
	return tsuo
}

// AddCurrentVersionID adds u to the "current_version_id" field.
func (tsuo *TemplateSectionUpdateOne) AddCurrentVersionID(u uint64) *TemplateSectionUpdateOne {
	tsuo.mutation.AddCurrentVersionID(u)
	return tsuo
}

// ClearCurrentVersionID clears the value of the "current_version_id" field.
func (tsuo *TemplateSectionUpdateOne) ClearCurrentVersionID() *TemplateSectionUpdateOne {
	tsuo.mutation.ClearCurrentVersionID()
	return tsuo
}

// SetCid sets the "cid" field.
func (tsuo *TemplateSectionUpdateOne) SetCid(s string) *TemplateSectionUpdateOne {
	tsuo.mutation.SetCid(s)
	return tsuo
}

// SetName sets the "name" field.
func (tsuo *TemplateSectionUpdateOne) SetName(s string) *TemplateSectionUpdateOne {
	tsuo.mutation.SetName(s)
	return tsuo
}

// SetArea sets the "area" field.
func (tsuo *TemplateSectionUpdateOne) SetArea(t templatesection.Area) *TemplateSectionUpdateOne {
	tsuo.mutation.SetArea(t)
	return tsuo
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (tsuo *TemplateSectionUpdateOne) SetNillableArea(t *templatesection.Area) *TemplateSectionUpdateOne {
	if t != nil {
		tsuo.SetArea(*t)
	}
	return tsuo
}

// SetComponent sets the "component" field.
func (tsuo *TemplateSectionUpdateOne) SetComponent(s string) *TemplateSectionUpdateOne {
	tsuo.mutation.SetComponent(s)
	return tsuo
}

// SetPosition sets the "position" field.
func (tsuo *TemplateSectionUpdateOne) SetPosition(i int) *TemplateSectionUpdateOne {
	tsuo.mutation.ResetPosition()
	tsuo.mutation.SetPosition(i)
	return tsuo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (tsuo *TemplateSectionUpdateOne) SetNillablePosition(i *int) *TemplateSectionUpdateOne {
	if i != nil {
		tsuo.SetPosition(*i)
	}
	return tsuo
}

// AddPosition adds i to the "position" field.
func (tsuo *TemplateSectionUpdateOne) AddPosition(i int) *TemplateSectionUpdateOne {
	tsuo.mutation.AddPosition(i)
	return tsuo
}

// SetDisplay sets the "display" field.
func (tsuo *TemplateSectionUpdateOne) SetDisplay(b bool) *TemplateSectionUpdateOne {
	tsuo.mutation.SetDisplay(b)
	return tsuo
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (tsuo *TemplateSectionUpdateOne) SetNillableDisplay(b *bool) *TemplateSectionUpdateOne {
	if b != nil {
		tsuo.SetDisplay(*b)
	}
	return tsuo
}

// AddRevisionIDs adds the "revisions" edge to the BkTemplateSection entity by IDs.
func (tsuo *TemplateSectionUpdateOne) AddRevisionIDs(ids ...uint64) *TemplateSectionUpdateOne {
	tsuo.mutation.AddRevisionIDs(ids...)
	return tsuo
}

// AddRevisions adds the "revisions" edges to the BkTemplateSection entity.
func (tsuo *TemplateSectionUpdateOne) AddRevisions(b ...*BkTemplateSection) *TemplateSectionUpdateOne {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tsuo.AddRevisionIDs(ids...)
}

// Mutation returns the TemplateSectionMutation object of the builder.
func (tsuo *TemplateSectionUpdateOne) Mutation() *TemplateSectionMutation {
	return tsuo.mutation
}

// ClearRevisions clears all "revisions" edges to the BkTemplateSection entity.
func (tsuo *TemplateSectionUpdateOne) ClearRevisions() *TemplateSectionUpdateOne {
	tsuo.mutation.ClearRevisions()
	return tsuo
}

// RemoveRevisionIDs removes the "revisions" edge to BkTemplateSection entities by IDs.
func (tsuo *TemplateSectionUpdateOne) RemoveRevisionIDs(ids ...uint64) *TemplateSectionUpdateOne {
	tsuo.mutation.RemoveRevisionIDs(ids...)
	return tsuo
}

// RemoveRevisions removes "revisions" edges to BkTemplateSection entities.
func (tsuo *TemplateSectionUpdateOne) RemoveRevisions(b ...*BkTemplateSection) *TemplateSectionUpdateOne {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tsuo.RemoveRevisionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsuo *TemplateSectionUpdateOne) Select(field string, fields ...string) *TemplateSectionUpdateOne {
	tsuo.fields = append([]string{field}, fields...)
	return tsuo
}

// Save executes the query and returns the updated TemplateSection entity.
func (tsuo *TemplateSectionUpdateOne) Save(ctx context.Context) (*TemplateSection, error) {
	var (
		err  error
		node *TemplateSection
	)
	tsuo.defaults()
	if len(tsuo.hooks) == 0 {
		if err = tsuo.check(); err != nil {
			return nil, err
		}
		node, err = tsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TemplateSectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tsuo.check(); err != nil {
				return nil, err
			}
			tsuo.mutation = mutation
			node, err = tsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tsuo.hooks) - 1; i >= 0; i-- {
			if tsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *TemplateSectionUpdateOne) SaveX(ctx context.Context) *TemplateSection {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *TemplateSectionUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *TemplateSectionUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsuo *TemplateSectionUpdateOne) defaults() {
	if _, ok := tsuo.mutation.UpdatedAt(); !ok {
		v := templatesection.UpdateDefaultUpdatedAt()
		tsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsuo *TemplateSectionUpdateOne) check() error {
	if v, ok := tsuo.mutation.Cid(); ok {
		if err := templatesection.CidValidator(v); err != nil {
			return &ValidationError{Name: "cid", err: fmt.Errorf("ent: validator failed for field \"cid\": %w", err)}
		}
	}
	if v, ok := tsuo.mutation.Name(); ok {
		if err := templatesection.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := tsuo.mutation.Area(); ok {
		if err := templatesection.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf("ent: validator failed for field \"area\": %w", err)}
		}
	}
	return nil
}

func (tsuo *TemplateSectionUpdateOne) sqlSave(ctx context.Context) (_node *TemplateSection, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   templatesection.Table,
			Columns: templatesection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: templatesection.FieldID,
			},
		},
	}
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TemplateSection.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, templatesection.FieldID)
		for _, f := range fields {
			if !templatesection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != templatesection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: templatesection.FieldUpdatedAt,
		})
	}
	if value, ok := tsuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: templatesection.FieldDeletedAt,
		})
	}
	if tsuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: templatesection.FieldDeletedAt,
		})
	}
	if value, ok := tsuo.mutation.ShopID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldShopID,
		})
	}
	if value, ok := tsuo.mutation.AddedShopID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldShopID,
		})
	}
	if tsuo.mutation.ShopIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: templatesection.FieldShopID,
		})
	}
	if value, ok := tsuo.mutation.GlobalSectionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldGlobalSectionID,
		})
	}
	if value, ok := tsuo.mutation.AddedGlobalSectionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldGlobalSectionID,
		})
	}
	if tsuo.mutation.GlobalSectionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: templatesection.FieldGlobalSectionID,
		})
	}
	if value, ok := tsuo.mutation.ThemeTemplateID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldThemeTemplateID,
		})
	}
	if value, ok := tsuo.mutation.AddedThemeTemplateID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldThemeTemplateID,
		})
	}
	if tsuo.mutation.ThemeTemplateIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: templatesection.FieldThemeTemplateID,
		})
	}
	if value, ok := tsuo.mutation.CurrentVersionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldCurrentVersionID,
		})
	}
	if value, ok := tsuo.mutation.AddedCurrentVersionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: templatesection.FieldCurrentVersionID,
		})
	}
	if tsuo.mutation.CurrentVersionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: templatesection.FieldCurrentVersionID,
		})
	}
	if value, ok := tsuo.mutation.Cid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatesection.FieldCid,
		})
	}
	if value, ok := tsuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatesection.FieldName,
		})
	}
	if value, ok := tsuo.mutation.Area(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: templatesection.FieldArea,
		})
	}
	if value, ok := tsuo.mutation.Component(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatesection.FieldComponent,
		})
	}
	if value, ok := tsuo.mutation.Position(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: templatesection.FieldPosition,
		})
	}
	if value, ok := tsuo.mutation.AddedPosition(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: templatesection.FieldPosition,
		})
	}
	if value, ok := tsuo.mutation.Display(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: templatesection.FieldDisplay,
		})
	}
	if tsuo.mutation.RevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templatesection.RevisionsTable,
			Columns: []string{templatesection.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bktemplatesection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.RemovedRevisionsIDs(); len(nodes) > 0 && !tsuo.mutation.RevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templatesection.RevisionsTable,
			Columns: []string{templatesection.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bktemplatesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.RevisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   templatesection.RevisionsTable,
			Columns: []string{templatesection.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bktemplatesection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TemplateSection{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{templatesection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
