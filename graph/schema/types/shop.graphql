type ShopConnection {
	totalCount: Int!
	pageInfo: PageInfo!
	edges: [ShopEdge]
}

type ShopEdge {
	node: Shop
	cursor: Cursor!
}

"""
The following enums are matched the entgql annotations in the ent/schema.
"""
enum ShopOrderField {
	CREATED_AT
	UPDATED_AT
	DEFAULT_DOMAIN
	CUSTOM_DOMAIN
}

input ShopOrder {
	direction: OrderDirection!
	field: ShopOrderField
}

"""
Define an object type and map it later to the generated Ent model.
https://graphql.org/learn/schema/#object-types-and-fields
"""
type Shop implements Node @key(fields: "id") {
	id: ID!
	createdAt: Time
	updatedAt: Time
	defaultDomain: String!
	customDomain: String!
	themes: [Theme] @goField(forceResolver: true)
}

"""
Define an input type for the mutation below.
https://graphql.org/learn/schema/#input-types

Note that, this type is mapped to the generated
input type in mutation_input.go.
"""
input CreateShopInput {
	defaultDomain: String
	customDomain: String
}

"""
Define an input type for the mutation below.
https://graphql.org/learn/schema/#input-types

Note that, this type is mapped to the generated
input type in mutation_input.go.
"""
input UpdateShopInput {
	defaultDomain: String
	customDomain: String
}

type User {
	id: ID!
	userName: String
	email: String
	roles: [String]
}

extend type Mutation {
	createShop(input: CreateShopInput!): Shop!
	updateShop(id: ID!, input: UpdateShopInput!): Shop!
	updateShops(ids: [ID!]!, input: UpdateShopInput!): [Shop!]!
	shopAddManager(adminEmail: String!): Boolean
	shopRemoveManager(adminEmail: String!): Boolean
}

extend type Query {
	shops(
		after: Cursor
		first: Int
		before: Cursor
		last: Int
		orderBy: ShopOrder
		where: ShopWhereInput
	): ShopConnection
	shopListManager: [User]!
}
